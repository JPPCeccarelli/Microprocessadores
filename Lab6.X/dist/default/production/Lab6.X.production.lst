

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 22 16:15:48 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F886 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0009                     	;# 
    86  000A                     	;# 
    87  000B                     	;# 
    88  000C                     	;# 
    89  000D                     	;# 
    90  000E                     	;# 
    91  000E                     	;# 
    92  000F                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0013                     	;# 
    97  0014                     	;# 
    98  0015                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  0081                     	;# 
   112  0085                     	;# 
   113  0086                     	;# 
   114  0087                     	;# 
   115  0089                     	;# 
   116  008C                     	;# 
   117  008D                     	;# 
   118  008E                     	;# 
   119  008F                     	;# 
   120  0090                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0093                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0098                     	;# 
   131  0099                     	;# 
   132  009A                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  009F                     	;# 
   138  0105                     	;# 
   139  0107                     	;# 
   140  0108                     	;# 
   141  0109                     	;# 
   142  010C                     	;# 
   143  010C                     	;# 
   144  010D                     	;# 
   145  010E                     	;# 
   146  010F                     	;# 
   147  0185                     	;# 
   148  0187                     	;# 
   149  0188                     	;# 
   150  0189                     	;# 
   151  018C                     	;# 
   152  018D                     	;# 
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0014                     	;# 
   174  0015                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  0081                     	;# 
   188  0085                     	;# 
   189  0086                     	;# 
   190  0087                     	;# 
   191  0089                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  008F                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0093                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0095                     	;# 
   204  0096                     	;# 
   205  0097                     	;# 
   206  0098                     	;# 
   207  0099                     	;# 
   208  009A                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  0105                     	;# 
   215  0107                     	;# 
   216  0108                     	;# 
   217  0109                     	;# 
   218  010C                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  010F                     	;# 
   223  0185                     	;# 
   224  0187                     	;# 
   225  0188                     	;# 
   226  0189                     	;# 
   227  018C                     	;# 
   228  018D                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305  0000                     	;# 
   306  0001                     	;# 
   307  0002                     	;# 
   308  0003                     	;# 
   309  0004                     	;# 
   310  0005                     	;# 
   311  0006                     	;# 
   312  0007                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0089                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  008F                     	;# 
   348  0090                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  009F                     	;# 
   366  0105                     	;# 
   367  0107                     	;# 
   368  0108                     	;# 
   369  0109                     	;# 
   370  010C                     	;# 
   371  010C                     	;# 
   372  010D                     	;# 
   373  010E                     	;# 
   374  010F                     	;# 
   375  0185                     	;# 
   376  0187                     	;# 
   377  0188                     	;# 
   378  0189                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  000E                     	;# 
   396  000F                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0014                     	;# 
   402  0015                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  001D                     	;# 
   413  001E                     	;# 
   414  001F                     	;# 
   415  0081                     	;# 
   416  0085                     	;# 
   417  0086                     	;# 
   418  0087                     	;# 
   419  0089                     	;# 
   420  008C                     	;# 
   421  008D                     	;# 
   422  008E                     	;# 
   423  008F                     	;# 
   424  0090                     	;# 
   425  0091                     	;# 
   426  0092                     	;# 
   427  0093                     	;# 
   428  0093                     	;# 
   429  0093                     	;# 
   430  0094                     	;# 
   431  0095                     	;# 
   432  0096                     	;# 
   433  0097                     	;# 
   434  0098                     	;# 
   435  0099                     	;# 
   436  009A                     	;# 
   437  009B                     	;# 
   438  009C                     	;# 
   439  009D                     	;# 
   440  009E                     	;# 
   441  009F                     	;# 
   442  0105                     	;# 
   443  0107                     	;# 
   444  0108                     	;# 
   445  0109                     	;# 
   446  010C                     	;# 
   447  010C                     	;# 
   448  010D                     	;# 
   449  010E                     	;# 
   450  010F                     	;# 
   451  0185                     	;# 
   452  0187                     	;# 
   453  0188                     	;# 
   454  0189                     	;# 
   455  018C                     	;# 
   456  018D                     	;# 
   457  0000                     	;# 
   458  0001                     	;# 
   459  0002                     	;# 
   460  0003                     	;# 
   461  0004                     	;# 
   462  0005                     	;# 
   463  0006                     	;# 
   464  0007                     	;# 
   465  0009                     	;# 
   466  000A                     	;# 
   467  000B                     	;# 
   468  000C                     	;# 
   469  000D                     	;# 
   470  000E                     	;# 
   471  000E                     	;# 
   472  000F                     	;# 
   473  0010                     	;# 
   474  0011                     	;# 
   475  0012                     	;# 
   476  0013                     	;# 
   477  0014                     	;# 
   478  0015                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0017                     	;# 
   482  0018                     	;# 
   483  0019                     	;# 
   484  001A                     	;# 
   485  001B                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001D                     	;# 
   489  001E                     	;# 
   490  001F                     	;# 
   491  0081                     	;# 
   492  0085                     	;# 
   493  0086                     	;# 
   494  0087                     	;# 
   495  0089                     	;# 
   496  008C                     	;# 
   497  008D                     	;# 
   498  008E                     	;# 
   499  008F                     	;# 
   500  0090                     	;# 
   501  0091                     	;# 
   502  0092                     	;# 
   503  0093                     	;# 
   504  0093                     	;# 
   505  0093                     	;# 
   506  0094                     	;# 
   507  0095                     	;# 
   508  0096                     	;# 
   509  0097                     	;# 
   510  0098                     	;# 
   511  0099                     	;# 
   512  009A                     	;# 
   513  009B                     	;# 
   514  009C                     	;# 
   515  009D                     	;# 
   516  009E                     	;# 
   517  009F                     	;# 
   518  0105                     	;# 
   519  0107                     	;# 
   520  0108                     	;# 
   521  0109                     	;# 
   522  010C                     	;# 
   523  010C                     	;# 
   524  010D                     	;# 
   525  010E                     	;# 
   526  010F                     	;# 
   527  0185                     	;# 
   528  0187                     	;# 
   529  0188                     	;# 
   530  0189                     	;# 
   531  018C                     	;# 
   532  018D                     	;# 
   533                           
   534                           	psect	idataBANK0
   535  07FF                     __pidataBANK0:	
   536                           
   537                           ;initializer for io_sw_read@swOld
   538  07FF  3401               	retlw	1
   539                           
   540                           	psect	strings
   541  0615                     __pstrings:	
   542  0615                     stringtab:	
   543  0615                     __stringtab:	
   544                           
   545                           ;	String table - string pointers are 1 byte each
   546  0615  1BFF               	btfsc	btemp+1,7
   547  0616  2E1F               	ljmp	stringcode
   548  0617  1383               	bcf	3,7
   549  0618  187F               	btfsc	btemp+1,0
   550  0619  1783               	bsf	3,7
   551  061A  0800               	movf	0,w
   552  061B  0A84               	incf	4,f
   553  061C  1903               	skipnz
   554  061D  0AFF               	incf	btemp+1,f
   555  061E  0008               	return
   556  061F                     stringcode:	
   557  061F                     stringdir:	
   558  061F  3006               	movlw	high stringdir
   559  0620  008A               	movwf	10
   560  0621  0804               	movf	4,w
   561  0622  0A84               	incf	4,f
   562  0623  0782               	addwf	2,f
   563  0624                     __stringbase:	
   564  0624  3400               	retlw	0
   565  0625                     __end_of__stringtab:	
   566  0625                     _dpowers:	
   567  0625  3401               	retlw	1
   568  0626  3400               	retlw	0
   569  0627  340A               	retlw	10
   570  0628  3400               	retlw	0
   571  0629  3464               	retlw	100
   572  062A  3400               	retlw	0
   573  062B  34E8               	retlw	232
   574  062C  3403               	retlw	3
   575  062D  3410               	retlw	16
   576  062E  3427               	retlw	39
   577  062F                     __end_of_dpowers:	
   578  0012                     _T2CONbits	set	18
   579  001B                     _CCPR2L	set	27
   580  0015                     _CCPR1L	set	21
   581  001D                     _CCP2CONbits	set	29
   582  0017                     _CCP1CONbits	set	23
   583  0006                     _PORTB	set	6
   584  0001                     _TMR0	set	1
   585  001E                     _ADRESH	set	30
   586  0092                     _TMR2ON	set	146
   587  0061                     _TMR2IF	set	97
   588  00EC                     _DC2B0	set	236
   589  00ED                     _DC2B1	set	237
   590  005F                     _GIE	set	95
   591  0029                     _RA1	set	41
   592  0058                     _RBIF	set	88
   593  005A                     _T0IF	set	90
   594  005D                     _T0IE	set	93
   595  0030                     _RB0	set	48
   596  003D                     _RC5	set	61
   597  003C                     _RC4	set	60
   598  003B                     _RC3	set	59
   599  0038                     _RC0	set	56
   600  002B                     _RA3	set	43
   601  002A                     _RA2	set	42
   602  0037                     _RB7	set	55
   603  0035                     _RB5	set	53
   604  005B                     _RBIE	set	91
   605  0031                     _RB1	set	49
   606  0032                     _RB2	set	50
   607  002C                     _RA4	set	44
   608  00F9                     _GO	set	249
   609  00F8                     _ADON	set	248
   610  00FD                     _CHS3	set	253
   611  00FC                     _CHS2	set	252
   612  00FB                     _CHS1	set	251
   613  00FA                     _CHS0	set	250
   614  00FF                     _ADCS1	set	255
   615  00FE                     _ADCS0	set	254
   616  0092                     _PR2	set	146
   617  0095                     _WPUB	set	149
   618  0087                     _TRISC	set	135
   619  009E                     _ADRESL	set	158
   620  0085                     _TRISA	set	133
   621  0429                     _TRISA1	set	1065
   622  040A                     _PS2	set	1034
   623  0409                     _PS1	set	1033
   624  0408                     _PS0	set	1032
   625  040B                     _PSA	set	1035
   626  040D                     _T0CS	set	1037
   627  042A                     _TRISA2	set	1066
   628  042B                     _TRISA3	set	1067
   629  0430                     _TRISB0	set	1072
   630  04B6                     _IOCB6	set	1206
   631  04AE                     _WPUB6	set	1198
   632  040F                     _nRBPU	set	1039
   633  0436                     _TRISB6	set	1078
   634  0437                     _TRISB7	set	1079
   635  0435                     _TRISB5	set	1077
   636  0431                     _TRISB1	set	1073
   637  0432                     _TRISB2	set	1074
   638  042C                     _TRISA4	set	1068
   639  04FF                     _ADFM	set	1279
   640  04FD                     _VCFG1	set	1277
   641  04FC                     _VCFG0	set	1276
   642  0189                     _ANSELH	set	393
   643  0188                     _ANSEL	set	392
   644  0C42                     _ANS2	set	3138
   645  0C43                     _ANS3	set	3139
   646  0C4D                     _ANS13	set	3149
   647  0C4C                     _ANS12	set	3148
   648  0C48                     _ANS8	set	3144
   649  062F                     STR_1:	
   650  062F  3454               	retlw	84	;'T'
   651  0630  3435               	retlw	53	;'5'
   652  0631  3447               	retlw	71	;'G'
   653  0632  3437               	retlw	55	;'7'
   654  0633  3420               	retlw	32	;' '
   655  0634  344A               	retlw	74	;'J'
   656  0635  3456               	retlw	86	;'V'
   657  0636  3400               	retlw	0
   658  0637                     STR_2:	
   659  0637  3425               	retlw	37	;'%'
   660  0638  3435               	retlw	53	;'5'
   661  0639  3464               	retlw	100	;'d'
   662  063A  3420               	retlw	32	;' '
   663  063B  346D               	retlw	109	;'m'
   664  063C  346D               	retlw	109	;'m'
   665  063D  3400               	retlw	0
   666  063E                     STR_3:	
   667  063E  3431               	retlw	49	;'1'
   668  063F  343A               	retlw	58	;':'
   669  0640  3425               	retlw	37	;'%'
   670  0641  3434               	retlw	52	;'4'
   671  0642  3464               	retlw	100	;'d'
   672  0643  3400               	retlw	0
   673  0644                     STR_4:	
   674  0644  3432               	retlw	50	;'2'
   675  0645  343A               	retlw	58	;':'
   676  0646  3425               	retlw	37	;'%'
   677  0647  3434               	retlw	52	;'4'
   678  0648  3464               	retlw	100	;'d'
   679  0649  3400               	retlw	0
   680                           
   681                           ; #config settings
   682  0000                     
   683                           	psect	cinit
   684  0015                     start_initialization:	
   685  0015                     __initialization:	
   686                           
   687                           ; Initialize objects allocated to BANK0
   688  0015  120A  118A  27FF   	fcall	__pidataBANK0	;fetch initializer
   689  0018  00D3               	movwf	__pdataBANK0& (0+127)
   690                           
   691                           ; Clear objects allocated to BANK0
   692  0019  01D0               	clrf	__pbssBANK0& (0+127)
   693  001A  01D1               	clrf	(__pbssBANK0+1)& (0+127)
   694                           
   695                           ; Clear objects allocated to BITBANK0
   696  001B  01D2               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   697  001C                     end_of_initialization:	
   698                           ;End of C runtime variable initialization code
   699                           
   700  001C                     __end_of__initialization:	
   701  001C  0183               	clrf	3
   702  001D  120A  118A  2996   	ljmp	_main	;jump to C main() function
   703                           
   704                           	psect	bitbssBANK0
   705  0290                     __pbitbssBANK0:	
   706  0290                     _swPressed:	
   707  0290                     	ds	1
   708                           
   709                           	psect	bssBANK0
   710  0050                     __pbssBANK0:	
   711  0050                     _ADC:	
   712  0050                     	ds	2
   713                           
   714                           	psect	dataBANK0
   715  0053                     __pdataBANK0:	
   716  0053                     io_sw_read@swOld:	
   717  0053                     	ds	1
   718                           
   719                           	psect	cstackCOMMON
   720  0070                     __pcstackCOMMON:	
   721  0070                     ?_isdigit:	
   722  0070                     ?_pwm_init:	
   723                           ; 1 bit 
   724                           
   725  0070                     ?_adc_init_0:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_io_init:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ?_io_sw_read:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ??_io_sw_read:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ?_LCD_RS_SetLow:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0070                     ?_LCD_RS_SetHigh:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0070                     ?_LCD_RW_SetLow:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0070                     ?_lcd_write_nibble:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ?_lcd_write:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_lcd_clear:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0070                     ?_lcd_goto:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  0070                     ?_lcd_init:	
   759                           ; 1 bytes @ 0x0
   760                           
   761  0070                     ?_isr:	
   762                           ; 1 bytes @ 0x0
   763                           
   764  0070                     ?_t0_init:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0070                     ?_ioc_init:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  0070                     ?_main:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0070                     ?_adc_read_0:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  0070                     ?_io_sw_pressed:	
   777                           ; 2 bytes @ 0x0
   778                           
   779                           
   780                           ; 2 bytes @ 0x0
   781  0070                     	ds	2
   782  0072                     ??_adc_read_0:	
   783  0072                     ??_io_sw_pressed:	
   784                           ; 1 bytes @ 0x2
   785                           
   786  0072                     io_sw_read@port:	
   787                           ; 1 bytes @ 0x2
   788                           
   789                           
   790                           ; 1 bytes @ 0x2
   791  0072                     	ds	1
   792  0073                     io_sw_read@swNew:	
   793                           
   794                           ; 1 bytes @ 0x3
   795  0073                     	ds	4
   796  0077                     adc_read_0@result:	
   797                           
   798                           ; 2 bytes @ 0x7
   799  0077                     	ds	2
   800  0079                     ??_isr:	
   801                           
   802                           ; 1 bytes @ 0x9
   803  0079                     	ds	5
   804                           
   805                           	psect	cstackBANK0
   806  0020                     __pcstackBANK0:	
   807  0020                     isr@portB:	
   808                           
   809                           ; 1 bytes @ 0x0
   810  0020                     	ds	1
   811  0021                     ??_pwm_init:	
   812  0021                     ??_isdigit:	
   813                           ; 1 bytes @ 0x1
   814                           
   815  0021                     ??_adc_init_0:	
   816                           ; 1 bytes @ 0x1
   817                           
   818  0021                     ??_io_init:	
   819                           ; 1 bytes @ 0x1
   820                           
   821  0021                     ??_LCD_RS_SetLow:	
   822                           ; 1 bytes @ 0x1
   823                           
   824  0021                     ??_LCD_RS_SetHigh:	
   825                           ; 1 bytes @ 0x1
   826                           
   827  0021                     ??_LCD_RW_SetLow:	
   828                           ; 1 bytes @ 0x1
   829                           
   830  0021                     ??_lcd_write_nibble:	
   831                           ; 1 bytes @ 0x1
   832                           
   833  0021                     ??_t0_init:	
   834                           ; 1 bytes @ 0x1
   835                           
   836  0021                     ??_ioc_init:	
   837                           ; 1 bytes @ 0x1
   838                           
   839  0021                     ?___wmul:	
   840                           ; 1 bytes @ 0x1
   841                           
   842  0021                     ?___lwdiv:	
   843                           ; 2 bytes @ 0x1
   844                           
   845  0021                     _isdigit$549:	
   846                           ; 2 bytes @ 0x1
   847                           
   848  0021                     ___wmul@multiplier:	
   849                           ; 1 bytes @ 0x1
   850                           
   851  0021                     ___lwdiv@divisor:	
   852                           ; 2 bytes @ 0x1
   853                           
   854                           
   855                           ; 2 bytes @ 0x1
   856  0021                     	ds	1
   857  0022                     lcd_write_nibble@c:	
   858  0022                     isdigit@c:	
   859                           ; 1 bytes @ 0x2
   860                           
   861                           
   862                           ; 1 bytes @ 0x2
   863  0022                     	ds	1
   864  0023                     ??_lcd_write:	
   865  0023                     ___wmul@multiplicand:	
   866                           ; 1 bytes @ 0x3
   867                           
   868  0023                     ___lwdiv@dividend:	
   869                           ; 2 bytes @ 0x3
   870                           
   871                           
   872                           ; 2 bytes @ 0x3
   873  0023                     	ds	1
   874  0024                     lcd_write@c:	
   875                           
   876                           ; 1 bytes @ 0x4
   877  0024                     	ds	1
   878  0025                     ??_lcd_clear:	
   879  0025                     ?_lcd_puts:	
   880                           ; 1 bytes @ 0x5
   881                           
   882  0025                     ??_lcd_goto:	
   883                           ; 1 bytes @ 0x5
   884                           
   885  0025                     ?_lcd_cursor:	
   886                           ; 1 bytes @ 0x5
   887                           
   888  0025                     ??_lcd_init:	
   889                           ; 1 bytes @ 0x5
   890                           
   891  0025                     ??___wmul:	
   892                           ; 1 bytes @ 0x5
   893                           
   894  0025                     ??___lwdiv:	
   895                           ; 1 bytes @ 0x5
   896                           
   897  0025                     lcd_goto@pos:	
   898                           ; 1 bytes @ 0x5
   899                           
   900  0025                     lcd_puts@s:	
   901                           ; 1 bytes @ 0x5
   902                           
   903  0025                     lcd_cursor@on:	
   904                           ; 2 bytes @ 0x5
   905                           
   906  0025                     ___wmul@product:	
   907                           ; 2 bytes @ 0x5
   908                           
   909                           
   910                           ; 2 bytes @ 0x5
   911  0025                     	ds	1
   912  0026                     ___lwdiv@quotient:	
   913                           
   914                           ; 2 bytes @ 0x6
   915  0026                     	ds	1
   916  0027                     ??_lcd_puts:	
   917  0027                     ??_lcd_cursor:	
   918                           ; 1 bytes @ 0x7
   919                           
   920  0027                     ?___awdiv:	
   921                           ; 1 bytes @ 0x7
   922                           
   923  0027                     ___awdiv@divisor:	
   924                           ; 2 bytes @ 0x7
   925                           
   926                           
   927                           ; 2 bytes @ 0x7
   928  0027                     	ds	1
   929  0028                     ___lwdiv@counter:	
   930                           
   931                           ; 1 bytes @ 0x8
   932  0028                     	ds	1
   933  0029                     ?___lwmod:	
   934  0029                     ___awdiv@dividend:	
   935                           ; 2 bytes @ 0x9
   936                           
   937  0029                     ___lwmod@divisor:	
   938                           ; 2 bytes @ 0x9
   939                           
   940                           
   941                           ; 2 bytes @ 0x9
   942  0029                     	ds	2
   943  002B                     ??___awdiv:	
   944  002B                     ___lwmod@dividend:	
   945                           ; 1 bytes @ 0xB
   946                           
   947                           
   948                           ; 2 bytes @ 0xB
   949  002B                     	ds	1
   950  002C                     ___awdiv@counter:	
   951                           
   952                           ; 1 bytes @ 0xC
   953  002C                     	ds	1
   954  002D                     ??___lwmod:	
   955  002D                     ___awdiv@sign:	
   956                           ; 1 bytes @ 0xD
   957                           
   958                           
   959                           ; 1 bytes @ 0xD
   960  002D                     	ds	1
   961  002E                     ___lwmod@counter:	
   962  002E                     ___awdiv@quotient:	
   963                           ; 1 bytes @ 0xE
   964                           
   965                           
   966                           ; 2 bytes @ 0xE
   967  002E                     	ds	1
   968  002F                     ?_sprintf:	
   969  002F                     sprintf@f:	
   970                           ; 2 bytes @ 0xF
   971                           
   972                           
   973                           ; 1 bytes @ 0xF
   974  002F                     	ds	1
   975  0030                     ?_pwm_set:	
   976  0030                     ?_pwm_calc:	
   977                           ; 1 bytes @ 0x10
   978                           
   979  0030                     pwm_calc@adc_value:	
   980                           ; 2 bytes @ 0x10
   981                           
   982  0030                     pwm_set@pwm_dc1:	
   983                           ; 2 bytes @ 0x10
   984                           
   985                           
   986                           ; 2 bytes @ 0x10
   987  0030                     	ds	2
   988  0032                     ??_sprintf:	
   989  0032                     pwm_calc@pwm_dc1:	
   990                           ; 1 bytes @ 0x12
   991                           
   992  0032                     pwm_set@pwm_dc2:	
   993                           ; 1 bytes @ 0x12
   994                           
   995                           
   996                           ; 2 bytes @ 0x12
   997  0032                     	ds	1
   998  0033                     pwm_calc@pwm_dc2:	
   999                           
  1000                           ; 1 bytes @ 0x13
  1001  0033                     	ds	1
  1002  0034                     ??_pwm_calc:	
  1003  0034                     ??_pwm_set:	
  1004                           ; 1 bytes @ 0x14
  1005                           
  1006                           
  1007                           ; 1 bytes @ 0x14
  1008  0034                     	ds	1
  1009  0035                     sprintf@ap:	
  1010                           
  1011                           ; 1 bytes @ 0x15
  1012  0035                     	ds	1
  1013  0036                     sprintf@prec:	
  1014                           
  1015                           ; 1 bytes @ 0x16
  1016  0036                     	ds	1
  1017  0037                     sprintf@flag:	
  1018  0037                     _pwm_set$814:	
  1019                           ; 1 bytes @ 0x17
  1020                           
  1021                           
  1022                           ; 2 bytes @ 0x17
  1023  0037                     	ds	1
  1024  0038                     sprintf@val:	
  1025                           
  1026                           ; 2 bytes @ 0x18
  1027  0038                     	ds	2
  1028  003A                     sprintf@width:	
  1029                           
  1030                           ; 2 bytes @ 0x1A
  1031  003A                     	ds	2
  1032  003C                     sprintf@sp:	
  1033                           
  1034                           ; 1 bytes @ 0x1C
  1035  003C                     	ds	1
  1036  003D                     sprintf@c:	
  1037                           
  1038                           ; 1 bytes @ 0x1D
  1039  003D                     	ds	1
  1040  003E                     ??_main:	
  1041                           
  1042                           ; 1 bytes @ 0x1E
  1043  003E                     	ds	3
  1044  0041                     main@R:	
  1045                           
  1046                           ; 2 bytes @ 0x21
  1047  0041                     	ds	2
  1048  0043                     main@message:	
  1049                           
  1050                           ; 9 bytes @ 0x23
  1051  0043                     	ds	9
  1052  004C                     main@pwm_dc1:	
  1053                           
  1054                           ; 2 bytes @ 0x2C
  1055  004C                     	ds	2
  1056  004E                     main@pwm_dc2:	
  1057                           
  1058                           ; 2 bytes @ 0x2E
  1059  004E                     	ds	2
  1060                           
  1061                           	psect	maintext
  1062  0196                     __pmaintext:	
  1063 ;;
  1064 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1065 ;;
  1066 ;; *************** function _main *****************
  1067 ;; Defined at:
  1068 ;;		line 89 in file "main.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  message         9   35[BANK0 ] unsigned char [9]
  1073 ;;  pwm_dc2         2   46[BANK0 ] int 
  1074 ;;  pwm_dc1         2   44[BANK0 ] int 
  1075 ;;  R               2   33[BANK0 ] int 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : B00/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1085 ;;      Params:         0       0       0       0       0
  1086 ;;      Locals:         0      15       0       0       0
  1087 ;;      Temps:          0       3       0       0       0
  1088 ;;      Totals:         0      18       0       0       0
  1089 ;;Total ram usage:       18 bytes
  1090 ;; Hardware stack levels required when called:    5
  1091 ;; This function calls:
  1092 ;;		_adc_init_0
  1093 ;;		_io_init
  1094 ;;		_ioc_init
  1095 ;;		_lcd_clear
  1096 ;;		_lcd_cursor
  1097 ;;		_lcd_goto
  1098 ;;		_lcd_init
  1099 ;;		_lcd_puts
  1100 ;;		_pwm_calc
  1101 ;;		_pwm_init
  1102 ;;		_pwm_set
  1103 ;;		_sprintf
  1104 ;;		_t0_init
  1105 ;; This function is called by:
  1106 ;;		Startup code after reset
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           
  1111                           ;psect for function _main
  1112  0196                     _main:	
  1113                           
  1114                           ;main.c: 92: char message[9];
  1115                           ;main.c: 93: int pwm_dc1 = 50;
  1116                           
  1117                           ;incstack = 0
  1118                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1119  0196  3032               	movlw	50
  1120  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1121  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1122  0199  00CC               	movwf	main@pwm_dc1
  1123  019A  3000               	movlw	0
  1124  019B  00CD               	movwf	main@pwm_dc1+1
  1125                           
  1126                           ;main.c: 94: int pwm_dc2 = 50;
  1127  019C  3032               	movlw	50
  1128  019D  00CE               	movwf	main@pwm_dc2
  1129  019E  3000               	movlw	0
  1130  019F  00CF               	movwf	main@pwm_dc2+1
  1131                           
  1132                           ;main.c: 95: int R;
  1133                           ;main.c: 98: t0_init();
  1134  01A0  120A  118A  27E5  120A  118A  	fcall	_t0_init
  1135                           
  1136                           ;main.c: 99: ioc_init();
  1137  01A5  120A  158A  27F9  120A  118A  	fcall	_ioc_init
  1138                           
  1139                           ;main.c: 100: io_init();
  1140  01AA  120A  118A  27D6  120A  118A  	fcall	_io_init
  1141                           
  1142                           ;main.c: 101: lcd_init();
  1143  01AF  120A  118A  2504  120A  118A  	fcall	_lcd_init
  1144                           
  1145                           ;main.c: 102: adc_init_0();
  1146  01B4  120A  118A  2701  120A  118A  	fcall	_adc_init_0
  1147                           
  1148                           ;main.c: 103: pwm_init();
  1149  01B9  120A  118A  267E  120A  118A  	fcall	_pwm_init
  1150                           
  1151                           ;main.c: 104: (GIE = 1);
  1152  01BE  178B               	bsf	11,7	;volatile
  1153                           
  1154                           ;main.c: 108: lcd_cursor(0);
  1155  01BF  3000               	movlw	0
  1156  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1157  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1158  01C2  00A5               	movwf	lcd_cursor@on
  1159  01C3  00A6               	movwf	lcd_cursor@on+1
  1160  01C4  120A  118A  27A1  120A  118A  	fcall	_lcd_cursor
  1161                           
  1162                           ;main.c: 109: lcd_goto(0);
  1163  01C9  3000               	movlw	0
  1164  01CA  120A  118A  27C6  120A  118A  	fcall	_lcd_goto
  1165                           
  1166                           ;main.c: 110: lcd_puts("T5G7 JV");
  1167  01CF  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1168  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1169  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1170  01D2  00A5               	movwf	lcd_puts@s
  1171  01D3  3080               	movlw	128
  1172  01D4  00A6               	movwf	lcd_puts@s+1
  1173  01D5  120A  118A  26D7  120A  118A  	fcall	_lcd_puts
  1174                           
  1175                           ;main.c: 111: _delay((unsigned long)((2000)*(20000000/4000.0)));
  1176  01DA  3033               	movlw	51
  1177  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1178  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1179  01DD  00C0               	movwf	??_main+2
  1180  01DE  30BB               	movlw	187
  1181  01DF  00BF               	movwf	??_main+1
  1182  01E0  30DF               	movlw	223
  1183  01E1  00BE               	movwf	??_main
  1184  01E2                     u1707:	
  1185  01E2  0BBE               	decfsz	??_main,f
  1186  01E3  29E2               	goto	u1707
  1187  01E4  0BBF               	decfsz	??_main+1,f
  1188  01E5  29E2               	goto	u1707
  1189  01E6  0BC0               	decfsz	??_main+2,f
  1190  01E7  29E2               	goto	u1707
  1191                           
  1192                           ;main.c: 112: lcd_clear();
  1193  01E8  120A  118A  278B  120A  118A  	fcall	_lcd_clear
  1194  01ED                     l1851:	
  1195                           ;main.c: 115: while(1) {
  1196                           
  1197                           
  1198                           ;main.c: 117: R = pwm_calc(ADC, &pwm_dc1, &pwm_dc2);
  1199  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1200  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1201  01EF  0851               	movf	_ADC+1,w	;volatile
  1202  01F0  00B1               	movwf	pwm_calc@adc_value+1
  1203  01F1  0850               	movf	_ADC,w	;volatile
  1204  01F2  00B0               	movwf	pwm_calc@adc_value
  1205  01F3  304C               	movlw	(low (main@pwm_dc1| 0))& (0+255)
  1206  01F4  00BE               	movwf	??_main
  1207  01F5  083E               	movf	??_main,w
  1208  01F6  00B2               	movwf	pwm_calc@pwm_dc1
  1209  01F7  304E               	movlw	(low (main@pwm_dc2| 0))& (0+255)
  1210  01F8  00BF               	movwf	??_main+1
  1211  01F9  083F               	movf	??_main+1,w
  1212  01FA  00B3               	movwf	pwm_calc@pwm_dc2
  1213  01FB  120A  118A  22CB  120A  118A  	fcall	_pwm_calc
  1214  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1215  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1216  0202  0831               	movf	?_pwm_calc+1,w
  1217  0203  00C2               	movwf	main@R+1
  1218  0204  0830               	movf	?_pwm_calc,w
  1219  0205  00C1               	movwf	main@R
  1220                           
  1221                           ;main.c: 120: pwm_set(pwm_dc1, pwm_dc2);
  1222  0206  084D               	movf	main@pwm_dc1+1,w
  1223  0207  00B1               	movwf	pwm_set@pwm_dc1+1
  1224  0208  084C               	movf	main@pwm_dc1,w
  1225  0209  00B0               	movwf	pwm_set@pwm_dc1
  1226  020A  084F               	movf	main@pwm_dc2+1,w
  1227  020B  00B3               	movwf	pwm_set@pwm_dc2+1
  1228  020C  084E               	movf	main@pwm_dc2,w
  1229  020D  00B2               	movwf	pwm_set@pwm_dc2
  1230  020E  120A  118A  23EF  120A  118A  	fcall	_pwm_set
  1231                           
  1232                           ;main.c: 122: lcd_goto(0);
  1233  0213  3000               	movlw	0
  1234  0214  120A  118A  27C6  120A  118A  	fcall	_lcd_goto
  1235                           
  1236                           ;main.c: 125: if(R != 0){
  1237  0219  1283               	bcf	3,5	;RP0=0, select bank0
  1238  021A  1303               	bcf	3,6	;RP1=0, select bank0
  1239  021B  0841               	movf	main@R,w
  1240  021C  0442               	iorwf	main@R+1,w
  1241  021D  1903               	btfsc	3,2
  1242  021E  2A2E               	goto	l1859
  1243                           
  1244                           ;main.c: 126: sprintf(message, "%5d mm", R);
  1245  021F  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1246  0220  00BE               	movwf	??_main
  1247  0221  083E               	movf	??_main,w
  1248  0222  00AF               	movwf	sprintf@f
  1249  0223  0842               	movf	main@R+1,w
  1250  0224  00B1               	movwf	?_sprintf+2
  1251  0225  0841               	movf	main@R,w
  1252  0226  00B0               	movwf	?_sprintf+1
  1253  0227  3043               	movlw	(low (main@message| 0))& (0+255)
  1254  0228  120A  118A  2020  120A  118A  	fcall	_sprintf
  1255                           
  1256                           ;main.c: 127: }
  1257  022D  2A51               	goto	l1863
  1258  022E                     l1859:	
  1259                           
  1260                           ;main.c: 130: else{
  1261                           ;main.c: 131: message[0] = ' ';
  1262  022E  3020               	movlw	32
  1263  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1264  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1265  0231  00BE               	movwf	??_main
  1266  0232  083E               	movf	??_main,w
  1267  0233  00C3               	movwf	main@message
  1268                           
  1269                           ;main.c: 132: message[1] = ' ';
  1270  0234  3020               	movlw	32
  1271  0235  00BE               	movwf	??_main
  1272  0236  083E               	movf	??_main,w
  1273  0237  00C4               	movwf	main@message+1
  1274                           
  1275                           ;main.c: 133: message[2] = ' ';
  1276  0238  3020               	movlw	32
  1277  0239  00BE               	movwf	??_main
  1278  023A  083E               	movf	??_main,w
  1279  023B  00C5               	movwf	main@message+2
  1280                           
  1281                           ;main.c: 134: message[3] = ' ';
  1282  023C  3020               	movlw	32
  1283  023D  00BE               	movwf	??_main
  1284  023E  083E               	movf	??_main,w
  1285  023F  00C6               	movwf	main@message+3
  1286                           
  1287                           ;main.c: 135: message[4] = 0xF3;
  1288  0240  30F3               	movlw	243
  1289  0241  00BE               	movwf	??_main
  1290  0242  083E               	movf	??_main,w
  1291  0243  00C7               	movwf	main@message+4
  1292                           
  1293                           ;main.c: 136: message[5] = ' ';
  1294  0244  3020               	movlw	32
  1295  0245  00BE               	movwf	??_main
  1296  0246  083E               	movf	??_main,w
  1297  0247  00C8               	movwf	main@message+5
  1298                           
  1299                           ;main.c: 137: message[6] = 'm';
  1300  0248  306D               	movlw	109
  1301  0249  00BE               	movwf	??_main
  1302  024A  083E               	movf	??_main,w
  1303  024B  00C9               	movwf	main@message+6
  1304                           
  1305                           ;main.c: 138: message[7] = 'm';
  1306  024C  306D               	movlw	109
  1307  024D  00BE               	movwf	??_main
  1308  024E  083E               	movf	??_main,w
  1309  024F  00CA               	movwf	main@message+7
  1310                           
  1311                           ;main.c: 139: message[8] = 0;
  1312  0250  01CB               	clrf	main@message+8
  1313  0251                     l1863:	
  1314                           
  1315                           ;main.c: 140: }
  1316                           ;main.c: 143: lcd_puts(message);
  1317  0251  3043               	movlw	(low (main@message| 0))& (0+255)
  1318  0252  1283               	bcf	3,5	;RP0=0, select bank0
  1319  0253  1303               	bcf	3,6	;RP1=0, select bank0
  1320  0254  00A5               	movwf	lcd_puts@s
  1321  0255  3000               	movlw	0
  1322  0256  00A6               	movwf	lcd_puts@s+1
  1323  0257  120A  118A  26D7  120A  118A  	fcall	_lcd_puts
  1324                           
  1325                           ;main.c: 145: lcd_goto(64);
  1326  025C  3040               	movlw	64
  1327  025D  120A  118A  27C6  120A  118A  	fcall	_lcd_goto
  1328                           
  1329                           ;main.c: 148: sprintf(message, "1:%4d", pwm_dc1);
  1330  0262  301A               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1331  0263  1283               	bcf	3,5	;RP0=0, select bank0
  1332  0264  1303               	bcf	3,6	;RP1=0, select bank0
  1333  0265  00BE               	movwf	??_main
  1334  0266  083E               	movf	??_main,w
  1335  0267  00AF               	movwf	sprintf@f
  1336  0268  084D               	movf	main@pwm_dc1+1,w
  1337  0269  00B1               	movwf	?_sprintf+2
  1338  026A  084C               	movf	main@pwm_dc1,w
  1339  026B  00B0               	movwf	?_sprintf+1
  1340  026C  3043               	movlw	(low (main@message| 0))& (0+255)
  1341  026D  120A  118A  2020  120A  118A  	fcall	_sprintf
  1342                           
  1343                           ;main.c: 151: message[6] = ' ';
  1344  0272  3020               	movlw	32
  1345  0273  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0274  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0275  00BE               	movwf	??_main
  1348  0276  083E               	movf	??_main,w
  1349  0277  00C9               	movwf	main@message+6
  1350                           
  1351                           ;main.c: 152: message[7] = '%';
  1352  0278  3025               	movlw	37
  1353  0279  00BE               	movwf	??_main
  1354  027A  083E               	movf	??_main,w
  1355  027B  00CA               	movwf	main@message+7
  1356                           
  1357                           ;main.c: 153: lcd_puts(message);
  1358  027C  3043               	movlw	(low (main@message| 0))& (0+255)
  1359  027D  00A5               	movwf	lcd_puts@s
  1360  027E  3000               	movlw	0
  1361  027F  00A6               	movwf	lcd_puts@s+1
  1362  0280  120A  118A  26D7  120A  118A  	fcall	_lcd_puts
  1363                           
  1364                           ;main.c: 154: _delay((unsigned long)((100)*(20000000/4000.0)));
  1365  0285  3003               	movlw	3
  1366  0286  1283               	bcf	3,5	;RP0=0, select bank0
  1367  0287  1303               	bcf	3,6	;RP1=0, select bank0
  1368  0288  00C0               	movwf	??_main+2
  1369  0289  308A               	movlw	138
  1370  028A  00BF               	movwf	??_main+1
  1371  028B  3055               	movlw	85
  1372  028C  00BE               	movwf	??_main
  1373  028D                     u1717:	
  1374  028D  0BBE               	decfsz	??_main,f
  1375  028E  2A8D               	goto	u1717
  1376  028F  0BBF               	decfsz	??_main+1,f
  1377  0290  2A8D               	goto	u1717
  1378  0291  0BC0               	decfsz	??_main+2,f
  1379  0292  2A8D               	goto	u1717
  1380                           
  1381                           ;main.c: 156: lcd_goto(64);
  1382  0293  3040               	movlw	64
  1383  0294  120A  118A  27C6  120A  118A  	fcall	_lcd_goto
  1384                           
  1385                           ;main.c: 159: sprintf(message, "2:%4d", pwm_dc2);
  1386  0299  3020               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1387  029A  1283               	bcf	3,5	;RP0=0, select bank0
  1388  029B  1303               	bcf	3,6	;RP1=0, select bank0
  1389  029C  00BE               	movwf	??_main
  1390  029D  083E               	movf	??_main,w
  1391  029E  00AF               	movwf	sprintf@f
  1392  029F  084F               	movf	main@pwm_dc2+1,w
  1393  02A0  00B1               	movwf	?_sprintf+2
  1394  02A1  084E               	movf	main@pwm_dc2,w
  1395  02A2  00B0               	movwf	?_sprintf+1
  1396  02A3  3043               	movlw	(low (main@message| 0))& (0+255)
  1397  02A4  120A  118A  2020  120A  118A  	fcall	_sprintf
  1398                           
  1399                           ;main.c: 160: message[6] = ' ';
  1400  02A9  3020               	movlw	32
  1401  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  1402  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  1403  02AC  00BE               	movwf	??_main
  1404  02AD  083E               	movf	??_main,w
  1405  02AE  00C9               	movwf	main@message+6
  1406                           
  1407                           ;main.c: 161: message[7] = '%';
  1408  02AF  3025               	movlw	37
  1409  02B0  00BE               	movwf	??_main
  1410  02B1  083E               	movf	??_main,w
  1411  02B2  00CA               	movwf	main@message+7
  1412                           
  1413                           ;main.c: 162: lcd_puts(message);
  1414  02B3  3043               	movlw	(low (main@message| 0))& (0+255)
  1415  02B4  00A5               	movwf	lcd_puts@s
  1416  02B5  3000               	movlw	0
  1417  02B6  00A6               	movwf	lcd_puts@s+1
  1418  02B7  120A  118A  26D7  120A  118A  	fcall	_lcd_puts
  1419                           
  1420                           ;main.c: 163: _delay((unsigned long)((100)*(20000000/4000.0)));
  1421  02BC  3003               	movlw	3
  1422  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  1423  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  1424  02BF  00C0               	movwf	??_main+2
  1425  02C0  308A               	movlw	138
  1426  02C1  00BF               	movwf	??_main+1
  1427  02C2  3055               	movlw	85
  1428  02C3  00BE               	movwf	??_main
  1429  02C4                     u1727:	
  1430  02C4  0BBE               	decfsz	??_main,f
  1431  02C5  2AC4               	goto	u1727
  1432  02C6  0BBF               	decfsz	??_main+1,f
  1433  02C7  2AC4               	goto	u1727
  1434  02C8  0BC0               	decfsz	??_main+2,f
  1435  02C9  2AC4               	goto	u1727
  1436  02CA  29ED               	goto	l1851
  1437  02CB                     __end_of_main:	
  1438                           
  1439                           	psect	text1
  1440  07E5                     __ptext1:	
  1441 ;; *************** function _t0_init *****************
  1442 ;; Defined at:
  1443 ;;		line 70 in file "main.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;		None
  1448 ;; Return value:  Size  Location     Type
  1449 ;;                  1    wreg      void 
  1450 ;; Registers used:
  1451 ;;		wreg
  1452 ;; Tracked objects:
  1453 ;;		On entry : 0/0
  1454 ;;		On exit  : 0/0
  1455 ;;		Unchanged: 0/0
  1456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1457 ;;      Params:         0       0       0       0       0
  1458 ;;      Locals:         0       0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0
  1460 ;;      Totals:         0       0       0       0       0
  1461 ;;Total ram usage:        0 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    2
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_main
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           
  1472                           ;psect for function _t0_init
  1473  07E5                     _t0_init:	
  1474                           
  1475                           ;main.c: 71: T0CS = 0;
  1476                           
  1477                           ;incstack = 0
  1478                           ; Regs used in _t0_init: [wreg]
  1479  07E5  1683               	bsf	3,5	;RP0=1, select bank1
  1480  07E6  1303               	bcf	3,6	;RP1=0, select bank1
  1481  07E7  1281               	bcf	1,5	;volatile
  1482                           
  1483                           ;main.c: 72: PSA = 0;
  1484  07E8  1181               	bcf	1,3	;volatile
  1485                           
  1486                           ;main.c: 73: PS0 = 1;
  1487  07E9  1401               	bsf	1,0	;volatile
  1488                           
  1489                           ;main.c: 74: PS1 = 1;
  1490  07EA  1481               	bsf	1,1	;volatile
  1491                           
  1492                           ;main.c: 75: PS2 = 1;
  1493  07EB  1501               	bsf	1,2	;volatile
  1494                           
  1495                           ;main.c: 76: TMR0 = 157;
  1496  07EC  309D               	movlw	157
  1497  07ED  1283               	bcf	3,5	;RP0=0, select bank0
  1498  07EE  1303               	bcf	3,6	;RP1=0, select bank0
  1499  07EF  0081               	movwf	1	;volatile
  1500                           
  1501                           ;main.c: 77: T0IE = 1;
  1502  07F0  168B               	bsf	11,5	;volatile
  1503  07F1  0008               	return
  1504  07F2                     __end_of_t0_init:	
  1505                           
  1506                           	psect	text2
  1507  0020                     __ptext2:	
  1508 ;; *************** function _sprintf *****************
  1509 ;; Defined at:
  1510 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  sp              1    wreg     PTR unsigned char 
  1513 ;;		 -> main@message(9), 
  1514 ;;  f               1   15[BANK0 ] PTR const unsigned char 
  1515 ;;		 -> STR_4(6), STR_3(6), STR_2(7), 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  sp              1   28[BANK0 ] PTR unsigned char 
  1518 ;;		 -> main@message(9), 
  1519 ;;  tmpval          4    0        struct .
  1520 ;;  width           2   26[BANK0 ] int 
  1521 ;;  val             2   24[BANK0 ] unsigned int 
  1522 ;;  cp              2    0        PTR const unsigned char 
  1523 ;;  len             2    0        unsigned int 
  1524 ;;  c               1   29[BANK0 ] char 
  1525 ;;  flag            1   23[BANK0 ] unsigned char 
  1526 ;;  prec            1   22[BANK0 ] char 
  1527 ;;  ap              1   21[BANK0 ] PTR void [1]
  1528 ;;		 -> ?_sprintf(2), 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  2   15[BANK0 ] int 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1538 ;;      Params:         0       3       0       0       0
  1539 ;;      Locals:         0       9       0       0       0
  1540 ;;      Temps:          0       3       0       0       0
  1541 ;;      Totals:         0      15       0       0       0
  1542 ;;Total ram usage:       15 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    3
  1545 ;; This function calls:
  1546 ;;		___lwdiv
  1547 ;;		___lwmod
  1548 ;;		___wmul
  1549 ;;		_isdigit
  1550 ;; This function is called by:
  1551 ;;		_main
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           
  1556                           ;psect for function _sprintf
  1557  0020                     _sprintf:	
  1558                           
  1559                           ;incstack = 0
  1560                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1561                           ;sprintf@sp stored from wreg
  1562  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1564  0022  00BC               	movwf	sprintf@sp
  1565                           
  1566                           ;doprnt.c: 494: va_list ap;
  1567                           ;doprnt.c: 499: signed char c;
  1568                           ;doprnt.c: 501: int width;
  1569                           ;doprnt.c: 506: signed char prec;
  1570                           ;doprnt.c: 508: unsigned char flag;
  1571                           ;doprnt.c: 523: union {
  1572                           ;doprnt.c: 524: unsigned long vd;
  1573                           ;doprnt.c: 525: double integ;
  1574                           ;doprnt.c: 526: } tmpval;
  1575                           ;doprnt.c: 528: unsigned int val;
  1576                           ;doprnt.c: 529: unsigned len;
  1577                           ;doprnt.c: 530: const char * cp;
  1578                           ;doprnt.c: 533: *ap = __va_start();
  1579  0023  3030               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1580  0024  00B2               	movwf	??_sprintf
  1581  0025  0832               	movf	??_sprintf,w
  1582  0026  00B5               	movwf	sprintf@ap
  1583  0027                     l1795:	
  1584                           ;doprnt.c: 536: while(c = *f++) {
  1585                           
  1586  0027  3001               	movlw	1
  1587  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1588  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1589  002A  07AF               	addwf	sprintf@f,f
  1590  002B  30FF               	movlw	-1
  1591  002C  072F               	addwf	sprintf@f,w
  1592  002D  0084               	movwf	4
  1593  002E  120A  118A  261F  120A  118A  	fcall	stringdir
  1594  0033  00B2               	movwf	??_sprintf
  1595  0034  0832               	movf	??_sprintf,w
  1596  0035  00BD               	movwf	sprintf@c
  1597  0036  083D               	movf	sprintf@c,w
  1598  0037  1903               	btfsc	3,2
  1599  0038  298F               	goto	l1797
  1600                           
  1601                           ;doprnt.c: 538: if(c != '%')
  1602  0039  3025               	movlw	37
  1603  003A  063D               	xorwf	sprintf@c,w
  1604  003B  1903               	btfsc	3,2
  1605  003C  2849               	goto	l1721
  1606                           
  1607                           ;doprnt.c: 540: {
  1608                           ;doprnt.c: 541: ((*sp++ = (c)));
  1609  003D  083D               	movf	sprintf@c,w
  1610  003E  00B2               	movwf	??_sprintf
  1611  003F  083C               	movf	sprintf@sp,w
  1612  0040  0084               	movwf	4
  1613  0041  0832               	movf	??_sprintf,w
  1614  0042  1383               	bcf	3,7	;select IRP bank0
  1615  0043  0080               	movwf	0
  1616  0044  3001               	movlw	1
  1617  0045  00B2               	movwf	??_sprintf
  1618  0046  0832               	movf	??_sprintf,w
  1619  0047  07BC               	addwf	sprintf@sp,f
  1620                           
  1621                           ;doprnt.c: 542: continue;
  1622  0048  2827               	goto	l1795
  1623  0049                     l1721:	
  1624                           
  1625                           ;doprnt.c: 543: }
  1626                           ;doprnt.c: 546: width = 0;
  1627  0049  01BA               	clrf	sprintf@width
  1628  004A  01BB               	clrf	sprintf@width+1
  1629                           
  1630                           ;doprnt.c: 548: flag = 0;
  1631  004B  01B7               	clrf	sprintf@flag
  1632                           
  1633                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1634  004C  082F               	movf	sprintf@f,w
  1635  004D  0084               	movwf	4
  1636  004E  120A  118A  261F  120A  118A  	fcall	stringdir
  1637  0053  120A  118A  27B6  120A  118A  	fcall	_isdigit
  1638  0058  1C03               	btfss	3,0
  1639  0059  2898               	goto	l1737
  1640                           
  1641                           ;doprnt.c: 598: width = 0;
  1642  005A  1283               	bcf	3,5	;RP0=0, select bank0
  1643  005B  1303               	bcf	3,6	;RP1=0, select bank0
  1644  005C  01BA               	clrf	sprintf@width
  1645  005D  01BB               	clrf	sprintf@width+1
  1646  005E                     l1727:	
  1647                           ;doprnt.c: 599: do {
  1648                           
  1649                           
  1650                           ;doprnt.c: 600: width *= 10;
  1651  005E  300A               	movlw	10
  1652  005F  1283               	bcf	3,5	;RP0=0, select bank0
  1653  0060  1303               	bcf	3,6	;RP1=0, select bank0
  1654  0061  00A1               	movwf	___wmul@multiplier
  1655  0062  3000               	movlw	0
  1656  0063  00A2               	movwf	___wmul@multiplier+1
  1657  0064  083B               	movf	sprintf@width+1,w
  1658  0065  00A4               	movwf	___wmul@multiplicand+1
  1659  0066  083A               	movf	sprintf@width,w
  1660  0067  00A3               	movwf	___wmul@multiplicand
  1661  0068  120A  118A  272A  120A  118A  	fcall	___wmul
  1662  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1663  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1664  006F  0822               	movf	?___wmul+1,w
  1665  0070  00BB               	movwf	sprintf@width+1
  1666  0071  0821               	movf	?___wmul,w
  1667  0072  00BA               	movwf	sprintf@width
  1668                           
  1669                           ;doprnt.c: 601: width += *f++ - '0';
  1670  0073  082F               	movf	sprintf@f,w
  1671  0074  0084               	movwf	4
  1672  0075  120A  118A  261F  120A  118A  	fcall	stringdir
  1673  007A  3ED0               	addlw	208
  1674  007B  00B2               	movwf	??_sprintf
  1675  007C  30FF               	movlw	255
  1676  007D  1803               	skipnc
  1677  007E  3000               	movlw	0
  1678  007F  00B3               	movwf	??_sprintf+1
  1679  0080  0832               	movf	??_sprintf,w
  1680  0081  07BA               	addwf	sprintf@width,f
  1681  0082  1803               	skipnc
  1682  0083  0ABB               	incf	sprintf@width+1,f
  1683  0084  0833               	movf	??_sprintf+1,w
  1684  0085  07BB               	addwf	sprintf@width+1,f
  1685  0086  3001               	movlw	1
  1686  0087  00B2               	movwf	??_sprintf
  1687  0088  0832               	movf	??_sprintf,w
  1688  0089  07AF               	addwf	sprintf@f,f
  1689                           
  1690                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1691  008A  082F               	movf	sprintf@f,w
  1692  008B  0084               	movwf	4
  1693  008C  120A  118A  261F  120A  118A  	fcall	stringdir
  1694  0091  120A  118A  27B6  120A  118A  	fcall	_isdigit
  1695  0096  1803               	btfsc	3,0
  1696  0097  285E               	goto	l1727
  1697  0098                     l1737:	
  1698                           ;doprnt.c: 822: }
  1699                           
  1700                           ;doprnt.c: 813: continue;
  1701                           
  1702                           ;doprnt.c: 802: default:
  1703                           
  1704                           ;doprnt.c: 698: case 'i':
  1705                           ;doprnt.c: 699: break;
  1706                           
  1707                           ;doprnt.c: 697: case 'd':
  1708                           
  1709                           ;doprnt.c: 638: goto alldone;
  1710                           
  1711                           ;doprnt.c: 637: case 0:
  1712                           
  1713                           ;doprnt.c: 608: }
  1714                           ;doprnt.c: 635: switch(c = *f++) {
  1715                           
  1716  0098  3001               	movlw	1
  1717  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1718  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1719  009B  07AF               	addwf	sprintf@f,f
  1720  009C  30FF               	movlw	-1
  1721  009D  072F               	addwf	sprintf@f,w
  1722  009E  0084               	movwf	4
  1723  009F  120A  118A  261F  120A  118A  	fcall	stringdir
  1724  00A4  00BD               	movwf	sprintf@c
  1725                           
  1726                           ; Switch size 1, requested type "space"
  1727                           ; Number of cases is 3, Range of values is 0 to 105
  1728                           ; switch strategies available:
  1729                           ; Name         Instructions Cycles
  1730                           ; simple_byte           10     6 (average)
  1731                           ; jumptable            260     6 (fixed)
  1732                           ;	Chosen strategy is simple_byte
  1733  00A5  3A00               	xorlw	0	; case 0
  1734  00A6  1903               	skipnz
  1735  00A7  298F               	goto	l1797
  1736  00A8  3A64               	xorlw	100	; case 100
  1737  00A9  1903               	skipnz
  1738  00AA  28AF               	goto	l1739
  1739  00AB  3A0D               	xorlw	13	; case 105
  1740  00AC  1903               	skipnz
  1741  00AD  28AF               	goto	l1739
  1742  00AE  2827               	goto	l1795
  1743  00AF                     l1739:	
  1744                           
  1745                           ;doprnt.c: 1253: {
  1746                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1747  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  1748  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  1749  00B1  0835               	movf	sprintf@ap,w
  1750  00B2  0084               	movwf	4
  1751  00B3  1383               	bcf	3,7	;select IRP bank0
  1752  00B4  0800               	movf	0,w
  1753  00B5  00B8               	movwf	sprintf@val
  1754  00B6  0A84               	incf	4,f
  1755  00B7  0800               	movf	0,w
  1756  00B8  00B9               	movwf	sprintf@val+1
  1757  00B9  3002               	movlw	2
  1758  00BA  00B2               	movwf	??_sprintf
  1759  00BB  0832               	movf	??_sprintf,w
  1760  00BC  07B5               	addwf	sprintf@ap,f
  1761                           
  1762                           ;doprnt.c: 1261: if((int)val < 0) {
  1763  00BD  1FB9               	btfss	sprintf@val+1,7
  1764  00BE  28C8               	goto	l1749
  1765                           
  1766                           ;doprnt.c: 1262: flag |= 0x03;
  1767  00BF  3003               	movlw	3
  1768  00C0  00B2               	movwf	??_sprintf
  1769  00C1  0832               	movf	??_sprintf,w
  1770  00C2  04B7               	iorwf	sprintf@flag,f
  1771                           
  1772                           ;doprnt.c: 1263: val = -val;
  1773  00C3  09B8               	comf	sprintf@val,f
  1774  00C4  09B9               	comf	sprintf@val+1,f
  1775  00C5  0AB8               	incf	sprintf@val,f
  1776  00C6  1903               	skipnz
  1777  00C7  0AB9               	incf	sprintf@val+1,f
  1778  00C8                     l1749:	
  1779                           
  1780                           ;doprnt.c: 1264: }
  1781                           ;doprnt.c: 1266: }
  1782                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1783  00C8  01BD               	clrf	sprintf@c
  1784  00C9  0ABD               	incf	sprintf@c,f
  1785  00CA  3005               	movlw	5
  1786  00CB  063D               	xorwf	sprintf@c,w
  1787  00CC  1903               	btfsc	3,2
  1788  00CD  28EF               	goto	l1761
  1789  00CE                     l1755:	
  1790                           
  1791                           ;doprnt.c: 1306: if(val < dpowers[c])
  1792  00CE  083D               	movf	sprintf@c,w
  1793  00CF  00B2               	movwf	??_sprintf
  1794  00D0  0732               	addwf	??_sprintf,w
  1795  00D1  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1796  00D2  0084               	movwf	4
  1797  00D3  120A  118A  261F  120A  118A  	fcall	stringdir
  1798  00D8  00B3               	movwf	??_sprintf+1
  1799  00D9  120A  118A  261F  120A  118A  	fcall	stringdir
  1800  00DE  00B4               	movwf	??_sprintf+2
  1801  00DF  0834               	movf	??_sprintf+2,w
  1802  00E0  0239               	subwf	sprintf@val+1,w
  1803  00E1  1D03               	skipz
  1804  00E2  28E5               	goto	u1545
  1805  00E3  0833               	movf	??_sprintf+1,w
  1806  00E4  0238               	subwf	sprintf@val,w
  1807  00E5                     u1545:	
  1808  00E5  1C03               	btfss	3,0
  1809  00E6  28EF               	goto	l1761
  1810                           
  1811                           ;doprnt.c: 1307: break;
  1812  00E7  3001               	movlw	1
  1813  00E8  00B2               	movwf	??_sprintf
  1814  00E9  0832               	movf	??_sprintf,w
  1815  00EA  07BD               	addwf	sprintf@c,f
  1816  00EB  3005               	movlw	5
  1817  00EC  063D               	xorwf	sprintf@c,w
  1818  00ED  1D03               	btfss	3,2
  1819  00EE  28CE               	goto	l1755
  1820  00EF                     l1761:	
  1821                           
  1822                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1823  00EF  083A               	movf	sprintf@width,w
  1824  00F0  043B               	iorwf	sprintf@width+1,w
  1825  00F1  1903               	btfsc	3,2
  1826  00F2  28FD               	goto	l381
  1827  00F3  0837               	movf	sprintf@flag,w
  1828  00F4  3903               	andlw	3
  1829  00F5  1903               	btfsc	3,2
  1830  00F6  28FD               	goto	l381
  1831                           
  1832                           ;doprnt.c: 1346: width--;
  1833  00F7  30FF               	movlw	255
  1834  00F8  07BA               	addwf	sprintf@width,f
  1835  00F9  1803               	skipnc
  1836  00FA  0ABB               	incf	sprintf@width+1,f
  1837  00FB  30FF               	movlw	255
  1838  00FC  07BB               	addwf	sprintf@width+1,f
  1839  00FD                     l381:	
  1840                           
  1841                           ;doprnt.c: 1381: if(width > c)
  1842  00FD  083D               	movf	sprintf@c,w
  1843  00FE  00B2               	movwf	??_sprintf
  1844  00FF  01B3               	clrf	??_sprintf+1
  1845  0100  1BB2               	btfsc	??_sprintf,7
  1846  0101  03B3               	decf	??_sprintf+1,f
  1847  0102  0833               	movf	??_sprintf+1,w
  1848  0103  3A80               	xorlw	128
  1849  0104  00B4               	movwf	??_sprintf+2
  1850  0105  083B               	movf	sprintf@width+1,w
  1851  0106  3A80               	xorlw	128
  1852  0107  0234               	subwf	??_sprintf+2,w
  1853  0108  1D03               	skipz
  1854  0109  290C               	goto	u1585
  1855  010A  083A               	movf	sprintf@width,w
  1856  010B  0232               	subwf	??_sprintf,w
  1857  010C                     u1585:	
  1858  010C  1803               	skipnc
  1859  010D  291C               	goto	l1769
  1860                           
  1861                           ;doprnt.c: 1382: width -= c;
  1862  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1863  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1864  0110  083D               	movf	sprintf@c,w
  1865  0111  00B2               	movwf	??_sprintf
  1866  0112  01B3               	clrf	??_sprintf+1
  1867  0113  1BB2               	btfsc	??_sprintf,7
  1868  0114  03B3               	decf	??_sprintf+1,f
  1869  0115  0832               	movf	??_sprintf,w
  1870  0116  02BA               	subwf	sprintf@width,f
  1871  0117  0833               	movf	??_sprintf+1,w
  1872  0118  1C03               	skipc
  1873  0119  03BB               	decf	sprintf@width+1,f
  1874  011A  02BB               	subwf	sprintf@width+1,f
  1875  011B  2920               	goto	l1771
  1876  011C                     l1769:	
  1877                           
  1878                           ;doprnt.c: 1383: else
  1879                           ;doprnt.c: 1384: width = 0;
  1880  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1881  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1882  011E  01BA               	clrf	sprintf@width
  1883  011F  01BB               	clrf	sprintf@width+1
  1884  0120                     l1771:	
  1885                           
  1886                           ;doprnt.c: 1422: {
  1887                           ;doprnt.c: 1424: if(width
  1888                           ;doprnt.c: 1428: )
  1889  0120  083A               	movf	sprintf@width,w
  1890  0121  043B               	iorwf	sprintf@width+1,w
  1891  0122  1903               	btfsc	3,2
  1892  0123  2939               	goto	l1779
  1893  0124                     l1773:	
  1894                           ;doprnt.c: 1429: do
  1895                           
  1896                           
  1897                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1898  0124  3020               	movlw	32
  1899  0125  00B2               	movwf	??_sprintf
  1900  0126  083C               	movf	sprintf@sp,w
  1901  0127  0084               	movwf	4
  1902  0128  0832               	movf	??_sprintf,w
  1903  0129  1383               	bcf	3,7	;select IRP bank0
  1904  012A  0080               	movwf	0
  1905  012B  3001               	movlw	1
  1906  012C  00B2               	movwf	??_sprintf
  1907  012D  0832               	movf	??_sprintf,w
  1908  012E  07BC               	addwf	sprintf@sp,f
  1909                           
  1910                           ;doprnt.c: 1431: while(--width);
  1911  012F  30FF               	movlw	255
  1912  0130  07BA               	addwf	sprintf@width,f
  1913  0131  1803               	skipnc
  1914  0132  0ABB               	incf	sprintf@width+1,f
  1915  0133  30FF               	movlw	255
  1916  0134  07BB               	addwf	sprintf@width+1,f
  1917  0135  083A               	movf	sprintf@width,w
  1918  0136  043B               	iorwf	sprintf@width+1,w
  1919  0137  1D03               	btfss	3,2
  1920  0138  2924               	goto	l1773
  1921  0139                     l1779:	
  1922                           
  1923                           ;doprnt.c: 1438: if(flag & 0x03)
  1924  0139  0837               	movf	sprintf@flag,w
  1925  013A  3903               	andlw	3
  1926  013B  1903               	btfsc	3,2
  1927  013C  2948               	goto	l1785
  1928                           
  1929                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1930  013D  302D               	movlw	45
  1931  013E  00B2               	movwf	??_sprintf
  1932  013F  083C               	movf	sprintf@sp,w
  1933  0140  0084               	movwf	4
  1934  0141  0832               	movf	??_sprintf,w
  1935  0142  1383               	bcf	3,7	;select IRP bank0
  1936  0143  0080               	movwf	0
  1937  0144  3001               	movlw	1
  1938  0145  00B2               	movwf	??_sprintf
  1939  0146  0832               	movf	??_sprintf,w
  1940  0147  07BC               	addwf	sprintf@sp,f
  1941  0148                     l1785:	
  1942                           
  1943                           ;doprnt.c: 1469: }
  1944                           ;doprnt.c: 1472: prec = c;
  1945  0148  083D               	movf	sprintf@c,w
  1946  0149  00B2               	movwf	??_sprintf
  1947  014A  0832               	movf	??_sprintf,w
  1948  014B  00B6               	movwf	sprintf@prec
  1949  014C                     l1793:	
  1950                           ;doprnt.c: 1474: while(prec--) {
  1951                           
  1952  014C  30FF               	movlw	255
  1953  014D  00B2               	movwf	??_sprintf
  1954  014E  0832               	movf	??_sprintf,w
  1955  014F  07B6               	addwf	sprintf@prec,f
  1956  0150  0A36               	incf	sprintf@prec,w
  1957  0151  1903               	btfsc	3,2
  1958  0152  2827               	goto	l1795
  1959                           
  1960                           ;doprnt.c: 1478: {
  1961                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1962  0153  300A               	movlw	10
  1963  0154  00A9               	movwf	___lwmod@divisor
  1964  0155  3000               	movlw	0
  1965  0156  00AA               	movwf	___lwmod@divisor+1
  1966  0157  0836               	movf	sprintf@prec,w
  1967  0158  00B2               	movwf	??_sprintf
  1968  0159  0732               	addwf	??_sprintf,w
  1969  015A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1970  015B  0084               	movwf	4
  1971  015C  120A  118A  261F  120A  118A  	fcall	stringdir
  1972  0161  00A1               	movwf	___lwdiv@divisor
  1973  0162  120A  118A  261F  120A  118A  	fcall	stringdir
  1974  0167  00A2               	movwf	___lwdiv@divisor+1
  1975  0168  0839               	movf	sprintf@val+1,w
  1976  0169  00A4               	movwf	___lwdiv@dividend+1
  1977  016A  0838               	movf	sprintf@val,w
  1978  016B  00A3               	movwf	___lwdiv@dividend
  1979  016C  120A  118A  259C  120A  118A  	fcall	___lwdiv
  1980  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1981  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1982  0173  0822               	movf	?___lwdiv+1,w
  1983  0174  00AC               	movwf	___lwmod@dividend+1
  1984  0175  0821               	movf	?___lwdiv,w
  1985  0176  00AB               	movwf	___lwmod@dividend
  1986  0177  120A  118A  264A  120A  118A  	fcall	___lwmod
  1987  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1988  017D  1303               	bcf	3,6	;RP1=0, select bank0
  1989  017E  0829               	movf	?___lwmod,w
  1990  017F  3E30               	addlw	48
  1991  0180  00B3               	movwf	??_sprintf+1
  1992  0181  0833               	movf	??_sprintf+1,w
  1993  0182  00BD               	movwf	sprintf@c
  1994                           
  1995                           ;doprnt.c: 1523: }
  1996                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1997  0183  083D               	movf	sprintf@c,w
  1998  0184  00B2               	movwf	??_sprintf
  1999  0185  083C               	movf	sprintf@sp,w
  2000  0186  0084               	movwf	4
  2001  0187  0832               	movf	??_sprintf,w
  2002  0188  1383               	bcf	3,7	;select IRP bank0
  2003  0189  0080               	movwf	0
  2004  018A  3001               	movlw	1
  2005  018B  00B2               	movwf	??_sprintf
  2006  018C  0832               	movf	??_sprintf,w
  2007  018D  07BC               	addwf	sprintf@sp,f
  2008  018E  294C               	goto	l1793
  2009  018F                     l1797:	
  2010                           ;doprnt.c: 1525: }
  2011                           ;doprnt.c: 1533: }
  2012                           ;doprnt.c: 1535: alldone:
  2013                           
  2014                           
  2015                           ;doprnt.c: 1538: *sp = 0;
  2016  018F  1283               	bcf	3,5	;RP0=0, select bank0
  2017  0190  1303               	bcf	3,6	;RP1=0, select bank0
  2018  0191  083C               	movf	sprintf@sp,w
  2019  0192  0084               	movwf	4
  2020  0193  1383               	bcf	3,7	;select IRP bank0
  2021  0194  0180               	clrf	0
  2022  0195  0008               	return
  2023  0196                     __end_of_sprintf:	
  2024                           ;doprnt.c: 1540: return 0;
  2025                           ;	Return value of _sprintf is never used
  2026                           
  2027                           
  2028                           	psect	text3
  2029  07B6                     __ptext3:	
  2030 ;; *************** function _isdigit *****************
  2031 ;; Defined at:
  2032 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  c               1    wreg     unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  c               1    2[BANK0 ] unsigned char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;		None               void
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2046 ;;      Params:         0       0       0       0       0
  2047 ;;      Locals:         0       2       0       0       0
  2048 ;;      Temps:          0       0       0       0       0
  2049 ;;      Totals:         0       2       0       0       0
  2050 ;;Total ram usage:        2 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    2
  2053 ;; This function calls:
  2054 ;;		Nothing
  2055 ;; This function is called by:
  2056 ;;		_sprintf
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           
  2061                           ;psect for function _isdigit
  2062  07B6                     _isdigit:	
  2063                           
  2064                           ;incstack = 0
  2065                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2066                           ;isdigit@c stored from wreg
  2067  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  2068  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  2069  07B8  00A2               	movwf	isdigit@c
  2070  07B9  01A1               	clrf	_isdigit$549
  2071  07BA  303A               	movlw	58
  2072  07BB  0222               	subwf	isdigit@c,w
  2073  07BC  1803               	skipnc
  2074  07BD  2FC4               	goto	l1423
  2075  07BE  3030               	movlw	48
  2076  07BF  0222               	subwf	isdigit@c,w
  2077  07C0  1C03               	skipc
  2078  07C1  2FC4               	goto	l1423
  2079  07C2  01A1               	clrf	_isdigit$549
  2080  07C3  0AA1               	incf	_isdigit$549,f
  2081  07C4                     l1423:	
  2082  07C4  0C21               	rrf	_isdigit$549,w
  2083  07C5  0008               	return
  2084  07C6                     __end_of_isdigit:	
  2085                           
  2086                           	psect	text4
  2087  064A                     __ptext4:	
  2088 ;; *************** function ___lwmod *****************
  2089 ;; Defined at:
  2090 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2091 ;; Parameters:    Size  Location     Type
  2092 ;;  divisor         2    9[BANK0 ] unsigned int 
  2093 ;;  dividend        2   11[BANK0 ] unsigned int 
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;  counter         1   14[BANK0 ] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  2    9[BANK0 ] unsigned int 
  2098 ;; Registers used:
  2099 ;;		wreg, status,2, status,0
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2105 ;;      Params:         0       4       0       0       0
  2106 ;;      Locals:         0       1       0       0       0
  2107 ;;      Temps:          0       1       0       0       0
  2108 ;;      Totals:         0       6       0       0       0
  2109 ;;Total ram usage:        6 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    2
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_sprintf
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           
  2120                           ;psect for function ___lwmod
  2121  064A                     ___lwmod:	
  2122                           
  2123                           ;incstack = 0
  2124                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2125  064A  1283               	bcf	3,5	;RP0=0, select bank0
  2126  064B  1303               	bcf	3,6	;RP1=0, select bank0
  2127  064C  0829               	movf	___lwmod@divisor,w
  2128  064D  042A               	iorwf	___lwmod@divisor+1,w
  2129  064E  1903               	btfsc	3,2
  2130  064F  2E79               	goto	l1529
  2131  0650  01AE               	clrf	___lwmod@counter
  2132  0651  0AAE               	incf	___lwmod@counter,f
  2133  0652                     l1519:	
  2134  0652  1BAA               	btfsc	___lwmod@divisor+1,7
  2135  0653  2E60               	goto	l1521
  2136  0654  3001               	movlw	1
  2137  0655                     u1225:	
  2138  0655  1003               	clrc
  2139  0656  0DA9               	rlf	___lwmod@divisor,f
  2140  0657  0DAA               	rlf	___lwmod@divisor+1,f
  2141  0658  3EFF               	addlw	-1
  2142  0659  1D03               	skipz
  2143  065A  2E55               	goto	u1225
  2144  065B  3001               	movlw	1
  2145  065C  00AD               	movwf	??___lwmod
  2146  065D  082D               	movf	??___lwmod,w
  2147  065E  07AE               	addwf	___lwmod@counter,f
  2148  065F  2E52               	goto	l1519
  2149  0660                     l1521:	
  2150  0660  082A               	movf	___lwmod@divisor+1,w
  2151  0661  022C               	subwf	___lwmod@dividend+1,w
  2152  0662  1D03               	skipz
  2153  0663  2E66               	goto	u1245
  2154  0664  0829               	movf	___lwmod@divisor,w
  2155  0665  022B               	subwf	___lwmod@dividend,w
  2156  0666                     u1245:	
  2157  0666  1C03               	skipc
  2158  0667  2E6E               	goto	l1525
  2159  0668  0829               	movf	___lwmod@divisor,w
  2160  0669  02AB               	subwf	___lwmod@dividend,f
  2161  066A  082A               	movf	___lwmod@divisor+1,w
  2162  066B  1C03               	skipc
  2163  066C  03AC               	decf	___lwmod@dividend+1,f
  2164  066D  02AC               	subwf	___lwmod@dividend+1,f
  2165  066E                     l1525:	
  2166  066E  3001               	movlw	1
  2167  066F                     u1255:	
  2168  066F  1003               	clrc
  2169  0670  0CAA               	rrf	___lwmod@divisor+1,f
  2170  0671  0CA9               	rrf	___lwmod@divisor,f
  2171  0672  3EFF               	addlw	-1
  2172  0673  1D03               	skipz
  2173  0674  2E6F               	goto	u1255
  2174  0675  3001               	movlw	1
  2175  0676  02AE               	subwf	___lwmod@counter,f
  2176  0677  1D03               	btfss	3,2
  2177  0678  2E60               	goto	l1521
  2178  0679                     l1529:	
  2179  0679  082C               	movf	___lwmod@dividend+1,w
  2180  067A  00AA               	movwf	?___lwmod+1
  2181  067B  082B               	movf	___lwmod@dividend,w
  2182  067C  00A9               	movwf	?___lwmod
  2183  067D  0008               	return
  2184  067E                     __end_of___lwmod:	
  2185                           
  2186                           	psect	text5
  2187  059C                     __ptext5:	
  2188 ;; *************** function ___lwdiv *****************
  2189 ;; Defined at:
  2190 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  divisor         2    1[BANK0 ] unsigned int 
  2193 ;;  dividend        2    3[BANK0 ] unsigned int 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  quotient        2    6[BANK0 ] unsigned int 
  2196 ;;  counter         1    8[BANK0 ] unsigned char 
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  2    1[BANK0 ] unsigned int 
  2199 ;; Registers used:
  2200 ;;		wreg, status,2, status,0
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2206 ;;      Params:         0       4       0       0       0
  2207 ;;      Locals:         0       3       0       0       0
  2208 ;;      Temps:          0       1       0       0       0
  2209 ;;      Totals:         0       8       0       0       0
  2210 ;;Total ram usage:        8 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; Hardware stack levels required when called:    2
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_sprintf
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function ___lwdiv
  2222  059C                     ___lwdiv:	
  2223                           
  2224                           ;incstack = 0
  2225                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2226  059C  1283               	bcf	3,5	;RP0=0, select bank0
  2227  059D  1303               	bcf	3,6	;RP1=0, select bank0
  2228  059E  01A6               	clrf	___lwdiv@quotient
  2229  059F  01A7               	clrf	___lwdiv@quotient+1
  2230  05A0  0821               	movf	___lwdiv@divisor,w
  2231  05A1  0422               	iorwf	___lwdiv@divisor+1,w
  2232  05A2  1903               	btfsc	3,2
  2233  05A3  2DD5               	goto	l1507
  2234  05A4  01A8               	clrf	___lwdiv@counter
  2235  05A5  0AA8               	incf	___lwdiv@counter,f
  2236  05A6                     l1495:	
  2237  05A6  1BA2               	btfsc	___lwdiv@divisor+1,7
  2238  05A7  2DB4               	goto	l1497
  2239  05A8  3001               	movlw	1
  2240  05A9                     u1155:	
  2241  05A9  1003               	clrc
  2242  05AA  0DA1               	rlf	___lwdiv@divisor,f
  2243  05AB  0DA2               	rlf	___lwdiv@divisor+1,f
  2244  05AC  3EFF               	addlw	-1
  2245  05AD  1D03               	skipz
  2246  05AE  2DA9               	goto	u1155
  2247  05AF  3001               	movlw	1
  2248  05B0  00A5               	movwf	??___lwdiv
  2249  05B1  0825               	movf	??___lwdiv,w
  2250  05B2  07A8               	addwf	___lwdiv@counter,f
  2251  05B3  2DA6               	goto	l1495
  2252  05B4                     l1497:	
  2253  05B4  3001               	movlw	1
  2254  05B5                     u1175:	
  2255  05B5  1003               	clrc
  2256  05B6  0DA6               	rlf	___lwdiv@quotient,f
  2257  05B7  0DA7               	rlf	___lwdiv@quotient+1,f
  2258  05B8  3EFF               	addlw	-1
  2259  05B9  1D03               	skipz
  2260  05BA  2DB5               	goto	u1175
  2261  05BB  0822               	movf	___lwdiv@divisor+1,w
  2262  05BC  0224               	subwf	___lwdiv@dividend+1,w
  2263  05BD  1D03               	skipz
  2264  05BE  2DC1               	goto	u1185
  2265  05BF  0821               	movf	___lwdiv@divisor,w
  2266  05C0  0223               	subwf	___lwdiv@dividend,w
  2267  05C1                     u1185:	
  2268  05C1  1C03               	skipc
  2269  05C2  2DCA               	goto	l1503
  2270  05C3  0821               	movf	___lwdiv@divisor,w
  2271  05C4  02A3               	subwf	___lwdiv@dividend,f
  2272  05C5  0822               	movf	___lwdiv@divisor+1,w
  2273  05C6  1C03               	skipc
  2274  05C7  03A4               	decf	___lwdiv@dividend+1,f
  2275  05C8  02A4               	subwf	___lwdiv@dividend+1,f
  2276  05C9  1426               	bsf	___lwdiv@quotient,0
  2277  05CA                     l1503:	
  2278  05CA  3001               	movlw	1
  2279  05CB                     u1195:	
  2280  05CB  1003               	clrc
  2281  05CC  0CA2               	rrf	___lwdiv@divisor+1,f
  2282  05CD  0CA1               	rrf	___lwdiv@divisor,f
  2283  05CE  3EFF               	addlw	-1
  2284  05CF  1D03               	skipz
  2285  05D0  2DCB               	goto	u1195
  2286  05D1  3001               	movlw	1
  2287  05D2  02A8               	subwf	___lwdiv@counter,f
  2288  05D3  1D03               	btfss	3,2
  2289  05D4  2DB4               	goto	l1497
  2290  05D5                     l1507:	
  2291  05D5  0827               	movf	___lwdiv@quotient+1,w
  2292  05D6  00A2               	movwf	?___lwdiv+1
  2293  05D7  0826               	movf	___lwdiv@quotient,w
  2294  05D8  00A1               	movwf	?___lwdiv
  2295  05D9  0008               	return
  2296  05DA                     __end_of___lwdiv:	
  2297                           
  2298                           	psect	text6
  2299  03EF                     __ptext6:	
  2300 ;; *************** function _pwm_set *****************
  2301 ;; Defined at:
  2302 ;;		line 78 in file "pwm.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  pwm_dc1         2   16[BANK0 ] int 
  2305 ;;  pwm_dc2         2   18[BANK0 ] int 
  2306 ;; Auto vars:     Size  Location     Type
  2307 ;;		None
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2317 ;;      Params:         0       4       0       0       0
  2318 ;;      Locals:         0       2       0       0       0
  2319 ;;      Temps:          0       3       0       0       0
  2320 ;;      Totals:         0       9       0       0       0
  2321 ;;Total ram usage:        9 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:    3
  2324 ;; This function calls:
  2325 ;;		___awdiv
  2326 ;; This function is called by:
  2327 ;;		_main
  2328 ;; This function uses a non-reentrant model
  2329 ;;
  2330                           
  2331                           
  2332                           ;psect for function _pwm_set
  2333  03EF                     _pwm_set:	
  2334                           
  2335                           ;pwm.c: 80: if (pwm_dc1 < 0 && pwm_dc2 < 0) {
  2336                           
  2337                           ;incstack = 0
  2338                           ; Regs used in _pwm_set: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2339  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2340  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2341  03F1  1BB1               	btfsc	pwm_set@pwm_dc1+1,7
  2342  03F2  1FB3               	btfss	pwm_set@pwm_dc2+1,7
  2343  03F3  2BFE               	goto	l1701
  2344                           
  2345                           ;pwm.c: 81: pwm_dc1 = -pwm_dc1;
  2346  03F4  09B0               	comf	pwm_set@pwm_dc1,f
  2347  03F5  09B1               	comf	pwm_set@pwm_dc1+1,f
  2348  03F6  0AB0               	incf	pwm_set@pwm_dc1,f
  2349  03F7  1903               	skipnz
  2350  03F8  0AB1               	incf	pwm_set@pwm_dc1+1,f
  2351                           
  2352                           ;pwm.c: 82: pwm_dc2 = -pwm_dc2;
  2353  03F9  09B2               	comf	pwm_set@pwm_dc2,f
  2354  03FA  09B3               	comf	pwm_set@pwm_dc2+1,f
  2355  03FB  0AB2               	incf	pwm_set@pwm_dc2,f
  2356  03FC  1903               	skipnz
  2357  03FD  0AB3               	incf	pwm_set@pwm_dc2+1,f
  2358  03FE                     l1701:	
  2359                           
  2360                           ;pwm.c: 83: }
  2361                           ;pwm.c: 86: CCPR1L = 64*pwm_dc1/25;
  2362  03FE  3019               	movlw	25
  2363  03FF  00A7               	movwf	___awdiv@divisor
  2364  0400  3000               	movlw	0
  2365  0401  00A8               	movwf	___awdiv@divisor+1
  2366  0402  0831               	movf	pwm_set@pwm_dc1+1,w
  2367  0403  00B5               	movwf	??_pwm_set+1
  2368  0404  0830               	movf	pwm_set@pwm_dc1,w
  2369  0405  00B4               	movwf	??_pwm_set
  2370  0406  3006               	movlw	6
  2371  0407  00FF               	movwf	127
  2372  0408                     u1435:	
  2373  0408  1003               	clrc
  2374  0409  0DB4               	rlf	??_pwm_set,f
  2375  040A  0DB5               	rlf	??_pwm_set+1,f
  2376  040B  0BFF               	decfsz	127,f
  2377  040C  2C08               	goto	u1435
  2378  040D  0834               	movf	??_pwm_set,w
  2379  040E  00A9               	movwf	___awdiv@dividend
  2380  040F  0835               	movf	??_pwm_set+1,w
  2381  0410  00AA               	movwf	___awdiv@dividend+1
  2382  0411  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2383  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2384  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2385  0418  0827               	movf	?___awdiv,w
  2386  0419  0095               	movwf	21	;volatile
  2387                           
  2388                           ;pwm.c: 89: CCP1CONbits.DC1B = (256*pwm_dc1/25)%4;
  2389  041A  3019               	movlw	25
  2390  041B  00A7               	movwf	___awdiv@divisor
  2391  041C  3000               	movlw	0
  2392  041D  00A8               	movwf	___awdiv@divisor+1
  2393  041E  0831               	movf	pwm_set@pwm_dc1+1,w
  2394  041F  00B5               	movwf	??_pwm_set+1
  2395  0420  0830               	movf	pwm_set@pwm_dc1,w
  2396  0421  00B4               	movwf	??_pwm_set
  2397  0422  0834               	movf	??_pwm_set,w
  2398  0423  00B5               	movwf	??_pwm_set+1
  2399  0424  01B4               	clrf	??_pwm_set
  2400  0425  0834               	movf	??_pwm_set,w
  2401  0426  00A9               	movwf	___awdiv@dividend
  2402  0427  0835               	movf	??_pwm_set+1,w
  2403  0428  00AA               	movwf	___awdiv@dividend+1
  2404  0429  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2405  042E  1283               	bcf	3,5	;RP0=0, select bank0
  2406  042F  1303               	bcf	3,6	;RP1=0, select bank0
  2407  0430  0827               	movf	?___awdiv,w
  2408  0431  3903               	andlw	3
  2409  0432  00B6               	movwf	??_pwm_set+2
  2410  0433  0EB6               	swapf	??_pwm_set+2,f
  2411  0434  0817               	movf	23,w	;volatile
  2412  0435  0636               	xorwf	??_pwm_set+2,w
  2413  0436  39CF               	andlw	-49
  2414  0437  0636               	xorwf	??_pwm_set+2,w
  2415  0438  0097               	movwf	23	;volatile
  2416                           
  2417                           ;pwm.c: 91: CCPR2L = 64*pwm_dc2/25;
  2418  0439  3019               	movlw	25
  2419  043A  00A7               	movwf	___awdiv@divisor
  2420  043B  3000               	movlw	0
  2421  043C  00A8               	movwf	___awdiv@divisor+1
  2422  043D  0833               	movf	pwm_set@pwm_dc2+1,w
  2423  043E  00B5               	movwf	??_pwm_set+1
  2424  043F  0832               	movf	pwm_set@pwm_dc2,w
  2425  0440  00B4               	movwf	??_pwm_set
  2426  0441  3006               	movlw	6
  2427  0442  00FF               	movwf	127
  2428  0443                     u1445:	
  2429  0443  1003               	clrc
  2430  0444  0DB4               	rlf	??_pwm_set,f
  2431  0445  0DB5               	rlf	??_pwm_set+1,f
  2432  0446  0BFF               	decfsz	127,f
  2433  0447  2C43               	goto	u1445
  2434  0448  0834               	movf	??_pwm_set,w
  2435  0449  00A9               	movwf	___awdiv@dividend
  2436  044A  0835               	movf	??_pwm_set+1,w
  2437  044B  00AA               	movwf	___awdiv@dividend+1
  2438  044C  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2439  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2440  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2441  0453  0827               	movf	?___awdiv,w
  2442  0454  009B               	movwf	27	;volatile
  2443                           
  2444                           ;pwm.c: 92: DC2B1 = (256*pwm_dc2/25)%4/2;
  2445  0455  0833               	movf	pwm_set@pwm_dc2+1,w
  2446  0456  00B5               	movwf	??_pwm_set+1
  2447  0457  0832               	movf	pwm_set@pwm_dc2,w
  2448  0458  00B4               	movwf	??_pwm_set
  2449  0459  0834               	movf	??_pwm_set,w
  2450  045A  00B5               	movwf	??_pwm_set+1
  2451  045B  01B4               	clrf	??_pwm_set
  2452  045C  0834               	movf	??_pwm_set,w
  2453  045D  00A9               	movwf	___awdiv@dividend
  2454  045E  0835               	movf	??_pwm_set+1,w
  2455  045F  00AA               	movwf	___awdiv@dividend+1
  2456  0460  3019               	movlw	25
  2457  0461  00A7               	movwf	___awdiv@divisor
  2458  0462  3000               	movlw	0
  2459  0463  00A8               	movwf	___awdiv@divisor+1
  2460  0464  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2461  0469  3003               	movlw	3
  2462  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2463  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2464  046C  0527               	andwf	?___awdiv,w
  2465  046D  00B7               	movwf	_pwm_set$814
  2466  046E  3000               	movlw	0
  2467  046F  0528               	andwf	?___awdiv+1,w
  2468  0470  00B8               	movwf	_pwm_set$814+1
  2469                           
  2470                           ;pwm.c: 92: DC2B1 = (256*pwm_dc2/25)%4/2;
  2471  0471  3002               	movlw	2
  2472  0472  00A7               	movwf	___awdiv@divisor
  2473  0473  3000               	movlw	0
  2474  0474  00A8               	movwf	___awdiv@divisor+1
  2475  0475  0838               	movf	_pwm_set$814+1,w
  2476  0476  00AA               	movwf	___awdiv@dividend+1
  2477  0477  0837               	movf	_pwm_set$814,w
  2478  0478  00A9               	movwf	___awdiv@dividend
  2479  0479  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2480  047E  1283               	bcf	3,5	;RP0=0, select bank0
  2481  047F  1303               	bcf	3,6	;RP1=0, select bank0
  2482  0480  1C27               	btfss	?___awdiv,0
  2483  0481  2C86               	goto	u1450
  2484  0482  1283               	bcf	3,5	;RP0=0, select bank0
  2485  0483  1303               	bcf	3,6	;RP1=0, select bank0
  2486  0484  169D               	bsf	29,5	;volatile
  2487  0485  2C89               	goto	l1711
  2488  0486                     u1450:	
  2489  0486  1283               	bcf	3,5	;RP0=0, select bank0
  2490  0487  1303               	bcf	3,6	;RP1=0, select bank0
  2491  0488  129D               	bcf	29,5	;volatile
  2492  0489                     l1711:	
  2493                           
  2494                           ;pwm.c: 93: DC2B0 = (256*pwm_dc2/25)%2;
  2495  0489  3019               	movlw	25
  2496  048A  00A7               	movwf	___awdiv@divisor
  2497  048B  3000               	movlw	0
  2498  048C  00A8               	movwf	___awdiv@divisor+1
  2499  048D  0833               	movf	pwm_set@pwm_dc2+1,w
  2500  048E  00B5               	movwf	??_pwm_set+1
  2501  048F  0832               	movf	pwm_set@pwm_dc2,w
  2502  0490  00B4               	movwf	??_pwm_set
  2503  0491  0834               	movf	??_pwm_set,w
  2504  0492  00B5               	movwf	??_pwm_set+1
  2505  0493  01B4               	clrf	??_pwm_set
  2506  0494  0834               	movf	??_pwm_set,w
  2507  0495  00A9               	movwf	___awdiv@dividend
  2508  0496  0835               	movf	??_pwm_set+1,w
  2509  0497  00AA               	movwf	___awdiv@dividend+1
  2510  0498  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2511  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2512  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2513  049F  1C27               	btfss	?___awdiv,0
  2514  04A0  2CA5               	goto	u1470
  2515  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  2516  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  2517  04A3  161D               	bsf	29,4	;volatile
  2518  04A4  0008               	return
  2519  04A5                     u1470:	
  2520  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  2521  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  2522  04A7  121D               	bcf	29,4	;volatile
  2523  04A8  0008               	return
  2524  04A9                     __end_of_pwm_set:	
  2525                           
  2526                           	psect	text7
  2527  067E                     __ptext7:	
  2528 ;; *************** function _pwm_init *****************
  2529 ;; Defined at:
  2530 ;;		line 11 in file "pwm.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;		None
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;		None
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2544 ;;      Params:         0       0       0       0       0
  2545 ;;      Locals:         0       0       0       0       0
  2546 ;;      Temps:          0       0       0       0       0
  2547 ;;      Totals:         0       0       0       0       0
  2548 ;;Total ram usage:        0 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    2
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_main
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           
  2559                           ;psect for function _pwm_init
  2560  067E                     _pwm_init:	
  2561                           
  2562                           ;pwm.c: 13: TRISC = 0b00000110;
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _pwm_init: [wreg+status,2+status,0]
  2566  067E  3006               	movlw	6
  2567  067F  1683               	bsf	3,5	;RP0=1, select bank1
  2568  0680  1303               	bcf	3,6	;RP1=0, select bank1
  2569  0681  0087               	movwf	7	;volatile
  2570                           
  2571                           ;pwm.c: 16: PR2 = 0xFF;
  2572  0682  30FF               	movlw	255
  2573  0683  0092               	movwf	18	;volatile
  2574                           
  2575                           ;pwm.c: 19: CCP1CONbits.P1M = 0;
  2576  0684  303F               	movlw	-193
  2577  0685  1283               	bcf	3,5	;RP0=0, select bank0
  2578  0686  1303               	bcf	3,6	;RP1=0, select bank0
  2579  0687  0597               	andwf	23,f	;volatile
  2580                           
  2581                           ;pwm.c: 20: CCP1CONbits.CCP1M = 1100;
  2582  0688  0817               	movf	23,w	;volatile
  2583  0689  39F0               	andlw	-16
  2584  068A  380C               	iorlw	12
  2585  068B  0097               	movwf	23	;volatile
  2586                           
  2587                           ;pwm.c: 21: CCP2CONbits.CCP2M = 1100;
  2588  068C  081D               	movf	29,w	;volatile
  2589  068D  39F0               	andlw	-16
  2590  068E  380C               	iorlw	12
  2591  068F  009D               	movwf	29	;volatile
  2592                           
  2593                           ;pwm.c: 24: CCP1CONbits.DC1B = 0;
  2594  0690  30CF               	movlw	-49
  2595  0691  0597               	andwf	23,f	;volatile
  2596                           
  2597                           ;pwm.c: 25: CCPR1L = 128;
  2598  0692  3080               	movlw	128
  2599  0693  0095               	movwf	21	;volatile
  2600                           
  2601                           ;pwm.c: 26: DC2B1 = 0;
  2602  0694  129D               	bcf	29,5	;volatile
  2603                           
  2604                           ;pwm.c: 27: DC2B0 = 0;
  2605  0695  121D               	bcf	29,4	;volatile
  2606                           
  2607                           ;pwm.c: 28: CCPR2L = 128;
  2608  0696  3080               	movlw	128
  2609  0697  009B               	movwf	27	;volatile
  2610                           
  2611                           ;pwm.c: 31: TRISB1 = 0;
  2612  0698  1683               	bsf	3,5	;RP0=1, select bank1
  2613  0699  1303               	bcf	3,6	;RP1=0, select bank1
  2614  069A  1086               	bcf	6,1	;volatile
  2615                           
  2616                           ;pwm.c: 32: TRISA1 = 0;
  2617  069B  1085               	bcf	5,1	;volatile
  2618                           
  2619                           ;pwm.c: 33: RA1 = 0;
  2620  069C  1283               	bcf	3,5	;RP0=0, select bank0
  2621  069D  1303               	bcf	3,6	;RP1=0, select bank0
  2622  069E  1085               	bcf	5,1	;volatile
  2623                           
  2624                           ;pwm.c: 34: RB1 = 0;
  2625  069F  1086               	bcf	6,1	;volatile
  2626                           
  2627                           ;pwm.c: 37: TMR2IF = 0;
  2628  06A0  108C               	bcf	12,1	;volatile
  2629                           
  2630                           ;pwm.c: 38: T2CONbits.T2CKPS = 1;
  2631  06A1  0812               	movf	18,w	;volatile
  2632  06A2  39FC               	andlw	-4
  2633  06A3  3801               	iorlw	1
  2634  06A4  0092               	movwf	18	;volatile
  2635                           
  2636                           ;pwm.c: 39: TMR2ON = 1;
  2637  06A5  1512               	bsf	18,2	;volatile
  2638  06A6                     l337:	
  2639                           ;pwm.c: 42: while(!TMR2IF);
  2640                           
  2641  06A6  1C8C               	btfss	12,1	;volatile
  2642  06A7  2EA6               	goto	l337
  2643                           
  2644                           ;pwm.c: 43: TRISC = 0;
  2645  06A8  1683               	bsf	3,5	;RP0=1, select bank1
  2646  06A9  1303               	bcf	3,6	;RP1=0, select bank1
  2647  06AA  0187               	clrf	7	;volatile
  2648  06AB  0008               	return
  2649  06AC                     __end_of_pwm_init:	
  2650                           
  2651                           	psect	text8
  2652  02CB                     __ptext8:	
  2653 ;; *************** function _pwm_calc *****************
  2654 ;; Defined at:
  2655 ;;		line 47 in file "pwm.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  adc_value       2   16[BANK0 ] int 
  2658 ;;  pwm_dc1         1   18[BANK0 ] PTR int 
  2659 ;;		 -> main@pwm_dc1(2), 
  2660 ;;  pwm_dc2         1   19[BANK0 ] PTR int 
  2661 ;;		 -> main@pwm_dc2(2), 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  2   16[BANK0 ] int 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2673 ;;      Params:         0       4       0       0       0
  2674 ;;      Locals:         0       0       0       0       0
  2675 ;;      Temps:          0       4       0       0       0
  2676 ;;      Totals:         0       8       0       0       0
  2677 ;;Total ram usage:        8 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    3
  2680 ;; This function calls:
  2681 ;;		___awdiv
  2682 ;;		___wmul
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _pwm_calc
  2690  02CB                     _pwm_calc:	
  2691                           
  2692                           ;pwm.c: 50: if(adc_value == 512){
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _pwm_calc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2696  02CB  3002               	movlw	2
  2697  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2698  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  2699  02CE  0631               	xorwf	pwm_calc@adc_value+1,w
  2700  02CF  0430               	iorwf	pwm_calc@adc_value,w
  2701  02D0  1D03               	btfss	3,2
  2702  02D1  2AF6               	goto	l343
  2703                           
  2704                           ;pwm.c: 51: if(RA1 && RB1){
  2705  02D2  1885               	btfsc	5,1	;volatile
  2706  02D3  1C86               	btfss	6,1	;volatile
  2707  02D4  2AE4               	goto	l1679
  2708                           
  2709                           ;pwm.c: 52: *pwm_dc1 = -50;
  2710  02D5  0832               	movf	pwm_calc@pwm_dc1,w
  2711  02D6  0084               	movwf	4
  2712  02D7  30CE               	movlw	206
  2713  02D8  1383               	bcf	3,7	;select IRP bank0
  2714  02D9  0080               	movwf	0
  2715  02DA  0A84               	incf	4,f
  2716  02DB  30FF               	movlw	255
  2717  02DC  0080               	movwf	0
  2718                           
  2719                           ;pwm.c: 53: *pwm_dc2 = -50;
  2720  02DD  0833               	movf	pwm_calc@pwm_dc2,w
  2721  02DE  0084               	movwf	4
  2722  02DF  30CE               	movlw	206
  2723  02E0  0080               	movwf	0
  2724  02E1  0A84               	incf	4,f
  2725  02E2  30FF               	movlw	255
  2726  02E3  2AF2               	goto	L1
  2727  02E4                     l1679:	
  2728                           ;pwm.c: 54: }
  2729                           
  2730                           
  2731                           ;pwm.c: 55: else{
  2732                           ;pwm.c: 56: *pwm_dc1 = 50;
  2733  02E4  0832               	movf	pwm_calc@pwm_dc1,w
  2734  02E5  0084               	movwf	4
  2735  02E6  3032               	movlw	50
  2736  02E7  1383               	bcf	3,7	;select IRP bank0
  2737  02E8  0080               	movwf	0
  2738  02E9  0A84               	incf	4,f
  2739  02EA  3000               	movlw	0
  2740  02EB  0080               	movwf	0
  2741                           
  2742                           ;pwm.c: 57: *pwm_dc2 = 50;
  2743  02EC  0833               	movf	pwm_calc@pwm_dc2,w
  2744  02ED  0084               	movwf	4
  2745  02EE  3032               	movlw	50
  2746  02EF  0080               	movwf	0
  2747  02F0  0A84               	incf	4,f
  2748  02F1  3000               	movlw	0
  2749  02F2                     L1:	
  2750  02F2  0080               	movwf	0
  2751                           
  2752                           ;pwm.c: 58: }
  2753                           ;pwm.c: 59: return 0;
  2754  02F3  01B0               	clrf	?_pwm_calc
  2755  02F4  01B1               	clrf	?_pwm_calc+1
  2756                           
  2757                           ;pwm.c: 60: }
  2758  02F5  0008               	return
  2759  02F6                     l343:	
  2760                           
  2761                           ;pwm.c: 64: else{
  2762                           ;pwm.c: 65: if(RA1 && RB1){
  2763  02F6  1885               	btfsc	5,1	;volatile
  2764  02F7  1C86               	btfss	6,1	;volatile
  2765  02F8  2B63               	goto	l1691
  2766                           
  2767                           ;pwm.c: 66: *pwm_dc1 = -(adc_value+1)*25/256;
  2768  02F9  3000               	movlw	0
  2769  02FA  00A7               	movwf	___awdiv@divisor
  2770  02FB  3001               	movlw	1
  2771  02FC  00A8               	movwf	___awdiv@divisor+1
  2772  02FD  0830               	movf	pwm_calc@adc_value,w
  2773  02FE  3E01               	addlw	1
  2774  02FF  00B4               	movwf	??_pwm_calc
  2775  0300  0831               	movf	pwm_calc@adc_value+1,w
  2776  0301  1803               	skipnc
  2777  0302  3E01               	addlw	1
  2778  0303  3E00               	addlw	0
  2779  0304  00B5               	movwf	??_pwm_calc+1
  2780  0305  09B4               	comf	??_pwm_calc,f
  2781  0306  09B5               	comf	??_pwm_calc+1,f
  2782  0307  0AB4               	incf	??_pwm_calc,f
  2783  0308  1903               	skipnz
  2784  0309  0AB5               	incf	??_pwm_calc+1,f
  2785  030A  0834               	movf	??_pwm_calc,w
  2786  030B  00A1               	movwf	___wmul@multiplier
  2787  030C  0835               	movf	??_pwm_calc+1,w
  2788  030D  00A2               	movwf	___wmul@multiplier+1
  2789  030E  3019               	movlw	25
  2790  030F  00A3               	movwf	___wmul@multiplicand
  2791  0310  3000               	movlw	0
  2792  0311  00A4               	movwf	___wmul@multiplicand+1
  2793  0312  120A  118A  272A  120A  118A  	fcall	___wmul
  2794  0317  1283               	bcf	3,5	;RP0=0, select bank0
  2795  0318  1303               	bcf	3,6	;RP1=0, select bank0
  2796  0319  0822               	movf	?___wmul+1,w
  2797  031A  00AA               	movwf	___awdiv@dividend+1
  2798  031B  0821               	movf	?___wmul,w
  2799  031C  00A9               	movwf	___awdiv@dividend
  2800  031D  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2801  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2802  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2803  0324  0832               	movf	pwm_calc@pwm_dc1,w
  2804  0325  0084               	movwf	4
  2805  0326  0827               	movf	?___awdiv,w
  2806  0327  1383               	bcf	3,7	;select IRP bank0
  2807  0328  0080               	movwf	0
  2808  0329  0A84               	incf	4,f
  2809  032A  0828               	movf	?___awdiv+1,w
  2810  032B  0080               	movwf	0
  2811                           
  2812                           ;pwm.c: 67: *pwm_dc2 = -(100 - (adc_value+1)*25/256);
  2813  032C  3000               	movlw	0
  2814  032D  00A7               	movwf	___awdiv@divisor
  2815  032E  3001               	movlw	1
  2816  032F  00A8               	movwf	___awdiv@divisor+1
  2817  0330  0830               	movf	pwm_calc@adc_value,w
  2818  0331  3E01               	addlw	1
  2819  0332  00A1               	movwf	___wmul@multiplier
  2820  0333  0831               	movf	pwm_calc@adc_value+1,w
  2821  0334  1803               	skipnc
  2822  0335  3E01               	addlw	1
  2823  0336  3E00               	addlw	0
  2824  0337  00A2               	movwf	___wmul@multiplier+1
  2825  0338  3019               	movlw	25
  2826  0339  00A3               	movwf	___wmul@multiplicand
  2827  033A  3000               	movlw	0
  2828  033B  00A4               	movwf	___wmul@multiplicand+1
  2829  033C  120A  118A  272A  120A  118A  	fcall	___wmul
  2830  0341  1283               	bcf	3,5	;RP0=0, select bank0
  2831  0342  1303               	bcf	3,6	;RP1=0, select bank0
  2832  0343  0822               	movf	?___wmul+1,w
  2833  0344  00AA               	movwf	___awdiv@dividend+1
  2834  0345  0821               	movf	?___wmul,w
  2835  0346  00A9               	movwf	___awdiv@dividend
  2836  0347  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2837  034C  1283               	bcf	3,5	;RP0=0, select bank0
  2838  034D  1303               	bcf	3,6	;RP1=0, select bank0
  2839  034E  0927               	comf	?___awdiv,w
  2840  034F  00B4               	movwf	??_pwm_calc
  2841  0350  0928               	comf	?___awdiv+1,w
  2842  0351  00B5               	movwf	??_pwm_calc+1
  2843  0352  0AB4               	incf	??_pwm_calc,f
  2844  0353  1903               	skipnz
  2845  0354  0AB5               	incf	??_pwm_calc+1,f
  2846  0355  0834               	movf	??_pwm_calc,w
  2847  0356  3E64               	addlw	100
  2848  0357  00B6               	movwf	??_pwm_calc+2
  2849  0358  0835               	movf	??_pwm_calc+1,w
  2850  0359  1803               	skipnc
  2851  035A  3E01               	addlw	1
  2852  035B  3E00               	addlw	0
  2853  035C  00B7               	movwf	??_pwm_calc+3
  2854  035D  09B6               	comf	??_pwm_calc+2,f
  2855  035E  09B7               	comf	??_pwm_calc+3,f
  2856  035F  0AB6               	incf	??_pwm_calc+2,f
  2857  0360  1903               	skipnz
  2858  0361  0AB7               	incf	??_pwm_calc+3,f
  2859  0362  2BBE               	goto	L2
  2860  0363                     l1691:	
  2861                           ;pwm.c: 68: }
  2862                           
  2863                           
  2864                           ;pwm.c: 69: else{
  2865                           ;pwm.c: 70: *pwm_dc1 = (adc_value+1)*25/256;
  2866  0363  3000               	movlw	0
  2867  0364  00A7               	movwf	___awdiv@divisor
  2868  0365  3001               	movlw	1
  2869  0366  00A8               	movwf	___awdiv@divisor+1
  2870  0367  0830               	movf	pwm_calc@adc_value,w
  2871  0368  3E01               	addlw	1
  2872  0369  00A1               	movwf	___wmul@multiplier
  2873  036A  0831               	movf	pwm_calc@adc_value+1,w
  2874  036B  1803               	skipnc
  2875  036C  3E01               	addlw	1
  2876  036D  3E00               	addlw	0
  2877  036E  00A2               	movwf	___wmul@multiplier+1
  2878  036F  3019               	movlw	25
  2879  0370  00A3               	movwf	___wmul@multiplicand
  2880  0371  3000               	movlw	0
  2881  0372  00A4               	movwf	___wmul@multiplicand+1
  2882  0373  120A  118A  272A  120A  118A  	fcall	___wmul
  2883  0378  1283               	bcf	3,5	;RP0=0, select bank0
  2884  0379  1303               	bcf	3,6	;RP1=0, select bank0
  2885  037A  0822               	movf	?___wmul+1,w
  2886  037B  00AA               	movwf	___awdiv@dividend+1
  2887  037C  0821               	movf	?___wmul,w
  2888  037D  00A9               	movwf	___awdiv@dividend
  2889  037E  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2890  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2892  0385  0832               	movf	pwm_calc@pwm_dc1,w
  2893  0386  0084               	movwf	4
  2894  0387  0827               	movf	?___awdiv,w
  2895  0388  1383               	bcf	3,7	;select IRP bank0
  2896  0389  0080               	movwf	0
  2897  038A  0A84               	incf	4,f
  2898  038B  0828               	movf	?___awdiv+1,w
  2899  038C  0080               	movwf	0
  2900                           
  2901                           ;pwm.c: 71: *pwm_dc2 = 100 - (adc_value+1)*25/256;
  2902  038D  3000               	movlw	0
  2903  038E  00A7               	movwf	___awdiv@divisor
  2904  038F  3001               	movlw	1
  2905  0390  00A8               	movwf	___awdiv@divisor+1
  2906  0391  0830               	movf	pwm_calc@adc_value,w
  2907  0392  3E01               	addlw	1
  2908  0393  00A1               	movwf	___wmul@multiplier
  2909  0394  0831               	movf	pwm_calc@adc_value+1,w
  2910  0395  1803               	skipnc
  2911  0396  3E01               	addlw	1
  2912  0397  3E00               	addlw	0
  2913  0398  00A2               	movwf	___wmul@multiplier+1
  2914  0399  3019               	movlw	25
  2915  039A  00A3               	movwf	___wmul@multiplicand
  2916  039B  3000               	movlw	0
  2917  039C  00A4               	movwf	___wmul@multiplicand+1
  2918  039D  120A  118A  272A  120A  118A  	fcall	___wmul
  2919  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  2920  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  2921  03A4  0822               	movf	?___wmul+1,w
  2922  03A5  00AA               	movwf	___awdiv@dividend+1
  2923  03A6  0821               	movf	?___wmul,w
  2924  03A7  00A9               	movwf	___awdiv@dividend
  2925  03A8  120A  118A  24A9  120A  118A  	fcall	___awdiv
  2926  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2927  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2928  03AF  0927               	comf	?___awdiv,w
  2929  03B0  00B4               	movwf	??_pwm_calc
  2930  03B1  0928               	comf	?___awdiv+1,w
  2931  03B2  00B5               	movwf	??_pwm_calc+1
  2932  03B3  0AB4               	incf	??_pwm_calc,f
  2933  03B4  1903               	skipnz
  2934  03B5  0AB5               	incf	??_pwm_calc+1,f
  2935  03B6  0834               	movf	??_pwm_calc,w
  2936  03B7  3E64               	addlw	100
  2937  03B8  00B6               	movwf	??_pwm_calc+2
  2938  03B9  0835               	movf	??_pwm_calc+1,w
  2939  03BA  1803               	skipnc
  2940  03BB  3E01               	addlw	1
  2941  03BC  3E00               	addlw	0
  2942  03BD  00B7               	movwf	??_pwm_calc+3
  2943  03BE                     L2:	
  2944  03BE  0833               	movf	pwm_calc@pwm_dc2,w
  2945  03BF  0084               	movwf	4
  2946  03C0  0836               	movf	??_pwm_calc+2,w
  2947  03C1  1383               	bcf	3,7	;select IRP bank0
  2948  03C2  0080               	movwf	0
  2949  03C3  0A84               	incf	4,f
  2950  03C4  0837               	movf	??_pwm_calc+3,w
  2951  03C5  0080               	movwf	0
  2952                           
  2953                           ;pwm.c: 72: }
  2954                           ;pwm.c: 73: return 50*75/(*pwm_dc1-*pwm_dc2);
  2955  03C6  0832               	movf	pwm_calc@pwm_dc1,w
  2956  03C7  0084               	movwf	4
  2957  03C8  0800               	movf	0,w
  2958  03C9  00B4               	movwf	??_pwm_calc
  2959  03CA  0A84               	incf	4,f
  2960  03CB  0800               	movf	0,w
  2961  03CC  00B5               	movwf	??_pwm_calc+1
  2962  03CD  0833               	movf	pwm_calc@pwm_dc2,w
  2963  03CE  0084               	movwf	4
  2964  03CF  0800               	movf	0,w
  2965  03D0  00B6               	movwf	??_pwm_calc+2
  2966  03D1  0A84               	incf	4,f
  2967  03D2  0800               	movf	0,w
  2968  03D3  00B7               	movwf	??_pwm_calc+3
  2969  03D4  09B6               	comf	??_pwm_calc+2,f
  2970  03D5  09B7               	comf	??_pwm_calc+3,f
  2971  03D6  0AB6               	incf	??_pwm_calc+2,f
  2972  03D7  1903               	skipnz
  2973  03D8  0AB7               	incf	??_pwm_calc+3,f
  2974  03D9  0834               	movf	??_pwm_calc,w
  2975  03DA  0736               	addwf	??_pwm_calc+2,w
  2976  03DB  00A7               	movwf	___awdiv@divisor
  2977  03DC  0835               	movf	??_pwm_calc+1,w
  2978  03DD  1803               	skipnc
  2979  03DE  0A35               	incf	??_pwm_calc+1,w
  2980  03DF  0737               	addwf	??_pwm_calc+3,w
  2981  03E0  00A8               	movwf	___awdiv@divisor+1
  2982  03E1  30A6               	movlw	166
  2983  03E2  00A9               	movwf	___awdiv@dividend
  2984  03E3  300E               	movlw	14
  2985  03E4  00AA               	movwf	___awdiv@dividend+1
  2986  03E5  120A  118A  24A9   	fcall	___awdiv
  2987  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  2988  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  2989  03EA  0828               	movf	?___awdiv+1,w
  2990  03EB  00B1               	movwf	?_pwm_calc+1
  2991  03EC  0827               	movf	?___awdiv,w
  2992  03ED  00B0               	movwf	?_pwm_calc
  2993  03EE  0008               	return
  2994  03EF                     __end_of_pwm_calc:	
  2995                           
  2996                           	psect	text9
  2997  072A                     __ptext9:	
  2998 ;; *************** function ___wmul *****************
  2999 ;; Defined at:
  3000 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  multiplier      2    1[BANK0 ] unsigned int 
  3003 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  product         2    5[BANK0 ] unsigned int 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  2    1[BANK0 ] unsigned int 
  3008 ;; Registers used:
  3009 ;;		wreg, status,2, status,0
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3015 ;;      Params:         0       4       0       0       0
  3016 ;;      Locals:         0       2       0       0       0
  3017 ;;      Temps:          0       0       0       0       0
  3018 ;;      Totals:         0       6       0       0       0
  3019 ;;Total ram usage:        6 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    2
  3022 ;; This function calls:
  3023 ;;		Nothing
  3024 ;; This function is called by:
  3025 ;;		_pwm_calc
  3026 ;;		_sprintf
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           
  3031                           ;psect for function ___wmul
  3032  072A                     ___wmul:	
  3033                           
  3034                           ;incstack = 0
  3035                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3036  072A  1283               	bcf	3,5	;RP0=0, select bank0
  3037  072B  1303               	bcf	3,6	;RP1=0, select bank0
  3038  072C  01A5               	clrf	___wmul@product
  3039  072D  01A6               	clrf	___wmul@product+1
  3040  072E                     l1429:	
  3041  072E  1C21               	btfss	___wmul@multiplier,0
  3042  072F  2F36               	goto	l476
  3043  0730  0823               	movf	___wmul@multiplicand,w
  3044  0731  07A5               	addwf	___wmul@product,f
  3045  0732  1803               	skipnc
  3046  0733  0AA6               	incf	___wmul@product+1,f
  3047  0734  0824               	movf	___wmul@multiplicand+1,w
  3048  0735  07A6               	addwf	___wmul@product+1,f
  3049  0736                     l476:	
  3050  0736  3001               	movlw	1
  3051  0737                     u1015:	
  3052  0737  1003               	clrc
  3053  0738  0DA3               	rlf	___wmul@multiplicand,f
  3054  0739  0DA4               	rlf	___wmul@multiplicand+1,f
  3055  073A  3EFF               	addlw	-1
  3056  073B  1D03               	skipz
  3057  073C  2F37               	goto	u1015
  3058  073D  3001               	movlw	1
  3059  073E                     u1025:	
  3060  073E  1003               	clrc
  3061  073F  0CA2               	rrf	___wmul@multiplier+1,f
  3062  0740  0CA1               	rrf	___wmul@multiplier,f
  3063  0741  3EFF               	addlw	-1
  3064  0742  1D03               	skipz
  3065  0743  2F3E               	goto	u1025
  3066  0744  0821               	movf	___wmul@multiplier,w
  3067  0745  0422               	iorwf	___wmul@multiplier+1,w
  3068  0746  1D03               	btfss	3,2
  3069  0747  2F2E               	goto	l1429
  3070  0748  0826               	movf	___wmul@product+1,w
  3071  0749  00A2               	movwf	?___wmul+1
  3072  074A  0825               	movf	___wmul@product,w
  3073  074B  00A1               	movwf	?___wmul
  3074  074C  0008               	return
  3075  074D                     __end_of___wmul:	
  3076                           
  3077                           	psect	text10
  3078  04A9                     __ptext10:	
  3079 ;; *************** function ___awdiv *****************
  3080 ;; Defined at:
  3081 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  divisor         2    7[BANK0 ] int 
  3084 ;;  dividend        2    9[BANK0 ] int 
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;  quotient        2   14[BANK0 ] int 
  3087 ;;  sign            1   13[BANK0 ] unsigned char 
  3088 ;;  counter         1   12[BANK0 ] unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  2    7[BANK0 ] int 
  3091 ;; Registers used:
  3092 ;;		wreg, status,2, status,0
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3098 ;;      Params:         0       4       0       0       0
  3099 ;;      Locals:         0       4       0       0       0
  3100 ;;      Temps:          0       1       0       0       0
  3101 ;;      Totals:         0       9       0       0       0
  3102 ;;Total ram usage:        9 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:    2
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_pwm_calc
  3109 ;;		_pwm_set
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           
  3114                           ;psect for function ___awdiv
  3115  04A9                     ___awdiv:	
  3116                           
  3117                           ;incstack = 0
  3118                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3119  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3120  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  3121  04AB  01AD               	clrf	___awdiv@sign
  3122  04AC  1FA8               	btfss	___awdiv@divisor+1,7
  3123  04AD  2CB5               	goto	l1449
  3124  04AE  09A7               	comf	___awdiv@divisor,f
  3125  04AF  09A8               	comf	___awdiv@divisor+1,f
  3126  04B0  0AA7               	incf	___awdiv@divisor,f
  3127  04B1  1903               	skipnz
  3128  04B2  0AA8               	incf	___awdiv@divisor+1,f
  3129  04B3  01AD               	clrf	___awdiv@sign
  3130  04B4  0AAD               	incf	___awdiv@sign,f
  3131  04B5                     l1449:	
  3132  04B5  1FAA               	btfss	___awdiv@dividend+1,7
  3133  04B6  2CC0               	goto	l1455
  3134  04B7  09A9               	comf	___awdiv@dividend,f
  3135  04B8  09AA               	comf	___awdiv@dividend+1,f
  3136  04B9  0AA9               	incf	___awdiv@dividend,f
  3137  04BA  1903               	skipnz
  3138  04BB  0AAA               	incf	___awdiv@dividend+1,f
  3139  04BC  3001               	movlw	1
  3140  04BD  00AB               	movwf	??___awdiv
  3141  04BE  082B               	movf	??___awdiv,w
  3142  04BF  06AD               	xorwf	___awdiv@sign,f
  3143  04C0                     l1455:	
  3144  04C0  01AE               	clrf	___awdiv@quotient
  3145  04C1  01AF               	clrf	___awdiv@quotient+1
  3146  04C2  0827               	movf	___awdiv@divisor,w
  3147  04C3  0428               	iorwf	___awdiv@divisor+1,w
  3148  04C4  1903               	btfsc	3,2
  3149  04C5  2CF7               	goto	l1477
  3150  04C6  01AC               	clrf	___awdiv@counter
  3151  04C7  0AAC               	incf	___awdiv@counter,f
  3152  04C8                     l1465:	
  3153  04C8  1BA8               	btfsc	___awdiv@divisor+1,7
  3154  04C9  2CD6               	goto	l1467
  3155  04CA  3001               	movlw	1
  3156  04CB                     u1075:	
  3157  04CB  1003               	clrc
  3158  04CC  0DA7               	rlf	___awdiv@divisor,f
  3159  04CD  0DA8               	rlf	___awdiv@divisor+1,f
  3160  04CE  3EFF               	addlw	-1
  3161  04CF  1D03               	skipz
  3162  04D0  2CCB               	goto	u1075
  3163  04D1  3001               	movlw	1
  3164  04D2  00AB               	movwf	??___awdiv
  3165  04D3  082B               	movf	??___awdiv,w
  3166  04D4  07AC               	addwf	___awdiv@counter,f
  3167  04D5  2CC8               	goto	l1465
  3168  04D6                     l1467:	
  3169  04D6  3001               	movlw	1
  3170  04D7                     u1095:	
  3171  04D7  1003               	clrc
  3172  04D8  0DAE               	rlf	___awdiv@quotient,f
  3173  04D9  0DAF               	rlf	___awdiv@quotient+1,f
  3174  04DA  3EFF               	addlw	-1
  3175  04DB  1D03               	skipz
  3176  04DC  2CD7               	goto	u1095
  3177  04DD  0828               	movf	___awdiv@divisor+1,w
  3178  04DE  022A               	subwf	___awdiv@dividend+1,w
  3179  04DF  1D03               	skipz
  3180  04E0  2CE3               	goto	u1105
  3181  04E1  0827               	movf	___awdiv@divisor,w
  3182  04E2  0229               	subwf	___awdiv@dividend,w
  3183  04E3                     u1105:	
  3184  04E3  1C03               	skipc
  3185  04E4  2CEC               	goto	l1473
  3186  04E5  0827               	movf	___awdiv@divisor,w
  3187  04E6  02A9               	subwf	___awdiv@dividend,f
  3188  04E7  0828               	movf	___awdiv@divisor+1,w
  3189  04E8  1C03               	skipc
  3190  04E9  03AA               	decf	___awdiv@dividend+1,f
  3191  04EA  02AA               	subwf	___awdiv@dividend+1,f
  3192  04EB  142E               	bsf	___awdiv@quotient,0
  3193  04EC                     l1473:	
  3194  04EC  3001               	movlw	1
  3195  04ED                     u1115:	
  3196  04ED  1003               	clrc
  3197  04EE  0CA8               	rrf	___awdiv@divisor+1,f
  3198  04EF  0CA7               	rrf	___awdiv@divisor,f
  3199  04F0  3EFF               	addlw	-1
  3200  04F1  1D03               	skipz
  3201  04F2  2CED               	goto	u1115
  3202  04F3  3001               	movlw	1
  3203  04F4  02AC               	subwf	___awdiv@counter,f
  3204  04F5  1D03               	btfss	3,2
  3205  04F6  2CD6               	goto	l1467
  3206  04F7                     l1477:	
  3207  04F7  082D               	movf	___awdiv@sign,w
  3208  04F8  1903               	btfsc	3,2
  3209  04F9  2CFF               	goto	l1481
  3210  04FA  09AE               	comf	___awdiv@quotient,f
  3211  04FB  09AF               	comf	___awdiv@quotient+1,f
  3212  04FC  0AAE               	incf	___awdiv@quotient,f
  3213  04FD  1903               	skipnz
  3214  04FE  0AAF               	incf	___awdiv@quotient+1,f
  3215  04FF                     l1481:	
  3216  04FF  082F               	movf	___awdiv@quotient+1,w
  3217  0500  00A8               	movwf	?___awdiv+1
  3218  0501  082E               	movf	___awdiv@quotient,w
  3219  0502  00A7               	movwf	?___awdiv
  3220  0503  0008               	return
  3221  0504                     __end_of___awdiv:	
  3222                           
  3223                           	psect	text11
  3224  06D7                     __ptext11:	
  3225 ;; *************** function _lcd_puts *****************
  3226 ;; Defined at:
  3227 ;;		line 52 in file "lcd.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  3230 ;;		 -> main@message(9), STR_1(8), 
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;		None
  3233 ;; Return value:  Size  Location     Type
  3234 ;;                  1    wreg      void 
  3235 ;; Registers used:
  3236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3242 ;;      Params:         0       2       0       0       0
  3243 ;;      Locals:         0       0       0       0       0
  3244 ;;      Temps:          0       0       0       0       0
  3245 ;;      Totals:         0       2       0       0       0
  3246 ;;Total ram usage:        2 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    4
  3249 ;; This function calls:
  3250 ;;		_LCD_RS_SetHigh
  3251 ;;		_lcd_write
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _lcd_puts
  3259  06D7                     _lcd_puts:	
  3260                           
  3261                           ;lcd.c: 53: LCD_RS_SetHigh();
  3262                           
  3263                           ;incstack = 0
  3264                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3265  06D7  120A  158A  27F5  120A  118A  	fcall	_LCD_RS_SetHigh
  3266  06DC                     l1599:	
  3267                           ;lcd.c: 54: while(*s)
  3268                           
  3269  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  3270  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  3271  06DE  0826               	movf	lcd_puts@s+1,w
  3272  06DF  00FF               	movwf	127
  3273  06E0  0825               	movf	lcd_puts@s,w
  3274  06E1  0084               	movwf	4
  3275  06E2  120A  118A  2615  120A  118A  	fcall	stringtab
  3276  06E7  3A00               	xorlw	0
  3277  06E8  1903               	btfsc	3,2
  3278  06E9  0008               	return
  3279                           
  3280                           ;lcd.c: 55: lcd_write(*s++);
  3281  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  3282  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  3283  06EC  0826               	movf	lcd_puts@s+1,w
  3284  06ED  00FF               	movwf	127
  3285  06EE  0825               	movf	lcd_puts@s,w
  3286  06EF  0084               	movwf	4
  3287  06F0  120A  118A  2615  120A  118A  	fcall	stringtab
  3288  06F5  120A  118A  274D  120A  118A  	fcall	_lcd_write
  3289  06FA  3001               	movlw	1
  3290  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  3291  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  3292  06FD  07A5               	addwf	lcd_puts@s,f
  3293  06FE  1803               	skipnc
  3294  06FF  0AA6               	incf	lcd_puts@s+1,f
  3295  0700  2EDC               	goto	l1599
  3296  0701                     __end_of_lcd_puts:	
  3297                           
  3298                           	psect	text12
  3299  0FF5                     __ptext12:	
  3300 ;; *************** function _LCD_RS_SetHigh *****************
  3301 ;; Defined at:
  3302 ;;		line 24 in file "lcd.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		None
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3316 ;;      Params:         0       0       0       0       0
  3317 ;;      Locals:         0       0       0       0       0
  3318 ;;      Temps:          0       0       0       0       0
  3319 ;;      Totals:         0       0       0       0       0
  3320 ;;Total ram usage:        0 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    2
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_lcd_puts
  3327 ;;		_lcd_putchar
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _LCD_RS_SetHigh
  3333  0FF5                     _LCD_RS_SetHigh:	
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _LCD_RS_SetHigh: []
  3337  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  3338  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  3339  0FF7  1505               	bsf	5,2	;volatile
  3340  0FF8  0008               	return
  3341  0FF9                     __end_of_LCD_RS_SetHigh:	
  3342                           
  3343                           	psect	text13
  3344  0504                     __ptext13:	
  3345 ;; *************** function _lcd_init *****************
  3346 ;; Defined at:
  3347 ;;		line 84 in file "lcd.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      void 
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0, pclath, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3361 ;;      Params:         0       0       0       0       0
  3362 ;;      Locals:         0       0       0       0       0
  3363 ;;      Temps:          0       2       0       0       0
  3364 ;;      Totals:         0       2       0       0       0
  3365 ;;Total ram usage:        2 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    4
  3368 ;; This function calls:
  3369 ;;		_LCD_RS_SetLow
  3370 ;;		_LCD_RW_SetLow
  3371 ;;		_lcd_write
  3372 ;; This function is called by:
  3373 ;;		_main
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _lcd_init
  3379  0504                     _lcd_init:	
  3380                           
  3381                           ;lcd.c: 86: TRISB0 = 0;
  3382                           
  3383                           ;incstack = 0
  3384                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  3385  0504  1683               	bsf	3,5	;RP0=1, select bank1
  3386  0505  1303               	bcf	3,6	;RP1=0, select bank1
  3387  0506  1006               	bcf	6,0	;volatile
  3388                           
  3389                           ;lcd.c: 87: ANS12 = 0;
  3390  0507  1683               	bsf	3,5	;RP0=1, select bank3
  3391  0508  1703               	bsf	3,6	;RP1=1, select bank3
  3392  0509  1209               	bcf	9,4	;volatile
  3393                           
  3394                           ;lcd.c: 88: TRISA3 = 0;
  3395  050A  1683               	bsf	3,5	;RP0=1, select bank1
  3396  050B  1303               	bcf	3,6	;RP1=0, select bank1
  3397  050C  1185               	bcf	5,3	;volatile
  3398                           
  3399                           ;lcd.c: 89: ANS3 = 0;
  3400  050D  1683               	bsf	3,5	;RP0=1, select bank3
  3401  050E  1703               	bsf	3,6	;RP1=1, select bank3
  3402  050F  1188               	bcf	8,3	;volatile
  3403                           
  3404                           ;lcd.c: 90: TRISA2 = 0;
  3405  0510  1683               	bsf	3,5	;RP0=1, select bank1
  3406  0511  1303               	bcf	3,6	;RP1=0, select bank1
  3407  0512  1105               	bcf	5,2	;volatile
  3408                           
  3409                           ;lcd.c: 91: ANS2 = 0;
  3410  0513  1683               	bsf	3,5	;RP0=1, select bank3
  3411  0514  1703               	bsf	3,6	;RP1=1, select bank3
  3412  0515  1108               	bcf	8,2	;volatile
  3413                           
  3414                           ;lcd.c: 92: TRISC = 0b11000110;
  3415  0516  30C6               	movlw	198
  3416  0517  1683               	bsf	3,5	;RP0=1, select bank1
  3417  0518  1303               	bcf	3,6	;RP1=0, select bank1
  3418  0519  0087               	movwf	7	;volatile
  3419                           
  3420                           ;lcd.c: 93: RB0 = 0;
  3421  051A  1283               	bcf	3,5	;RP0=0, select bank0
  3422  051B  1303               	bcf	3,6	;RP1=0, select bank0
  3423  051C  1006               	bcf	6,0	;volatile
  3424                           
  3425                           ;lcd.c: 95: LCD_RW_SetLow();
  3426  051D  120A  158A  27F1  120A  118A  	fcall	_LCD_RW_SetLow
  3427                           
  3428                           ;lcd.c: 96: LCD_RS_SetLow();
  3429  0522  120A  158A  27ED  120A  118A  	fcall	_LCD_RS_SetLow
  3430                           
  3431                           ;lcd.c: 97: _delay((unsigned long)((15)*(20000000/4000.0)));
  3432  0527  3062               	movlw	98
  3433  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3434  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3435  052A  00A6               	movwf	??_lcd_init+1
  3436  052B  3065               	movlw	101
  3437  052C  00A5               	movwf	??_lcd_init
  3438  052D                     u1737:	
  3439  052D  0BA5               	decfsz	??_lcd_init,f
  3440  052E  2D2D               	goto	u1737
  3441  052F  0BA6               	decfsz	??_lcd_init+1,f
  3442  0530  2D2D               	goto	u1737
  3443                           
  3444                           ;lcd.c: 98: lcd_write(0x02);
  3445  0531  3002               	movlw	2
  3446  0532  120A  118A  274D  120A  118A  	fcall	_lcd_write
  3447                           
  3448                           ;lcd.c: 99: _delay((unsigned long)((2)*(20000000/4000.0)));
  3449  0537  300D               	movlw	13
  3450  0538  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0539  1303               	bcf	3,6	;RP1=0, select bank0
  3452  053A  00A6               	movwf	??_lcd_init+1
  3453  053B  30FB               	movlw	251
  3454  053C  00A5               	movwf	??_lcd_init
  3455  053D                     u1747:	
  3456  053D  0BA5               	decfsz	??_lcd_init,f
  3457  053E  2D3D               	goto	u1747
  3458  053F  0BA6               	decfsz	??_lcd_init+1,f
  3459  0540  2D3D               	goto	u1747
  3460                           
  3461                           ;lcd.c: 100: lcd_write(0x28);
  3462  0541  3028               	movlw	40
  3463  0542  120A  118A  274D  120A  118A  	fcall	_lcd_write
  3464                           
  3465                           ;lcd.c: 101: lcd_write(0x08);
  3466  0547  3008               	movlw	8
  3467  0548  120A  118A  274D  120A  118A  	fcall	_lcd_write
  3468                           
  3469                           ;lcd.c: 102: lcd_write(0x0f);
  3470  054D  300F               	movlw	15
  3471  054E  120A  118A  274D  120A  118A  	fcall	_lcd_write
  3472                           
  3473                           ;lcd.c: 103: lcd_write(0x06);
  3474  0553  3006               	movlw	6
  3475  0554  120A  118A  274D   	fcall	_lcd_write
  3476  0557  0008               	return
  3477  0558                     __end_of_lcd_init:	
  3478                           
  3479                           	psect	text14
  3480  0FF1                     __ptext14:	
  3481 ;; *************** function _LCD_RW_SetLow *****************
  3482 ;; Defined at:
  3483 ;;		line 25 in file "lcd.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      void 
  3490 ;; Registers used:
  3491 ;;		None
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3497 ;;      Params:         0       0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0
  3500 ;;      Totals:         0       0       0       0       0
  3501 ;;Total ram usage:        0 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    2
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		_lcd_init
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           
  3512                           ;psect for function _LCD_RW_SetLow
  3513  0FF1                     _LCD_RW_SetLow:	
  3514                           
  3515                           ;incstack = 0
  3516                           ; Regs used in _LCD_RW_SetLow: []
  3517  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
  3518  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
  3519  0FF3  1185               	bcf	5,3	;volatile
  3520  0FF4  0008               	return
  3521  0FF5                     __end_of_LCD_RW_SetLow:	
  3522                           
  3523                           	psect	text15
  3524  07C6                     __ptext15:	
  3525 ;; *************** function _lcd_goto *****************
  3526 ;; Defined at:
  3527 ;;		line 59 in file "lcd.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  pos             1    wreg     unsigned char 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  pos             1    5[BANK0 ] unsigned char 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;                  1    wreg      void 
  3534 ;; Registers used:
  3535 ;;		wreg, status,2, status,0, pclath, cstack
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3541 ;;      Params:         0       0       0       0       0
  3542 ;;      Locals:         0       1       0       0       0
  3543 ;;      Temps:          0       0       0       0       0
  3544 ;;      Totals:         0       1       0       0       0
  3545 ;;Total ram usage:        1 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    4
  3548 ;; This function calls:
  3549 ;;		_LCD_RS_SetLow
  3550 ;;		_lcd_write
  3551 ;; This function is called by:
  3552 ;;		_main
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           
  3557                           ;psect for function _lcd_goto
  3558  07C6                     _lcd_goto:	
  3559                           
  3560                           ;incstack = 0
  3561                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  3562                           ;lcd_goto@pos stored from wreg
  3563  07C6  1283               	bcf	3,5	;RP0=0, select bank0
  3564  07C7  1303               	bcf	3,6	;RP1=0, select bank0
  3565  07C8  00A5               	movwf	lcd_goto@pos
  3566                           
  3567                           ;lcd.c: 60: LCD_RS_SetLow();
  3568  07C9  120A  158A  27ED  120A  118A  	fcall	_LCD_RS_SetLow
  3569                           
  3570                           ;lcd.c: 61: lcd_write(0x80 + pos);
  3571  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  3572  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  3573  07D0  0825               	movf	lcd_goto@pos,w
  3574  07D1  3E80               	addlw	128
  3575  07D2  120A  118A  274D   	fcall	_lcd_write
  3576  07D5  0008               	return
  3577  07D6                     __end_of_lcd_goto:	
  3578                           
  3579                           	psect	text16
  3580  07A1                     __ptext16:	
  3581 ;; *************** function _lcd_cursor *****************
  3582 ;; Defined at:
  3583 ;;		line 68 in file "lcd.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  on              2    5[BANK0 ] int 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;		None
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0, pclath, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3597 ;;      Params:         0       2       0       0       0
  3598 ;;      Locals:         0       0       0       0       0
  3599 ;;      Temps:          0       0       0       0       0
  3600 ;;      Totals:         0       2       0       0       0
  3601 ;;Total ram usage:        2 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:    4
  3604 ;; This function calls:
  3605 ;;		_LCD_RS_SetLow
  3606 ;;		_lcd_write
  3607 ;; This function is called by:
  3608 ;;		_main
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           
  3613                           ;psect for function _lcd_cursor
  3614  07A1                     _lcd_cursor:	
  3615                           
  3616                           ;lcd.c: 69: LCD_RS_SetLow();
  3617                           
  3618                           ;incstack = 0
  3619                           ; Regs used in _lcd_cursor: [wreg+status,2+status,0+pclath+cstack]
  3620  07A1  120A  158A  27ED  120A  118A  	fcall	_LCD_RS_SetLow
  3621                           
  3622                           ;lcd.c: 70: if (on) {
  3623  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  3624  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  3625  07A8  0825               	movf	lcd_cursor@on,w
  3626  07A9  0426               	iorwf	lcd_cursor@on+1,w
  3627  07AA  1903               	btfsc	3,2
  3628  07AB  2FB1               	goto	l1611
  3629                           
  3630                           ;lcd.c: 71: lcd_write(0x0f);
  3631  07AC  300F               	movlw	15
  3632  07AD  120A  118A  274D   	fcall	_lcd_write
  3633                           
  3634                           ;lcd.c: 72: } else {
  3635  07B0  0008               	return
  3636  07B1                     l1611:	
  3637                           
  3638                           ;lcd.c: 73: lcd_write(0x0c);
  3639  07B1  300C               	movlw	12
  3640  07B2  120A  118A  274D   	fcall	_lcd_write
  3641  07B5  0008               	return
  3642  07B6                     __end_of_lcd_cursor:	
  3643                           
  3644                           	psect	text17
  3645  078B                     __ptext17:	
  3646 ;; *************** function _lcd_clear *****************
  3647 ;; Defined at:
  3648 ;;		line 45 in file "lcd.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;		None
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;		None
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  1    wreg      void 
  3655 ;; Registers used:
  3656 ;;		wreg, status,2, status,0, pclath, cstack
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3662 ;;      Params:         0       0       0       0       0
  3663 ;;      Locals:         0       0       0       0       0
  3664 ;;      Temps:          0       2       0       0       0
  3665 ;;      Totals:         0       2       0       0       0
  3666 ;;Total ram usage:        2 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    4
  3669 ;; This function calls:
  3670 ;;		_LCD_RS_SetLow
  3671 ;;		_lcd_write
  3672 ;; This function is called by:
  3673 ;;		_main
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _lcd_clear
  3679  078B                     _lcd_clear:	
  3680                           
  3681                           ;lcd.c: 46: LCD_RS_SetLow();
  3682                           
  3683                           ;incstack = 0
  3684                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
  3685  078B  120A  158A  27ED  120A  118A  	fcall	_LCD_RS_SetLow
  3686                           
  3687                           ;lcd.c: 47: lcd_write(0x1);
  3688  0790  3001               	movlw	1
  3689  0791  120A  118A  274D  120A  118A  	fcall	_lcd_write
  3690                           
  3691                           ;lcd.c: 48: _delay((unsigned long)((2)*(20000000/4000.0)));
  3692  0796  300D               	movlw	13
  3693  0797  1283               	bcf	3,5	;RP0=0, select bank0
  3694  0798  1303               	bcf	3,6	;RP1=0, select bank0
  3695  0799  00A6               	movwf	??_lcd_clear+1
  3696  079A  30FB               	movlw	251
  3697  079B  00A5               	movwf	??_lcd_clear
  3698  079C                     u1757:	
  3699  079C  0BA5               	decfsz	??_lcd_clear,f
  3700  079D  2F9C               	goto	u1757
  3701  079E  0BA6               	decfsz	??_lcd_clear+1,f
  3702  079F  2F9C               	goto	u1757
  3703  07A0  0008               	return
  3704  07A1                     __end_of_lcd_clear:	
  3705                           
  3706                           	psect	text18
  3707  074D                     __ptext18:	
  3708 ;; *************** function _lcd_write *****************
  3709 ;; Defined at:
  3710 ;;		line 38 in file "lcd.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  c               1    wreg     unsigned char 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  c               1    4[BANK0 ] unsigned char 
  3715 ;; Return value:  Size  Location     Type
  3716 ;;                  1    wreg      void 
  3717 ;; Registers used:
  3718 ;;		wreg, status,2, status,0, pclath, cstack
  3719 ;; Tracked objects:
  3720 ;;		On entry : 0/0
  3721 ;;		On exit  : 0/0
  3722 ;;		Unchanged: 0/0
  3723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3724 ;;      Params:         0       0       0       0       0
  3725 ;;      Locals:         0       1       0       0       0
  3726 ;;      Temps:          0       1       0       0       0
  3727 ;;      Totals:         0       2       0       0       0
  3728 ;;Total ram usage:        2 bytes
  3729 ;; Hardware stack levels used:    1
  3730 ;; Hardware stack levels required when called:    3
  3731 ;; This function calls:
  3732 ;;		_lcd_write_nibble
  3733 ;; This function is called by:
  3734 ;;		_lcd_clear
  3735 ;;		_lcd_puts
  3736 ;;		_lcd_goto
  3737 ;;		_lcd_cursor
  3738 ;;		_lcd_init
  3739 ;;		_lcd_putchar
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           
  3744                           ;psect for function _lcd_write
  3745  074D                     _lcd_write:	
  3746                           
  3747                           ;incstack = 0
  3748                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  3749                           ;lcd_write@c stored from wreg
  3750  074D  1283               	bcf	3,5	;RP0=0, select bank0
  3751  074E  1303               	bcf	3,6	;RP1=0, select bank0
  3752  074F  00A4               	movwf	lcd_write@c
  3753                           
  3754                           ;lcd.c: 39: lcd_write_nibble(c >> 4);
  3755  0750  0824               	movf	lcd_write@c,w
  3756  0751  00A3               	movwf	??_lcd_write
  3757  0752  3004               	movlw	4
  3758  0753                     u975:	
  3759  0753  1003               	clrc
  3760  0754  0CA3               	rrf	??_lcd_write,f
  3761  0755  3EFF               	addlw	-1
  3762  0756  1D03               	skipz
  3763  0757  2F53               	goto	u975
  3764  0758  0823               	movf	??_lcd_write,w
  3765  0759  120A  118A  2558  120A  118A  	fcall	_lcd_write_nibble
  3766                           
  3767                           ;lcd.c: 40: lcd_write_nibble(c);
  3768  075E  1283               	bcf	3,5	;RP0=0, select bank0
  3769  075F  1303               	bcf	3,6	;RP1=0, select bank0
  3770  0760  0824               	movf	lcd_write@c,w
  3771  0761  120A  118A  2558  120A  118A  	fcall	_lcd_write_nibble
  3772                           
  3773                           ;lcd.c: 41: _delay((unsigned long)((40)*(20000000/4000000.0)));
  3774  0766  3041               	movlw	65
  3775  0767  1283               	bcf	3,5	;RP0=0, select bank0
  3776  0768  1303               	bcf	3,6	;RP1=0, select bank0
  3777  0769  00A3               	movwf	??_lcd_write
  3778  076A                     u1767:	
  3779  076A  0BA3               	decfsz	??_lcd_write,f
  3780  076B  2F6A               	goto	u1767
  3781  076C  2F6D               	nop2
  3782  076D  0008               	return
  3783  076E                     __end_of_lcd_write:	
  3784                           
  3785                           	psect	text19
  3786  0558                     __ptext19:	
  3787 ;; *************** function _lcd_write_nibble *****************
  3788 ;; Defined at:
  3789 ;;		line 28 in file "lcd.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;  c               1    wreg     unsigned char 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  c               1    2[BANK0 ] unsigned char 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2, status,0
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3803 ;;      Params:         0       0       0       0       0
  3804 ;;      Locals:         0       1       0       0       0
  3805 ;;      Temps:          0       1       0       0       0
  3806 ;;      Totals:         0       2       0       0       0
  3807 ;;Total ram usage:        2 bytes
  3808 ;; Hardware stack levels used:    1
  3809 ;; Hardware stack levels required when called:    2
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_lcd_write
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           
  3818                           ;psect for function _lcd_write_nibble
  3819  0558                     _lcd_write_nibble:	
  3820                           
  3821                           ;incstack = 0
  3822                           ; Regs used in _lcd_write_nibble: [wreg+status,2+status,0]
  3823                           ;lcd_write_nibble@c stored from wreg
  3824  0558  1283               	bcf	3,5	;RP0=0, select bank0
  3825  0559  1303               	bcf	3,6	;RP1=0, select bank0
  3826  055A  00A2               	movwf	lcd_write_nibble@c
  3827                           
  3828                           ;lcd.c: 29: RC0 = (c & 0b00000001) >> 0;
  3829  055B  1C22               	btfss	lcd_write_nibble@c,0
  3830  055C  2D61               	goto	u860
  3831  055D  1283               	bcf	3,5	;RP0=0, select bank0
  3832  055E  1303               	bcf	3,6	;RP1=0, select bank0
  3833  055F  1407               	bsf	7,0	;volatile
  3834  0560  2D64               	goto	l1395
  3835  0561                     u860:	
  3836  0561  1283               	bcf	3,5	;RP0=0, select bank0
  3837  0562  1303               	bcf	3,6	;RP1=0, select bank0
  3838  0563  1007               	bcf	7,0	;volatile
  3839  0564                     l1395:	
  3840                           
  3841                           ;lcd.c: 30: RC3 = (c & 0b00000010) >> 1;
  3842  0564  0822               	movf	lcd_write_nibble@c,w
  3843  0565  00A1               	movwf	??_lcd_write_nibble
  3844  0566  3001               	movlw	1
  3845  0567                     u885:	
  3846  0567  1003               	clrc
  3847  0568  0CA1               	rrf	??_lcd_write_nibble,f
  3848  0569  3EFF               	addlw	-1
  3849  056A  1D03               	skipz
  3850  056B  2D67               	goto	u885
  3851  056C  1C21               	btfss	??_lcd_write_nibble,0
  3852  056D  2D72               	goto	u890
  3853  056E  1283               	bcf	3,5	;RP0=0, select bank0
  3854  056F  1303               	bcf	3,6	;RP1=0, select bank0
  3855  0570  1587               	bsf	7,3	;volatile
  3856  0571  2D75               	goto	u904
  3857  0572                     u890:	
  3858  0572  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0573  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0574  1187               	bcf	7,3	;volatile
  3861  0575                     u904:	
  3862                           
  3863                           ;lcd.c: 31: RC4 = (c & 0b00000100) >> 2;
  3864  0575  0822               	movf	lcd_write_nibble@c,w
  3865  0576  00A1               	movwf	??_lcd_write_nibble
  3866  0577  3002               	movlw	2
  3867  0578                     u915:	
  3868  0578  1003               	clrc
  3869  0579  0CA1               	rrf	??_lcd_write_nibble,f
  3870  057A  3EFF               	addlw	-1
  3871  057B  1D03               	skipz
  3872  057C  2D78               	goto	u915
  3873  057D  1C21               	btfss	??_lcd_write_nibble,0
  3874  057E  2D83               	goto	u920
  3875  057F  1283               	bcf	3,5	;RP0=0, select bank0
  3876  0580  1303               	bcf	3,6	;RP1=0, select bank0
  3877  0581  1607               	bsf	7,4	;volatile
  3878  0582  2D86               	goto	u934
  3879  0583                     u920:	
  3880  0583  1283               	bcf	3,5	;RP0=0, select bank0
  3881  0584  1303               	bcf	3,6	;RP1=0, select bank0
  3882  0585  1207               	bcf	7,4	;volatile
  3883  0586                     u934:	
  3884                           
  3885                           ;lcd.c: 32: RC5 = (c & 0b00001000) >> 3;
  3886  0586  0822               	movf	lcd_write_nibble@c,w
  3887  0587  00A1               	movwf	??_lcd_write_nibble
  3888  0588  3003               	movlw	3
  3889  0589                     u945:	
  3890  0589  1003               	clrc
  3891  058A  0CA1               	rrf	??_lcd_write_nibble,f
  3892  058B  3EFF               	addlw	-1
  3893  058C  1D03               	skipz
  3894  058D  2D89               	goto	u945
  3895  058E  1C21               	btfss	??_lcd_write_nibble,0
  3896  058F  2D94               	goto	u950
  3897  0590  1283               	bcf	3,5	;RP0=0, select bank0
  3898  0591  1303               	bcf	3,6	;RP1=0, select bank0
  3899  0592  1687               	bsf	7,5	;volatile
  3900  0593  2D97               	goto	l1397
  3901  0594                     u950:	
  3902  0594  1283               	bcf	3,5	;RP0=0, select bank0
  3903  0595  1303               	bcf	3,6	;RP1=0, select bank0
  3904  0596  1287               	bcf	7,5	;volatile
  3905  0597                     l1397:	
  3906                           
  3907                           ;lcd.c: 34: ((RB0 = 1),(RB0 = 1),(RB0 = 1),(RB0 = 0));
  3908  0597  1406               	bsf	6,0	;volatile
  3909  0598  1406               	bsf	6,0	;volatile
  3910  0599  1406               	bsf	6,0	;volatile
  3911  059A  1006               	bcf	6,0	;volatile
  3912  059B  0008               	return
  3913  059C                     __end_of_lcd_write_nibble:	
  3914                           
  3915                           	psect	text20
  3916  0FED                     __ptext20:	
  3917 ;; *************** function _LCD_RS_SetLow *****************
  3918 ;; Defined at:
  3919 ;;		line 23 in file "lcd.c"
  3920 ;; Parameters:    Size  Location     Type
  3921 ;;		None
  3922 ;; Auto vars:     Size  Location     Type
  3923 ;;		None
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  1    wreg      void 
  3926 ;; Registers used:
  3927 ;;		None
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3933 ;;      Params:         0       0       0       0       0
  3934 ;;      Locals:         0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0
  3936 ;;      Totals:         0       0       0       0       0
  3937 ;;Total ram usage:        0 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; Hardware stack levels required when called:    2
  3940 ;; This function calls:
  3941 ;;		Nothing
  3942 ;; This function is called by:
  3943 ;;		_lcd_clear
  3944 ;;		_lcd_goto
  3945 ;;		_lcd_cursor
  3946 ;;		_lcd_init
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _LCD_RS_SetLow
  3952  0FED                     _LCD_RS_SetLow:	
  3953                           
  3954                           ;incstack = 0
  3955                           ; Regs used in _LCD_RS_SetLow: []
  3956  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  3957  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  3958  0FEF  1105               	bcf	5,2	;volatile
  3959  0FF0  0008               	return
  3960  0FF1                     __end_of_LCD_RS_SetLow:	
  3961                           
  3962                           	psect	text21
  3963  0FF9                     __ptext21:	
  3964 ;; *************** function _ioc_init *****************
  3965 ;; Defined at:
  3966 ;;		line 80 in file "main.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;		None
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		status,2
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3980 ;;      Params:         0       0       0       0       0
  3981 ;;      Locals:         0       0       0       0       0
  3982 ;;      Temps:          0       0       0       0       0
  3983 ;;      Totals:         0       0       0       0       0
  3984 ;;Total ram usage:        0 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    2
  3987 ;; This function calls:
  3988 ;;		Nothing
  3989 ;; This function is called by:
  3990 ;;		_main
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           
  3995                           ;psect for function _ioc_init
  3996  0FF9                     _ioc_init:	
  3997                           
  3998                           ;main.c: 82: TRISB6 = 1;
  3999                           
  4000                           ;incstack = 0
  4001                           ; Regs used in _ioc_init: [status,2]
  4002  0FF9  1683               	bsf	3,5	;RP0=1, select bank1
  4003  0FFA  1303               	bcf	3,6	;RP1=0, select bank1
  4004  0FFB  1706               	bsf	6,6	;volatile
  4005                           
  4006                           ;main.c: 83: WPUB = 0;
  4007  0FFC  0195               	clrf	21	;volatile
  4008                           
  4009                           ;main.c: 84: IOCB6 = 1;
  4010  0FFD  1716               	bsf	22,6	;volatile
  4011                           
  4012                           ;main.c: 85: RBIE = 1;
  4013  0FFE  158B               	bsf	11,3	;volatile
  4014  0FFF  0008               	return
  4015  1000                     __end_of_ioc_init:	
  4016                           
  4017                           	psect	text22
  4018  07D6                     __ptext22:	
  4019 ;; *************** function _io_init *****************
  4020 ;; Defined at:
  4021 ;;		line 17 in file "io.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		None
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4035 ;;      Params:         0       0       0       0       0
  4036 ;;      Locals:         0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0
  4038 ;;      Totals:         0       0       0       0       0
  4039 ;;Total ram usage:        0 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    2
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _io_init
  4051  07D6                     _io_init:	
  4052                           
  4053                           ;io.c: 18: TRISB5 = 0;
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _io_init: []
  4057  07D6  1683               	bsf	3,5	;RP0=1, select bank1
  4058  07D7  1303               	bcf	3,6	;RP1=0, select bank1
  4059  07D8  1286               	bcf	6,5	;volatile
  4060                           
  4061                           ;io.c: 19: ANS13 = 0;
  4062  07D9  1683               	bsf	3,5	;RP0=1, select bank3
  4063  07DA  1703               	bsf	3,6	;RP1=1, select bank3
  4064  07DB  1289               	bcf	9,5	;volatile
  4065                           
  4066                           ;io.c: 20: TRISB7 = 0;
  4067  07DC  1683               	bsf	3,5	;RP0=1, select bank1
  4068  07DD  1303               	bcf	3,6	;RP1=0, select bank1
  4069  07DE  1386               	bcf	6,7	;volatile
  4070                           
  4071                           ;io.c: 21: TRISB6 = 1;
  4072  07DF  1706               	bsf	6,6	;volatile
  4073                           
  4074                           ;io.c: 22: nRBPU = 0;
  4075  07E0  1381               	bcf	1,7	;volatile
  4076                           
  4077                           ;io.c: 23: WPUB6 = 1;
  4078  07E1  1715               	bsf	21,6	;volatile
  4079                           
  4080                           ;io.c: 24: IOCB6 = 1;
  4081  07E2  1716               	bsf	22,6	;volatile
  4082                           
  4083                           ;io.c: 25: RBIE = 1;
  4084  07E3  158B               	bsf	11,3	;volatile
  4085  07E4  0008               	return
  4086  07E5                     __end_of_io_init:	
  4087                           
  4088                           	psect	text23
  4089  0701                     __ptext23:	
  4090 ;; *************** function _adc_init_0 *****************
  4091 ;; Defined at:
  4092 ;;		line 13 in file "adc.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		wreg, status,2
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4106 ;;      Params:         0       0       0       0       0
  4107 ;;      Locals:         0       0       0       0       0
  4108 ;;      Temps:          0       2       0       0       0
  4109 ;;      Totals:         0       2       0       0       0
  4110 ;;Total ram usage:        2 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:    2
  4113 ;; This function calls:
  4114 ;;		Nothing
  4115 ;; This function is called by:
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _adc_init_0
  4122  0701                     _adc_init_0:	
  4123                           
  4124                           ;adc.c: 14: TRISA = 0b00000001;
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _adc_init_0: [wreg+status,2]
  4128  0701  3001               	movlw	1
  4129  0702  1683               	bsf	3,5	;RP0=1, select bank1
  4130  0703  1303               	bcf	3,6	;RP1=0, select bank1
  4131  0704  0085               	movwf	5	;volatile
  4132                           
  4133                           ;adc.c: 15: ANSEL = 0b00000001;
  4134  0705  3001               	movlw	1
  4135  0706  1683               	bsf	3,5	;RP0=1, select bank3
  4136  0707  1703               	bsf	3,6	;RP1=1, select bank3
  4137  0708  0088               	movwf	8	;volatile
  4138                           
  4139                           ;adc.c: 16: ANSELH = 0;
  4140  0709  0189               	clrf	9	;volatile
  4141                           
  4142                           ;adc.c: 17: ADCS0 = 0;
  4143  070A  1283               	bcf	3,5	;RP0=0, select bank0
  4144  070B  1303               	bcf	3,6	;RP1=0, select bank0
  4145  070C  131F               	bcf	31,6	;volatile
  4146                           
  4147                           ;adc.c: 18: ADCS1 = 1;
  4148  070D  179F               	bsf	31,7	;volatile
  4149                           
  4150                           ;adc.c: 19: VCFG0 = 0;
  4151  070E  1683               	bsf	3,5	;RP0=1, select bank1
  4152  070F  1303               	bcf	3,6	;RP1=0, select bank1
  4153  0710  121F               	bcf	31,4	;volatile
  4154                           
  4155                           ;adc.c: 20: VCFG1 = 0;
  4156  0711  129F               	bcf	31,5	;volatile
  4157                           
  4158                           ;adc.c: 21: CHS0 = 0;
  4159  0712  1283               	bcf	3,5	;RP0=0, select bank0
  4160  0713  1303               	bcf	3,6	;RP1=0, select bank0
  4161  0714  111F               	bcf	31,2	;volatile
  4162                           
  4163                           ;adc.c: 22: CHS1 = 0;
  4164  0715  119F               	bcf	31,3	;volatile
  4165                           
  4166                           ;adc.c: 23: CHS2 = 0;
  4167  0716  121F               	bcf	31,4	;volatile
  4168                           
  4169                           ;adc.c: 24: CHS3 = 0;
  4170  0717  129F               	bcf	31,5	;volatile
  4171                           
  4172                           ;adc.c: 25: ADFM = 0;
  4173  0718  1683               	bsf	3,5	;RP0=1, select bank1
  4174  0719  1303               	bcf	3,6	;RP1=0, select bank1
  4175  071A  139F               	bcf	31,7	;volatile
  4176                           
  4177                           ;adc.c: 26: ADON = 1;
  4178  071B  1283               	bcf	3,5	;RP0=0, select bank0
  4179  071C  1303               	bcf	3,6	;RP1=0, select bank0
  4180  071D  141F               	bsf	31,0	;volatile
  4181                           
  4182                           ;adc.c: 27: _delay((unsigned long)((10)*(20000000/4000.0)));
  4183  071E  3041               	movlw	65
  4184  071F  1283               	bcf	3,5	;RP0=0, select bank0
  4185  0720  1303               	bcf	3,6	;RP1=0, select bank0
  4186  0721  00A2               	movwf	??_adc_init_0+1
  4187  0722  30ED               	movlw	237
  4188  0723  00A1               	movwf	??_adc_init_0
  4189  0724                     u1777:	
  4190  0724  0BA1               	decfsz	??_adc_init_0,f
  4191  0725  2F24               	goto	u1777
  4192  0726  0BA2               	decfsz	??_adc_init_0+1,f
  4193  0727  2F24               	goto	u1777
  4194  0728  2F29               	nop2
  4195  0729  0008               	return
  4196  072A                     __end_of_adc_init_0:	
  4197                           
  4198                           	psect	text24
  4199  05DA                     __ptext24:	
  4200 ;; *************** function _isr *****************
  4201 ;; Defined at:
  4202 ;;		line 47 in file "main.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  portB           1    0[BANK0 ] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0, pclath, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4216 ;;      Params:         0       0       0       0       0
  4217 ;;      Locals:         0       1       0       0       0
  4218 ;;      Temps:          5       0       0       0       0
  4219 ;;      Totals:         5       1       0       0       0
  4220 ;;Total ram usage:        6 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    1
  4223 ;; This function calls:
  4224 ;;		_adc_read_0
  4225 ;;		_io_sw_pressed
  4226 ;;		_io_sw_read
  4227 ;; This function is called by:
  4228 ;;		Interrupt level 1
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _isr
  4234  05DA                     _isr:	
  4235                           
  4236                           ;main.c: 50: if (T0IE && T0IF) {
  4237  05DA  1A8B               	btfsc	11,5	;volatile
  4238  05DB  1D0B               	btfss	11,2	;volatile
  4239  05DC  2DEB               	goto	i1l1815
  4240                           
  4241                           ;main.c: 51: ADC = adc_read_0();
  4242  05DD  120A  118A  26AC  120A  118A  	fcall	_adc_read_0
  4243  05E2  0871               	movf	?_adc_read_0+1,w
  4244  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  4245  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  4246  05E5  00D1               	movwf	_ADC+1	;volatile
  4247  05E6  0870               	movf	?_adc_read_0,w
  4248  05E7  00D0               	movwf	_ADC	;volatile
  4249                           
  4250                           ;main.c: 52: TMR0 = 157;
  4251  05E8  309D               	movlw	157
  4252  05E9  0081               	movwf	1	;volatile
  4253                           
  4254                           ;main.c: 53: T0IF = 0;
  4255  05EA  110B               	bcf	11,2	;volatile
  4256  05EB                     i1l1815:	
  4257                           
  4258                           ;main.c: 54: }
  4259                           ;main.c: 56: if (RBIE && RBIF){
  4260  05EB  198B               	btfsc	11,3	;volatile
  4261  05EC  1C0B               	btfss	11,0	;volatile
  4262  05ED  2E08               	goto	i1l288
  4263                           
  4264                           ;main.c: 57: char portB = PORTB;
  4265  05EE  0806               	movf	6,w	;volatile
  4266  05EF  00F9               	movwf	??_isr
  4267  05F0  0879               	movf	??_isr,w
  4268  05F1  00A0               	movwf	isr@portB
  4269                           
  4270                           ;main.c: 59: io_sw_read(portB);
  4271  05F2  0820               	movf	isr@portB,w
  4272  05F3  120A  118A  276E  120A  118A  	fcall	_io_sw_read
  4273                           
  4274                           ;main.c: 60: if(io_sw_pressed()){
  4275  05F8  120A  118A  27F2  120A  118A  	fcall	_io_sw_pressed
  4276  05FD  0870               	movf	?_io_sw_pressed,w
  4277  05FE  0471               	iorwf	?_io_sw_pressed+1,w
  4278  05FF  1903               	btfsc	3,2
  4279  0600  2E07               	goto	i1l1827
  4280                           
  4281                           ;main.c: 61: RA1 = ~RA1;
  4282  0601  3002               	movlw	2
  4283  0602  1283               	bcf	3,5	;RP0=0, select bank0
  4284  0603  1303               	bcf	3,6	;RP1=0, select bank0
  4285  0604  0685               	xorwf	5,f
  4286                           
  4287                           ;main.c: 62: RB1 = ~RB1;
  4288  0605  3002               	movlw	2
  4289  0606  0686               	xorwf	6,f
  4290  0607                     i1l1827:	
  4291                           
  4292                           ;main.c: 63: }
  4293                           ;main.c: 65: RBIF = 0;
  4294  0607  100B               	bcf	11,0	;volatile
  4295  0608                     i1l288:	
  4296  0608  087D               	movf	??_isr+4,w
  4297  0609  1283               	bcf	3,5	;RP0=0, select bank0
  4298  060A  1303               	bcf	3,6	;RP1=0, select bank0
  4299  060B  00FF               	movwf	127
  4300  060C  087C               	movf	??_isr+3,w
  4301  060D  008A               	movwf	10
  4302  060E  087B               	movf	??_isr+2,w
  4303  060F  0084               	movwf	4
  4304  0610  0E7A               	swapf	(??_isr+1)^(0+-128),w
  4305  0611  0083               	movwf	3
  4306  0612  0EFE               	swapf	126,f
  4307  0613  0E7E               	swapf	126,w
  4308  0614  0009               	retfie
  4309  0615                     __end_of_isr:	
  4310                           
  4311                           	psect	intentry
  4312  0004                     __pintentry:	
  4313                           ;incstack = 0
  4314                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  4315                           
  4316  0004                     interrupt_function:	
  4317  007E                     saved_w	set	btemp
  4318  0004  00FE               	movwf	btemp
  4319  0005  0E03               	swapf	3,w
  4320  0006  00FA               	movwf	??_isr+1
  4321  0007  0804               	movf	4,w
  4322  0008  00FB               	movwf	??_isr+2
  4323  0009  080A               	movf	10,w
  4324  000A  00FC               	movwf	??_isr+3
  4325  000B  1283               	bcf	3,5	;RP0=0, select bank0
  4326  000C  1303               	bcf	3,6	;RP1=0, select bank0
  4327  000D  087F               	movf	btemp+1,w
  4328  000E  00FD               	movwf	??_isr+4
  4329  000F  120A  118A  2DDA   	ljmp	_isr
  4330                           
  4331                           	psect	text25
  4332  076E                     __ptext25:	
  4333 ;; *************** function _io_sw_read *****************
  4334 ;; Defined at:
  4335 ;;		line 49 in file "io.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  port            1    wreg     unsigned char 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  port            1    2[COMMON] unsigned char 
  4340 ;;  swNew           1    3[COMMON] unsigned char 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, status,2, status,0
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4350 ;;      Params:         0       0       0       0       0
  4351 ;;      Locals:         2       0       0       0       0
  4352 ;;      Temps:          2       0       0       0       0
  4353 ;;      Totals:         4       0       0       0       0
  4354 ;;Total ram usage:        4 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_isr
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _io_sw_read
  4365  076E                     _io_sw_read:	
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _io_sw_read: [wreg+status,2+status,0]
  4369                           ;io_sw_read@port stored from wreg
  4370  076E  00F2               	movwf	io_sw_read@port
  4371                           
  4372                           ;io.c: 50: static char swOld = 1;
  4373                           ;io.c: 51: char swNew = (port & 0b01000000) >> 6;
  4374  076F  0872               	movf	io_sw_read@port,w
  4375  0770  00F0               	movwf	??_io_sw_read
  4376  0771  3006               	movlw	6
  4377  0772                     u129_25:	
  4378  0772  1003               	clrc
  4379  0773  0CF0               	rrf	??_io_sw_read,f
  4380  0774  3EFF               	addlw	-1
  4381  0775  1D03               	skipz
  4382  0776  2F72               	goto	u129_25
  4383  0777  0870               	movf	??_io_sw_read,w
  4384  0778  3901               	andlw	1
  4385  0779  00F1               	movwf	??_io_sw_read+1
  4386  077A  0871               	movf	??_io_sw_read+1,w
  4387  077B  00F3               	movwf	io_sw_read@swNew
  4388                           
  4389                           ;io.c: 52: if (swNew == 0 && swOld == 1) {
  4390  077C  0873               	movf	io_sw_read@swNew,w
  4391  077D  1D03               	btfss	3,2
  4392  077E  2F84               	goto	i1l1575
  4393  077F  1283               	bcf	3,5	;RP0=0, select bank0
  4394  0780  1303               	bcf	3,6	;RP1=0, select bank0
  4395  0781  0353               	decf	io_sw_read@swOld,w
  4396  0782  1903               	btfsc	3,2
  4397                           
  4398                           ;io.c: 53: swPressed = 1;
  4399  0783  1452               	bsf	_swPressed/(0+8),_swPressed& (0+7)	;volatile
  4400  0784                     i1l1575:	
  4401                           
  4402                           ;io.c: 54: }
  4403                           ;io.c: 55: swOld = swNew;
  4404  0784  0873               	movf	io_sw_read@swNew,w
  4405  0785  00F0               	movwf	??_io_sw_read
  4406  0786  0870               	movf	??_io_sw_read,w
  4407  0787  1283               	bcf	3,5	;RP0=0, select bank0
  4408  0788  1303               	bcf	3,6	;RP1=0, select bank0
  4409  0789  00D3               	movwf	io_sw_read@swOld
  4410  078A  0008               	return
  4411  078B                     __end_of_io_sw_read:	
  4412                           
  4413                           	psect	text26
  4414  07F2                     __ptext26:	
  4415 ;; *************** function _io_sw_pressed *****************
  4416 ;; Defined at:
  4417 ;;		line 58 in file "io.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;		None
  4422 ;; Return value:  Size  Location     Type
  4423 ;;                  2    0[COMMON] int 
  4424 ;; Registers used:
  4425 ;;		wreg, status,2
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4431 ;;      Params:         2       0       0       0       0
  4432 ;;      Locals:         0       0       0       0       0
  4433 ;;      Temps:          0       0       0       0       0
  4434 ;;      Totals:         2       0       0       0       0
  4435 ;;Total ram usage:        2 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_isr
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _io_sw_pressed
  4446  07F2                     _io_sw_pressed:	
  4447                           
  4448                           ;io.c: 59: if (swPressed) {
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _io_sw_pressed: [wreg+status,2]
  4452  07F2  1283               	bcf	3,5	;RP0=0, select bank0
  4453  07F3  1303               	bcf	3,6	;RP1=0, select bank0
  4454  07F4  1C52               	btfss	_swPressed/(0+8),_swPressed& (0+7)	;volatile
  4455  07F5  2FFC               	goto	i1l1585
  4456                           
  4457                           ;io.c: 60: swPressed = 0;
  4458  07F6  1052               	bcf	_swPressed/(0+8),_swPressed& (0+7)	;volatile
  4459                           
  4460                           ;io.c: 61: return 1;
  4461  07F7  3001               	movlw	1
  4462  07F8  00F0               	movwf	?_io_sw_pressed
  4463  07F9  3000               	movlw	0
  4464  07FA  00F1               	movwf	?_io_sw_pressed+1
  4465  07FB  0008               	return
  4466  07FC                     i1l1585:	
  4467                           
  4468                           ;io.c: 62: }
  4469                           ;io.c: 63: return 0;
  4470  07FC  01F0               	clrf	?_io_sw_pressed
  4471  07FD  01F1               	clrf	?_io_sw_pressed+1
  4472  07FE  0008               	return
  4473  07FF                     __end_of_io_sw_pressed:	
  4474                           
  4475                           	psect	text27
  4476  06AC                     __ptext27:	
  4477 ;; *************** function _adc_read_0 *****************
  4478 ;; Defined at:
  4479 ;;		line 31 in file "adc.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  result          2    7[COMMON] int 
  4484 ;; Return value:  Size  Location     Type
  4485 ;;                  2    0[COMMON] unsigned int 
  4486 ;; Registers used:
  4487 ;;		wreg, status,2, status,0
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4493 ;;      Params:         2       0       0       0       0
  4494 ;;      Locals:         2       0       0       0       0
  4495 ;;      Temps:          5       0       0       0       0
  4496 ;;      Totals:         9       0       0       0       0
  4497 ;;Total ram usage:        9 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; This function calls:
  4500 ;;		Nothing
  4501 ;; This function is called by:
  4502 ;;		_isr
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           
  4507                           ;psect for function _adc_read_0
  4508  06AC                     _adc_read_0:	
  4509                           
  4510                           ;adc.c: 32: GO = 1;
  4511                           
  4512                           ;incstack = 0
  4513                           ; Regs used in _adc_read_0: [wreg+status,2+status,0]
  4514  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  4515  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  4516  06AE  149F               	bsf	31,1	;volatile
  4517  06AF                     i1l40:	
  4518                           ;adc.c: 33: while(GO);
  4519                           
  4520  06AF  189F               	btfsc	31,1	;volatile
  4521  06B0  2EAF               	goto	i1l40
  4522                           
  4523                           ;adc.c: 34: int result = (ADRESH<<2)+(ADRESL>>6);
  4524  06B1  1683               	bsf	3,5	;RP0=1, select bank1
  4525  06B2  1303               	bcf	3,6	;RP1=0, select bank1
  4526  06B3  081E               	movf	30,w	;volatile
  4527  06B4  00F2               	movwf	??_adc_read_0
  4528  06B5  3006               	movlw	6
  4529  06B6                     u128_25:	
  4530  06B6  1003               	clrc
  4531  06B7  0CF2               	rrf	??_adc_read_0,f
  4532  06B8  3EFF               	addlw	-1
  4533  06B9  1D03               	skipz
  4534  06BA  2EB6               	goto	u128_25
  4535  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  4536  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  4537  06BD  081E               	movf	30,w	;volatile
  4538  06BE  00F3               	movwf	??_adc_read_0+1
  4539  06BF  01F4               	clrf	??_adc_read_0+2
  4540  06C0  1003               	clrc
  4541  06C1  0DF3               	rlf	??_adc_read_0+1,f
  4542  06C2  0DF4               	rlf	??_adc_read_0+2,f
  4543  06C3  1003               	clrc
  4544  06C4  0DF3               	rlf	??_adc_read_0+1,f
  4545  06C5  0DF4               	rlf	??_adc_read_0+2,f
  4546  06C6  0872               	movf	??_adc_read_0,w
  4547  06C7  0773               	addwf	??_adc_read_0+1,w
  4548  06C8  00F5               	movwf	??_adc_read_0+3
  4549  06C9  3000               	movlw	0
  4550  06CA  1803               	skipnc
  4551  06CB  3001               	movlw	1
  4552  06CC  0774               	addwf	??_adc_read_0+2,w
  4553  06CD  00F6               	movwf	??_adc_read_0+4
  4554  06CE  0875               	movf	??_adc_read_0+3,w
  4555  06CF  00F7               	movwf	adc_read_0@result
  4556  06D0  0876               	movf	??_adc_read_0+4,w
  4557  06D1  00F8               	movwf	adc_read_0@result+1
  4558                           
  4559                           ;adc.c: 35: return result;
  4560  06D2  0878               	movf	adc_read_0@result+1,w
  4561  06D3  00F1               	movwf	?_adc_read_0+1
  4562  06D4  0877               	movf	adc_read_0@result,w
  4563  06D5  00F0               	movwf	?_adc_read_0
  4564  06D6  0008               	return
  4565  06D7                     __end_of_adc_read_0:	
  4566  007E                     btemp	set	126	;btemp
  4567  007E                     wtemp0	set	126


Data Sizes:
    Strings     27
    Constant    10
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     48      52
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 9
		 -> main@message(BANK0[9]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    pwm_calc@pwm_dc2	PTR int  size(1) Largest target is 2
		 -> main@pwm_dc2(BANK0[2]), 

    pwm_calc@pwm_dc1	PTR int  size(1) Largest target is 2
		 -> main@pwm_dc1(BANK0[2]), 

    lcd_puts@s	PTR const unsigned char  size(2) Largest target is 9
		 -> main@message(BANK0[9]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_adc_read_0

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _pwm_set->___awdiv
    _pwm_calc->___awdiv
    ___awdiv->___wmul
    _lcd_puts->_lcd_write
    _lcd_init->_lcd_write
    _lcd_goto->_lcd_write
    _lcd_cursor->_lcd_write
    _lcd_clear->_lcd_write
    _lcd_write->_lcd_write_nibble

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    9129
                                             30 BANK0     18    18      0
                         _adc_init_0
                            _io_init
                           _ioc_init
                          _lcd_clear
                         _lcd_cursor
                           _lcd_goto
                           _lcd_init
                           _lcd_puts
                           _pwm_calc
                           _pwm_init
                            _pwm_set
                            _sprintf
                            _t0_init
 ---------------------------------------------------------------------------------
 (1) _t0_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    20      3    2409
                                             15 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              9 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _pwm_set                                              9     5      4    2059
                                             16 BANK0      9     5      4
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwm_calc                                             8     4      4    2962
                                             16 BANK0      8     4      4
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     732
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1708
                                              7 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2     433
                                              5 BANK0      2     0      2
                     _LCD_RS_SetHigh
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _LCD_RS_SetHigh                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     132
                                              5 BANK0      2     2      0
                      _LCD_RS_SetLow
                      _LCD_RW_SetLow
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _LCD_RW_SetLow                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_goto                                             1     1      0     154
                                              5 BANK0      1     1      0
                      _LCD_RS_SetLow
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_cursor                                           2     0      2     218
                                              5 BANK0      2     0      2
                      _LCD_RS_SetLow
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            2     2      0     132
                                              5 BANK0      2     2      0
                      _LCD_RS_SetLow
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_write                                            2     2      0     132
                                              3 BANK0      2     2      0
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_write_nibble                                     2     2      0      88
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_RS_SetLow                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ioc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _io_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init_0                                           2     2      0       0
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  6     6      0     113
                                              9 COMMON     5     5      0
                                              0 BANK0      1     1      0
                         _adc_read_0
                      _io_sw_pressed
                         _io_sw_read
 ---------------------------------------------------------------------------------
 (5) _io_sw_read                                           4     4      0      67
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (5) _io_sw_pressed                                        2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (5) _adc_read_0                                           9     7      2      23
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_init_0
   _io_init
   _ioc_init
   _lcd_clear
     _LCD_RS_SetLow
     _lcd_write
       _lcd_write_nibble
   _lcd_cursor
     _LCD_RS_SetLow
     _lcd_write
       _lcd_write_nibble
   _lcd_goto
     _LCD_RS_SetLow
     _lcd_write
       _lcd_write_nibble
   _lcd_init
     _LCD_RS_SetLow
     _LCD_RW_SetLow
     _lcd_write
       _lcd_write_nibble
   _lcd_puts
     _LCD_RS_SetHigh
     _lcd_write
       _lcd_write_nibble
   _pwm_calc
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _pwm_init
   _pwm_set
     ___awdiv
       ___wmul (ARG)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _t0_init

 _isr (ROOT)
   _adc_read_0
   _io_sw_pressed
   _io_sw_read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     30      34       5       65.0%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      42      12        0.0%
ABS                  0      0      42       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 22 16:15:48 2020

                        pc 0002                __CFG_CP$OFF 0000                         _GO 00F9  
             ___awdiv@sign 002D                         fsr 0004        ___wmul@multiplicand 0023  
           ?_LCD_RS_SetLow 0070                        l343 02F6                        _ADC 0050  
                      l337 06A6                        l381 00FD                        l476 0736  
                      _GIE 005F                        _RA1 0029                        _RA2 002A  
                      _RB0 0030                        _RB1 0031                        _RA3 002B  
                      _RA4 002C                        _RB2 0032                        _RC0 0038  
                      _RB5 0035                        _RC3 003B                        _RC4 003C  
                      _RB7 0037                        _RC5 003D                        _PS0 0408  
                      _PR2 0092                        _PS1 0409                        _PS2 040A  
             __CFG_CPD$OFF 0000                        _PSA 040B                        u920 0583  
                      u904 0575                        u915 0578                        u860 0561  
                      u950 0594                        u934 0586                        u945 0589  
                      u890 0572                        u885 0567                        u975 0753  
          io_sw_read@swOld 0053            io_sw_read@swNew 0073                        _isr 05DA  
           ?_LCD_RW_SetLow 0070                        fsr0 0004                        indf 0000  
              lcd_goto@pos 0025               __CFG_IESO$ON 0000               __CFG_FOSC$EC 0000  
          ?_LCD_RS_SetHigh 0070               __CFG_LVP$OFF 0000                       l1503 05CA  
                     l1423 07C4                       l1521 0660                       l1611 07B1  
                     l1507 05D5                       l1429 072E                       l1701 03FE  
                     l1525 066E                       l1455 04C0                       l1711 0489  
                     l1519 0652                       l1481 04FF                       l1473 04EC  
                     l1465 04C8                       l1449 04B5                       l1529 0679  
                     l1721 0049                       l1395 0564                       l1467 04D6  
                     l1397 0597                       l1477 04F7                       l1495 05A6  
                     l1727 005E                       l1497 05B4                       l1761 00EF  
                     l1737 0098                       l1691 0363                       l1771 0120  
                     l1755 00CE                       l1739 00AF                       l1851 01ED  
                     l1773 0124                       l1749 00C8                       l1599 06DC  
                     l1679 02E4                       l1863 0251                       l1793 014C  
                     l1785 0148                       l1769 011C                       l1779 0139  
                     l1795 0027                       l1859 022E                       l1797 018F  
                     _ADFM 04FF                       ?_isr 0070                       _ADON 00F8  
                     _CHS0 00FA                       _CHS1 00FB                       _CHS2 00FC  
                     _CHS3 00FD                       STR_1 062F                       STR_2 0637  
                     _ANS2 0C42                       STR_3 063E                       _ANS3 0C43  
                     STR_4 0644                       _ANS8 0C48                       _T0IE 005D  
                     _T0IF 005A                       _T0CS 040D                       u1015 0737  
                     u1105 04E3                       u1025 073E                       u1115 04ED  
                     u1225 0655                       u1075 04CB                       u1155 05A9  
                     u1245 0666                       u1095 04D7                       u1175 05B5  
                     u1255 066F                       u1185 05C1                       u1450 0486  
                     u1435 0408                       u1195 05CB                       u1445 0443  
                     u1470 04A5                       u1545 00E5                       u1707 01E2  
                     u1717 028D                       u1727 02C4                       u1737 052D  
                     u1585 010C                       u1747 053D                       u1757 079C  
                     u1767 076A                       u1777 0724                       _RBIE 005B  
                     i1l40 06AF                       _RBIF 0058                       _TMR0 0001  
                     _WPUB 0095                main@message 0043               __CFG_WRT$OFF 0000  
            __CFG_FCMEN$ON 0000          pwm_calc@adc_value 0030                       _main 0196  
                     btemp 007E              __CFG_BOREN$ON 0000                main@pwm_dc1 004C  
              main@pwm_dc2 004E                       start 0012               lcd_cursor@on 0025  
            __CFG_MCLRE$ON 0000                      ??_isr 0079            __end_of_t0_init 07F2  
                    _DC2B0 00EC                      _DC2B1 00ED                      _ADCS0 00FE  
                    _ADCS1 00FF                      ?_main 0070            __end_of___awdiv 0504  
                    _ANS12 0C4C                      _ANS13 0C4D              __CFG_WDTE$OFF 0000  
                    _ANSEL 0188            ___awdiv@divisor 0027                      _IOCB6 04B6  
          __end_of___lwdiv 05DA            __end_of___lwmod 067E                      i1l288 0608  
          ___awdiv@counter 002C                      _VCFG0 04FC                      _VCFG1 04FD  
                    _PORTB 0006                      _TRISA 0085                      _TRISC 0087  
                    _WPUB6 04AE                      _nRBPU 040F            __end_of_io_init 07E5  
          __end_of_dpowers 062F            __end_of_isdigit 07C6                      main@R 0041  
                    pclath 000A            __end_of_pwm_set 04A9                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0196            __initialization 0015  
             __end_of_main 02CB            ??_LCD_RS_SetLow 0021                     ??_main 003E  
          ??_LCD_RW_SetLow 0021     __size_of_io_sw_pressed 000D                     _ADRESH 001E  
                   _ADRESL 009E                     _CCPR1L 0015                     _CCPR2L 001B  
         ___awdiv@dividend 0029                     _ANSELH 0189                     i1l1575 0784  
                   i1l1815 05EB                     i1l1585 07FC                     i1l1827 0607  
                   u128_25 06B6                     u129_25 0772                     _TMR2IF 0061  
                   _TMR2ON 0092                     _TRISA1 0429                     _TRISB0 0430  
                   _TRISA2 042A                     _TRISB1 0431                     _TRISA3 042B  
                   _TRISA4 042C                     _TRISB2 0432                     _TRISB5 0435  
                   _TRISB6 0436                     _TRISB7 0437             __CFG_PWRTE$OFF 0000  
         __end_of_lcd_init 0558           __end_of_lcd_goto 07D6                  ??_t0_init 0021  
         __end_of_lcd_puts 0701                     ___wmul 072A                  ??___awdiv 002B  
         __end_of_ioc_init 1000   __end_of_lcd_write_nibble 059C                  ??___lwdiv 0025  
                ??___lwmod 002D           ___awdiv@quotient 002E          lcd_write_nibble@c 0022  
                ??_io_init 0021                  ??_isdigit 0021                     saved_w 007E  
         __end_of_pwm_calc 03EF           __end_of_pwm_init 06AC                  ??_pwm_set 0034  
                ??_sprintf 0032           adc_read_0@result 0077    __end_of__initialization 001C  
            _io_sw_pressed 07F2             __pcstackCOMMON 0070               __pidataBANK0 07FF  
               _adc_init_0 0701                 _adc_read_0 06AC           ??_LCD_RS_SetHigh 0021  
       __size_of_lcd_clear 0016         __size_of_lcd_write 0021               sprintf@width 003A  
               __pbssBANK0 0050             ?_io_sw_pressed 0070                 __pmaintext 0196  
                  ?___wmul 0021                 __pintentry 0004                 _lcd_cursor 07A1  
                ?_lcd_init 0070                  ?_lcd_goto 0070                  ?_lcd_puts 0025  
               __stringtab 0615                  ?_ioc_init 0070          __end_of_lcd_clear 07A1  
                  _t0_init 07E5                 _io_sw_read 076E                    ___awdiv 04A9  
              ?_adc_init_0 0070                ?_adc_read_0 0070                  ?_pwm_calc 0030  
        __end_of_lcd_write 076E            __size_of___wmul 0023                  ?_pwm_init 0070  
                  ___lwdiv 059C                    ___lwmod 064A                    __ptext1 07E5  
                  __ptext2 0020                    __ptext3 07B6                    __ptext4 064A  
                  __ptext5 059C                    __ptext6 03EF                    __ptext7 067E  
                  __ptext8 02CB                    __ptext9 072A                    _io_init 07D6  
                  _dpowers 0625                  _T2CONbits 0012                    _isdigit 07B6  
             __size_of_isr 003B                    _pwm_set 03EF                    _sprintf 0020  
               ??_lcd_init 0025                 ??_lcd_goto 0025            ??_io_sw_pressed 0072  
               ??_lcd_puts 0027       end_of_initialization 001C                 ??_ioc_init 0021  
               ??_pwm_calc 0034                 ??_pwm_init 0021          ?_lcd_write_nibble 0070  
    __end_of_LCD_RS_SetLow 0FF1         ??_lcd_write_nibble 0021      __end_of_LCD_RW_SetLow 0FF5  
              ?_lcd_cursor 0025        __size_of_adc_init_0 0029        __size_of_adc_read_0 002B  
           io_sw_read@port 0072                _CCP1CONbits 0017                _CCP2CONbits 001D  
               lcd_write@c 0024                ?_io_sw_read 0070             __end_of___wmul 074D  
            __pbitbssBANK0 0290        start_initialization 0015                __end_of_isr 0615  
      __size_of_lcd_cursor 0015                   ??___wmul 0025                __pdataBANK0 0053  
                ___latbits 0002              __pcstackBANK0 0020        __size_of_io_sw_read 001D  
        __size_of_lcd_init 0054          __size_of_lcd_goto 0010                sprintf@flag 0037  
        __size_of_lcd_puts 002A                sprintf@prec 0036          __size_of_ioc_init 0007  
         ___lwdiv@dividend 0023                   ?_t0_init 0070               ??_adc_init_0 0021  
             ??_adc_read_0 0072                   ?___awdiv 0027                   ?___lwdiv 0021  
                 ?___lwmod 0029                  _lcd_clear 078B          __size_of_pwm_calc 0124  
                __pstrings 0615          __size_of_pwm_init 002E                  _lcd_write 074D  
                 ?_io_init 0070                   ?_isdigit 0070           ___lwdiv@quotient 0026  
                 ?_pwm_set 0030                   ?_sprintf 002F             pwm_set@pwm_dc1 0030  
           pwm_set@pwm_dc2 0032    __size_of_LCD_RS_SetHigh 0004         __end_of_adc_init_0 072A  
       __end_of_adc_read_0 06D7          interrupt_function 0004             ___wmul@product 0025  
                _swPressed 0290                 ?_lcd_clear 0070                __stringbase 0624  
               ?_lcd_write 0070          ___wmul@multiplier 0021                  lcd_puts@s 0025  
             ??_lcd_cursor 0027  __size_of_lcd_write_nibble 0044      __end_of_io_sw_pressed 07FF  
          pwm_calc@pwm_dc1 0032            pwm_calc@pwm_dc2 0033               ??_io_sw_read 0070  
         __size_of_t0_init 000D         __end_of_lcd_cursor 07B6           __size_of___awdiv 005B  
         __size_of___lwdiv 003E           __size_of___lwmod 0034         __end_of__stringtab 0625  
              _isdigit$549 0021                 sprintf@val 0038           __size_of_io_init 000F  
         __size_of_isdigit 0010            ___lwdiv@divisor 0021            ___lwdiv@counter 0028  
                 __ptext10 04A9                   __ptext11 06D7                   __ptext20 0FED  
                 __ptext12 0FF5                   __ptext21 0FF9                   __ptext13 0504  
                 __ptext22 07D6                   __ptext14 0FF1                   __ptext23 0701  
                 __ptext15 07C6                   __ptext24 05DA                   __ptext16 07A1  
                 __ptext25 076E                   __ptext17 078B                   __ptext26 07F2  
                 __ptext18 074D                   __ptext27 06AC                   __ptext19 0558  
        __CFG_BOR4V$BOR40V 0000                   _lcd_init 0504                   _lcd_goto 07C6  
         __size_of_pwm_set 00BA                   _lcd_puts 06D7           __size_of_sprintf 0176  
       __end_of_io_sw_read 078B                   _ioc_init 0FF9              __size_of_main 0135  
   __size_of_LCD_RS_SetLow 0004     __size_of_LCD_RW_SetLow 0004                   _pwm_calc 02CB  
                 _pwm_init 067E                ??_lcd_clear 0025                ??_lcd_write 0023  
                 isr@portB 0020                   isdigit@c 0022             _LCD_RS_SetHigh 0FF5  
                 intlevel1 0000                  sprintf@ap 0035                  sprintf@sp 003C  
         ___lwmod@dividend 002B                  stringcode 061F              _LCD_RS_SetLow 0FED  
                 sprintf@c 003D                   sprintf@f 002F            ___lwmod@divisor 0029  
          ___lwmod@counter 002E              _LCD_RW_SetLow 0FF1                   stringdir 061F  
                 stringtab 0615     __end_of_LCD_RS_SetHigh 0FF9           _lcd_write_nibble 0558  
              _pwm_set$814 0037  
