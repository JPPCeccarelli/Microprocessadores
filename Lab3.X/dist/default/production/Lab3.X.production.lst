

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jun 19 15:59:43 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 1.45
    35                           ; Generated 16/11/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F886 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  000E                     	;# 
    83  000F                     	;# 
    84  0010                     	;# 
    85  0011                     	;# 
    86  0012                     	;# 
    87  0013                     	;# 
    88  0014                     	;# 
    89  0015                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0017                     	;# 
    93  0018                     	;# 
    94  0019                     	;# 
    95  001A                     	;# 
    96  001B                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  001D                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  0081                     	;# 
   103  0085                     	;# 
   104  0086                     	;# 
   105  0087                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  000E                     	;# 
   159  000F                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0013                     	;# 
   164  0014                     	;# 
   165  0015                     	;# 
   166  0015                     	;# 
   167  0016                     	;# 
   168  0017                     	;# 
   169  0018                     	;# 
   170  0019                     	;# 
   171  001A                     	;# 
   172  001B                     	;# 
   173  001B                     	;# 
   174  001C                     	;# 
   175  001D                     	;# 
   176  001E                     	;# 
   177  001F                     	;# 
   178  0081                     	;# 
   179  0085                     	;# 
   180  0086                     	;# 
   181  0087                     	;# 
   182  0089                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  008F                     	;# 
   187  0090                     	;# 
   188  0091                     	;# 
   189  0092                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  0105                     	;# 
   206  0107                     	;# 
   207  0108                     	;# 
   208  0109                     	;# 
   209  010C                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  010F                     	;# 
   214  0185                     	;# 
   215  0187                     	;# 
   216  0188                     	;# 
   217  0189                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  0000                     	;# 
   221  0001                     	;# 
   222  0002                     	;# 
   223  0003                     	;# 
   224  0004                     	;# 
   225  0005                     	;# 
   226  0006                     	;# 
   227  0007                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0089                     	;# 
   259  008C                     	;# 
   260  008D                     	;# 
   261  008E                     	;# 
   262  008F                     	;# 
   263  0090                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0094                     	;# 
   270  0095                     	;# 
   271  0096                     	;# 
   272  0097                     	;# 
   273  0098                     	;# 
   274  0099                     	;# 
   275  009A                     	;# 
   276  009B                     	;# 
   277  009C                     	;# 
   278  009D                     	;# 
   279  009E                     	;# 
   280  009F                     	;# 
   281  0105                     	;# 
   282  0107                     	;# 
   283  0108                     	;# 
   284  0109                     	;# 
   285  010C                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  010F                     	;# 
   290  0185                     	;# 
   291  0187                     	;# 
   292  0188                     	;# 
   293  0189                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0009                     	;# 
   305  000A                     	;# 
   306  000B                     	;# 
   307  000C                     	;# 
   308  000D                     	;# 
   309  000E                     	;# 
   310  000E                     	;# 
   311  000F                     	;# 
   312  0010                     	;# 
   313  0011                     	;# 
   314  0012                     	;# 
   315  0013                     	;# 
   316  0014                     	;# 
   317  0015                     	;# 
   318  0015                     	;# 
   319  0016                     	;# 
   320  0017                     	;# 
   321  0018                     	;# 
   322  0019                     	;# 
   323  001A                     	;# 
   324  001B                     	;# 
   325  001B                     	;# 
   326  001C                     	;# 
   327  001D                     	;# 
   328  001E                     	;# 
   329  001F                     	;# 
   330  0081                     	;# 
   331  0085                     	;# 
   332  0086                     	;# 
   333  0087                     	;# 
   334  0089                     	;# 
   335  008C                     	;# 
   336  008D                     	;# 
   337  008E                     	;# 
   338  008F                     	;# 
   339  0090                     	;# 
   340  0091                     	;# 
   341  0092                     	;# 
   342  0093                     	;# 
   343  0093                     	;# 
   344  0093                     	;# 
   345  0094                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  009F                     	;# 
   357  0105                     	;# 
   358  0107                     	;# 
   359  0108                     	;# 
   360  0109                     	;# 
   361  010C                     	;# 
   362  010C                     	;# 
   363  010D                     	;# 
   364  010E                     	;# 
   365  010F                     	;# 
   366  0185                     	;# 
   367  0187                     	;# 
   368  0188                     	;# 
   369  0189                     	;# 
   370  018C                     	;# 
   371  018D                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0009                     	;# 
   381  000A                     	;# 
   382  000B                     	;# 
   383  000C                     	;# 
   384  000D                     	;# 
   385  000E                     	;# 
   386  000E                     	;# 
   387  000F                     	;# 
   388  0010                     	;# 
   389  0011                     	;# 
   390  0012                     	;# 
   391  0013                     	;# 
   392  0014                     	;# 
   393  0015                     	;# 
   394  0015                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001B                     	;# 
   402  001C                     	;# 
   403  001D                     	;# 
   404  001E                     	;# 
   405  001F                     	;# 
   406  0081                     	;# 
   407  0085                     	;# 
   408  0086                     	;# 
   409  0087                     	;# 
   410  0089                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  008F                     	;# 
   415  0090                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0093                     	;# 
   419  0093                     	;# 
   420  0093                     	;# 
   421  0094                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0098                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  009F                     	;# 
   433  0105                     	;# 
   434  0107                     	;# 
   435  0108                     	;# 
   436  0109                     	;# 
   437  010C                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  010F                     	;# 
   442  0185                     	;# 
   443  0187                     	;# 
   444  0188                     	;# 
   445  0189                     	;# 
   446  018C                     	;# 
   447  018D                     	;# 
   448                           
   449                           	psect	idataBANK0
   450  04C4                     __pidataBANK0:	
   451                           
   452                           ;initializer for io_sw_read@swOld
   453  04C4  3401               	retlw	1
   454                           
   455                           	psect	strings
   456  03D1                     __pstrings:	
   457  03D1                     stringtab:	
   458  03D1                     __stringtab:	
   459                           
   460                           ;	String table - string pointers are 1 byte each
   461  03D1  1BFF               	btfsc	btemp+1,7
   462  03D2  2BDB               	ljmp	stringcode
   463  03D3  1383               	bcf	3,7
   464  03D4  187F               	btfsc	btemp+1,0
   465  03D5  1783               	bsf	3,7
   466  03D6  0800               	movf	0,w
   467  03D7  0A84               	incf	4,f
   468  03D8  1903               	skipnz
   469  03D9  0AFF               	incf	btemp+1,f
   470  03DA  0008               	return
   471  03DB                     stringcode:	
   472  03DB                     stringdir:	
   473  03DB  3003               	movlw	high stringdir
   474  03DC  008A               	movwf	10
   475  03DD  0804               	movf	4,w
   476  03DE  0A84               	incf	4,f
   477  03DF  0782               	addwf	2,f
   478  03E0                     __stringbase:	
   479  03E0  3400               	retlw	0
   480  03E1                     __end_of__stringtab:	
   481  03E1                     _dpowers:	
   482  03E1  3401               	retlw	1
   483  03E2  3400               	retlw	0
   484  03E3  340A               	retlw	10
   485  03E4  3400               	retlw	0
   486  03E5  3464               	retlw	100
   487  03E6  3400               	retlw	0
   488  03E7  34E8               	retlw	232
   489  03E8  3403               	retlw	3
   490  03E9  3410               	retlw	16
   491  03EA  3427               	retlw	39
   492  03EB                     __end_of_dpowers:	
   493  0001                     _TMR0	set	1
   494  001E                     _ADRESH	set	30
   495  005F                     _GIE	set	95
   496  005A                     _T0IF	set	90
   497  005D                     _T0IE	set	93
   498  0030                     _RB0	set	48
   499  003D                     _RC5	set	61
   500  003C                     _RC4	set	60
   501  003B                     _RC3	set	59
   502  0038                     _RC0	set	56
   503  002B                     _RA3	set	43
   504  002A                     _RA2	set	42
   505  0037                     _RB7	set	55
   506  0035                     _RB5	set	53
   507  005B                     _RBIE	set	91
   508  0031                     _RB1	set	49
   509  0032                     _RB2	set	50
   510  002C                     _RA4	set	44
   511  00F9                     _GO	set	249
   512  00F8                     _ADON	set	248
   513  00FD                     _CHS3	set	253
   514  00FC                     _CHS2	set	252
   515  00FB                     _CHS1	set	251
   516  00FA                     _CHS0	set	250
   517  00FF                     _ADCS1	set	255
   518  00FE                     _ADCS0	set	254
   519  0087                     _TRISC	set	135
   520  009E                     _ADRESL	set	158
   521  0085                     _TRISA	set	133
   522  040A                     _PS2	set	1034
   523  0409                     _PS1	set	1033
   524  0408                     _PS0	set	1032
   525  040B                     _PSA	set	1035
   526  040D                     _T0CS	set	1037
   527  042A                     _TRISA2	set	1066
   528  042B                     _TRISA3	set	1067
   529  0430                     _TRISB0	set	1072
   530  04B6                     _IOCB6	set	1206
   531  04AE                     _WPUB6	set	1198
   532  040F                     _nRBPU	set	1039
   533  0436                     _TRISB6	set	1078
   534  0437                     _TRISB7	set	1079
   535  0435                     _TRISB5	set	1077
   536  0431                     _TRISB1	set	1073
   537  0432                     _TRISB2	set	1074
   538  042C                     _TRISA4	set	1068
   539  04FF                     _ADFM	set	1279
   540  04FD                     _VCFG1	set	1277
   541  04FC                     _VCFG0	set	1276
   542  0189                     _ANSELH	set	393
   543  0188                     _ANSEL	set	392
   544  0C42                     _ANS2	set	3138
   545  0C43                     _ANS3	set	3139
   546  0C4D                     _ANS13	set	3149
   547  0C4C                     _ANS12	set	3148
   548  0C48                     _ANS8	set	3144
   549  03EB                     STR_1:	
   550  03EB  3454               	retlw	84	;'T'
   551  03EC  3435               	retlw	53	;'5'
   552  03ED  3447               	retlw	71	;'G'
   553  03EE  3437               	retlw	55	;'7'
   554  03EF  342D               	retlw	45	;'-'
   555  03F0  344A               	retlw	74	;'J'
   556  03F1  3456               	retlw	86	;'V'
   557  03F2  3400               	retlw	0
   558  03F3                     STR_2:	
   559  03F3  3425               	retlw	37	;'%'
   560  03F4  3430               	retlw	48	;'0'
   561  03F5  3433               	retlw	51	;'3'
   562  03F6  3464               	retlw	100	;'d'
   563  03F7  3400               	retlw	0
   564  03F3                     
   565                           ; #config settings
   566  0000                     
   567                           	psect	cinit
   568  0015                     start_initialization:	
   569  0015                     __initialization:	
   570                           
   571                           ; Initialize objects allocated to BANK0
   572  0015  120A  118A  24C4   	fcall	__pidataBANK0	;fetch initializer
   573  0018  00CF               	movwf	__pdataBANK0& (0+127)
   574                           
   575                           ; Clear objects allocated to BANK0
   576  0019  01CC               	clrf	__pbssBANK0& (0+127)
   577  001A  01CD               	clrf	(__pbssBANK0+1)& (0+127)
   578                           
   579                           ; Clear objects allocated to BITBANK0
   580  001B  01CE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   581  001C                     end_of_initialization:	
   582                           ;End of C runtime variable initialization code
   583                           
   584  001C                     __end_of__initialization:	
   585  001C  0183               	clrf	3
   586  001D  120A  118A  29CE   	ljmp	_main	;jump to C main() function
   587                           
   588                           	psect	bitbssBANK0
   589  0270                     __pbitbssBANK0:	
   590  0270                     _swPressed:	
   591  0270                     	ds	1
   592                           
   593                           	psect	bssBANK0
   594  004C                     __pbssBANK0:	
   595  004C                     _ADC:	
   596  004C                     	ds	2
   597                           
   598                           	psect	dataBANK0
   599  004F                     __pdataBANK0:	
   600  004F                     io_sw_read@swOld:	
   601  004F                     	ds	1
   602                           
   603                           	psect	cstackCOMMON
   604  0070                     __pcstackCOMMON:	
   605  0070                     ?_isdigit:	
   606  0070                     ?_adc_init_0:	
   607                           ; 1 bit 
   608                           
   609  0070                     ?_LCD_RS_SetLow:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_LCD_RS_SetHigh:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_LCD_RW_SetLow:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_lcd_write_nibble:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_lcd_write:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_lcd_goto:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_lcd_init:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_isr:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_t0_init:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_main:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_adc_read_0:	
   640                           ; 1 bytes @ 0x0
   641                           
   642                           
   643                           ; 2 bytes @ 0x0
   644  0070                     	ds	2
   645  0072                     ??_adc_read_0:	
   646                           
   647                           ; 1 bytes @ 0x2
   648  0072                     	ds	5
   649  0077                     adc_read_0@result:	
   650                           
   651                           ; 2 bytes @ 0x7
   652  0077                     	ds	2
   653  0079                     ??_isr:	
   654                           
   655                           ; 1 bytes @ 0x9
   656  0079                     	ds	4
   657                           
   658                           	psect	cstackBANK0
   659  0020                     __pcstackBANK0:	
   660  0020                     ??_isdigit:	
   661  0020                     ??_adc_init_0:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0020                     ??_LCD_RS_SetLow:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0020                     ??_LCD_RS_SetHigh:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0020                     ??_LCD_RW_SetLow:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0020                     ??_lcd_write_nibble:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0020                     ??_t0_init:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0020                     ?___wmul:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0020                     _isdigit$384:	
   683                           ; 2 bytes @ 0x0
   684                           
   685  0020                     ___wmul@multiplier:	
   686                           ; 1 bytes @ 0x0
   687                           
   688                           
   689                           ; 2 bytes @ 0x0
   690  0020                     	ds	1
   691  0021                     lcd_write_nibble@c:	
   692  0021                     isdigit@c:	
   693                           ; 1 bytes @ 0x1
   694                           
   695                           
   696                           ; 1 bytes @ 0x1
   697  0021                     	ds	1
   698  0022                     ??_lcd_write:	
   699  0022                     ___wmul@multiplicand:	
   700                           ; 1 bytes @ 0x2
   701                           
   702                           
   703                           ; 2 bytes @ 0x2
   704  0022                     	ds	1
   705  0023                     lcd_write@c:	
   706                           
   707                           ; 1 bytes @ 0x3
   708  0023                     	ds	1
   709  0024                     ?_lcd_puts:	
   710  0024                     ??_lcd_goto:	
   711                           ; 1 bytes @ 0x4
   712                           
   713  0024                     ?_lcd_cursor:	
   714                           ; 1 bytes @ 0x4
   715                           
   716  0024                     ??_lcd_init:	
   717                           ; 1 bytes @ 0x4
   718                           
   719  0024                     ??___wmul:	
   720                           ; 1 bytes @ 0x4
   721                           
   722  0024                     lcd_goto@pos:	
   723                           ; 1 bytes @ 0x4
   724                           
   725  0024                     lcd_puts@s:	
   726                           ; 1 bytes @ 0x4
   727                           
   728  0024                     lcd_cursor@on:	
   729                           ; 2 bytes @ 0x4
   730                           
   731  0024                     ___wmul@product:	
   732                           ; 2 bytes @ 0x4
   733                           
   734                           
   735                           ; 2 bytes @ 0x4
   736  0024                     	ds	2
   737  0026                     ??_lcd_puts:	
   738  0026                     ??_lcd_cursor:	
   739                           ; 1 bytes @ 0x6
   740                           
   741  0026                     ?___lwdiv:	
   742                           ; 1 bytes @ 0x6
   743                           
   744  0026                     ___lwdiv@divisor:	
   745                           ; 2 bytes @ 0x6
   746                           
   747                           
   748                           ; 2 bytes @ 0x6
   749  0026                     	ds	2
   750  0028                     ___lwdiv@dividend:	
   751                           
   752                           ; 2 bytes @ 0x8
   753  0028                     	ds	2
   754  002A                     ??___lwdiv:	
   755                           
   756                           ; 1 bytes @ 0xA
   757  002A                     	ds	1
   758  002B                     ___lwdiv@quotient:	
   759                           
   760                           ; 2 bytes @ 0xB
   761  002B                     	ds	2
   762  002D                     ___lwdiv@counter:	
   763                           
   764                           ; 1 bytes @ 0xD
   765  002D                     	ds	1
   766  002E                     ?___lwmod:	
   767  002E                     ___lwmod@divisor:	
   768                           ; 2 bytes @ 0xE
   769                           
   770                           
   771                           ; 2 bytes @ 0xE
   772  002E                     	ds	2
   773  0030                     ___lwmod@dividend:	
   774                           
   775                           ; 2 bytes @ 0x10
   776  0030                     	ds	2
   777  0032                     ??___lwmod:	
   778                           
   779                           ; 1 bytes @ 0x12
   780  0032                     	ds	1
   781  0033                     ___lwmod@counter:	
   782                           
   783                           ; 1 bytes @ 0x13
   784  0033                     	ds	1
   785  0034                     ?_sprintf:	
   786  0034                     sprintf@f:	
   787                           ; 2 bytes @ 0x14
   788                           
   789                           
   790                           ; 1 bytes @ 0x14
   791  0034                     	ds	3
   792  0037                     ??_sprintf:	
   793                           
   794                           ; 1 bytes @ 0x17
   795  0037                     	ds	3
   796  003A                     sprintf@ap:	
   797                           
   798                           ; 1 bytes @ 0x1A
   799  003A                     	ds	1
   800  003B                     sprintf@prec:	
   801                           
   802                           ; 1 bytes @ 0x1B
   803  003B                     	ds	1
   804  003C                     sprintf@val:	
   805                           
   806                           ; 2 bytes @ 0x1C
   807  003C                     	ds	2
   808  003E                     sprintf@flag:	
   809                           
   810                           ; 1 bytes @ 0x1E
   811  003E                     	ds	1
   812  003F                     sprintf@width:	
   813                           
   814                           ; 2 bytes @ 0x1F
   815  003F                     	ds	2
   816  0041                     sprintf@sp:	
   817                           
   818                           ; 1 bytes @ 0x21
   819  0041                     	ds	1
   820  0042                     sprintf@c:	
   821                           
   822                           ; 1 bytes @ 0x22
   823  0042                     	ds	1
   824  0043                     ??_main:	
   825                           
   826                           ; 1 bytes @ 0x23
   827  0043                     	ds	3
   828  0046                     _main$651:	
   829                           
   830                           ; 2 bytes @ 0x26
   831  0046                     	ds	2
   832  0048                     main@message:	
   833                           
   834                           ; 4 bytes @ 0x28
   835  0048                     	ds	4
   836                           
   837                           	psect	maintext
   838  01CE                     __pmaintext:	
   839 ;;
   840 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   841 ;;
   842 ;; *************** function _main *****************
   843 ;; Defined at:
   844 ;;		line 66 in file "main.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  message         4   40[BANK0 ] unsigned char [4]
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : B00/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   858 ;;      Params:         0       0       0       0       0
   859 ;;      Locals:         0       6       0       0       0
   860 ;;      Temps:          0       3       0       0       0
   861 ;;      Totals:         0       9       0       0       0
   862 ;;Total ram usage:        9 bytes
   863 ;; Hardware stack levels required when called:    5
   864 ;; This function calls:
   865 ;;		___lwdiv
   866 ;;		___wmul
   867 ;;		_adc_init_0
   868 ;;		_lcd_cursor
   869 ;;		_lcd_goto
   870 ;;		_lcd_init
   871 ;;		_lcd_puts
   872 ;;		_sprintf
   873 ;;		_t0_init
   874 ;; This function is called by:
   875 ;;		Startup code after reset
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _main
   881  01CE                     _main:	
   882                           
   883                           ;main.c: 69: char message[4];
   884                           ;main.c: 72: t0_init();
   885                           
   886                           ;incstack = 0
   887                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   888  01CE  120A  118A  24AB  120A  118A  	fcall	_t0_init
   889                           
   890                           ;main.c: 73: lcd_init();
   891  01D3  120A  118A  2272  120A  118A  	fcall	_lcd_init
   892                           
   893                           ;main.c: 74: adc_init_0();
   894  01D8  120A  118A  243C  120A  118A  	fcall	_adc_init_0
   895                           
   896                           ;main.c: 75: _delay((unsigned long)((10)*(20000000/4000.0)));
   897  01DD  3041               	movlw	65
   898  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   899  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   900  01E0  00C4               	movwf	??_main+1
   901  01E1  30ED               	movlw	237
   902  01E2  00C3               	movwf	??_main
   903  01E3                     u1277:	
   904  01E3  0BC3               	decfsz	??_main,f
   905  01E4  29E3               	goto	u1277
   906  01E5  0BC4               	decfsz	??_main+1,f
   907  01E6  29E3               	goto	u1277
   908  01E7  29E8               	nop2
   909                           
   910                           ;main.c: 76: GIE = 1;
   911  01E8  178B               	bsf	11,7	;volatile
   912                           
   913                           ;main.c: 79: lcd_cursor(0);
   914  01E9  3000               	movlw	0
   915  01EA  1283               	bcf	3,5	;RP0=0, select bank0
   916  01EB  1303               	bcf	3,6	;RP1=0, select bank0
   917  01EC  00A4               	movwf	lcd_cursor@on
   918  01ED  00A5               	movwf	lcd_cursor@on+1
   919  01EE  120A  118A  2476  120A  118A  	fcall	_lcd_cursor
   920                           
   921                           ;main.c: 80: lcd_goto(0);
   922  01F3  3000               	movlw	0
   923  01F4  120A  118A  249B  120A  118A  	fcall	_lcd_goto
   924                           
   925                           ;main.c: 81: lcd_puts("T5G7-JV");
   926  01F9  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   927  01FA  1283               	bcf	3,5	;RP0=0, select bank0
   928  01FB  1303               	bcf	3,6	;RP1=0, select bank0
   929  01FC  00A4               	movwf	lcd_puts@s
   930  01FD  3080               	movlw	128
   931  01FE  00A5               	movwf	lcd_puts@s+1
   932  01FF  120A  118A  23A7  120A  118A  	fcall	_lcd_puts
   933  0204                     l1467:	
   934                           ;main.c: 84: while(1) {
   935                           
   936                           
   937                           ;main.c: 86: if(ADC > 850){
   938  0204  3003               	movlw	3
   939  0205  1283               	bcf	3,5	;RP0=0, select bank0
   940  0206  1303               	bcf	3,6	;RP1=0, select bank0
   941  0207  024D               	subwf	_ADC+1,w	;volatile
   942  0208  3053               	movlw	83
   943  0209  1903               	skipnz
   944  020A  024C               	subwf	_ADC,w	;volatile
   945  020B  1C03               	skipc
   946  020C  2A15               	goto	l1471
   947                           
   948                           ;main.c: 87: sprintf(message, "%03d", 0);
   949  020D  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   950  020E  00C3               	movwf	??_main
   951  020F  0843               	movf	??_main,w
   952  0210  00B4               	movwf	sprintf@f
   953  0211  3000               	movlw	0
   954  0212  00B5               	movwf	?_sprintf+1
   955  0213  00B6               	movwf	?_sprintf+2
   956  0214  2A4C               	goto	L1
   957  0215                     l1471:	
   958                           ;main.c: 88: }
   959                           
   960                           
   961                           ;main.c: 89: else{
   962                           ;main.c: 90: sprintf(message, "%03d", (300 - (ADC*6)/17));
   963  0215  3011               	movlw	17
   964  0216  1283               	bcf	3,5	;RP0=0, select bank0
   965  0217  1303               	bcf	3,6	;RP1=0, select bank0
   966  0218  00A6               	movwf	___lwdiv@divisor
   967  0219  3000               	movlw	0
   968  021A  00A7               	movwf	___lwdiv@divisor+1
   969  021B  084D               	movf	_ADC+1,w	;volatile
   970  021C  00A1               	movwf	___wmul@multiplier+1
   971  021D  084C               	movf	_ADC,w	;volatile
   972  021E  00A0               	movwf	___wmul@multiplier
   973  021F  3006               	movlw	6
   974  0220  00A2               	movwf	___wmul@multiplicand
   975  0221  3000               	movlw	0
   976  0222  00A3               	movwf	___wmul@multiplicand+1
   977  0223  120A  118A  23F8  120A  118A  	fcall	___wmul
   978  0228  1283               	bcf	3,5	;RP0=0, select bank0
   979  0229  1303               	bcf	3,6	;RP1=0, select bank0
   980  022A  0821               	movf	?___wmul+1,w
   981  022B  00A9               	movwf	___lwdiv@dividend+1
   982  022C  0820               	movf	?___wmul,w
   983  022D  00A8               	movwf	___lwdiv@dividend
   984  022E  120A  118A  230A  120A  118A  	fcall	___lwdiv
   985  0233  1283               	bcf	3,5	;RP0=0, select bank0
   986  0234  1303               	bcf	3,6	;RP1=0, select bank0
   987  0235  0926               	comf	?___lwdiv,w
   988  0236  00C3               	movwf	??_main
   989  0237  0927               	comf	?___lwdiv+1,w
   990  0238  00C4               	movwf	??_main+1
   991  0239  0AC3               	incf	??_main,f
   992  023A  1903               	skipnz
   993  023B  0AC4               	incf	??_main+1,f
   994  023C  0843               	movf	??_main,w
   995  023D  3E2C               	addlw	44
   996  023E  00C6               	movwf	_main$651	;volatile
   997  023F  0844               	movf	??_main+1,w
   998  0240  1803               	skipnc
   999  0241  3E01               	addlw	1
  1000  0242  3E01               	addlw	1
  1001  0243  00C7               	movwf	_main$651+1	;volatile
  1002                           
  1003                           ;main.c: 89: else{
  1004                           ;main.c: 90: sprintf(message, "%03d", (300 - (ADC*6)/17));
  1005  0244  3013               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1006  0245  00C3               	movwf	??_main
  1007  0246  0843               	movf	??_main,w
  1008  0247  00B4               	movwf	sprintf@f
  1009  0248  0847               	movf	_main$651+1,w	;volatile
  1010  0249  00B6               	movwf	?_sprintf+2
  1011  024A  0846               	movf	_main$651,w	;volatile
  1012  024B  00B5               	movwf	?_sprintf+1
  1013  024C                     L1:	
  1014  024C  3048               	movlw	(low (main@message| 0))& (0+255)
  1015  024D  120A  118A  2020  120A  118A  	fcall	_sprintf
  1016                           
  1017                           ;main.c: 92: }
  1018                           ;main.c: 93: lcd_goto(64);
  1019  0252  3040               	movlw	64
  1020  0253  120A  118A  249B  120A  118A  	fcall	_lcd_goto
  1021                           
  1022                           ;main.c: 94: lcd_puts(message);
  1023  0258  3048               	movlw	(low (main@message| 0))& (0+255)
  1024  0259  1283               	bcf	3,5	;RP0=0, select bank0
  1025  025A  1303               	bcf	3,6	;RP1=0, select bank0
  1026  025B  00A4               	movwf	lcd_puts@s
  1027  025C  3000               	movlw	0
  1028  025D  00A5               	movwf	lcd_puts@s+1
  1029  025E  120A  118A  23A7  120A  118A  	fcall	_lcd_puts
  1030                           
  1031                           ;main.c: 95: _delay((unsigned long)((200)*(20000000/4000.0)));
  1032  0263  3006               	movlw	6
  1033  0264  1283               	bcf	3,5	;RP0=0, select bank0
  1034  0265  1303               	bcf	3,6	;RP1=0, select bank0
  1035  0266  00C5               	movwf	??_main+2
  1036  0267  3013               	movlw	19
  1037  0268  00C4               	movwf	??_main+1
  1038  0269  30AD               	movlw	173
  1039  026A  00C3               	movwf	??_main
  1040  026B                     u1287:	
  1041  026B  0BC3               	decfsz	??_main,f
  1042  026C  2A6B               	goto	u1287
  1043  026D  0BC4               	decfsz	??_main+1,f
  1044  026E  2A6B               	goto	u1287
  1045  026F  0BC5               	decfsz	??_main+2,f
  1046  0270  2A6B               	goto	u1287
  1047  0271  2A04               	goto	l1467
  1048  0272                     __end_of_main:	
  1049                           
  1050                           	psect	text1
  1051  04AB                     __ptext1:	
  1052 ;; *************** function _t0_init *****************
  1053 ;; Defined at:
  1054 ;;		line 55 in file "main.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1068 ;;      Params:         0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0
  1071 ;;      Totals:         0       0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    2
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           
  1083                           ;psect for function _t0_init
  1084  04AB                     _t0_init:	
  1085                           
  1086                           ;main.c: 56: T0CS = 0;
  1087                           
  1088                           ;incstack = 0
  1089                           ; Regs used in _t0_init: [wreg]
  1090  04AB  1683               	bsf	3,5	;RP0=1, select bank1
  1091  04AC  1303               	bcf	3,6	;RP1=0, select bank1
  1092  04AD  1281               	bcf	1,5	;volatile
  1093                           
  1094                           ;main.c: 57: PSA = 0;
  1095  04AE  1181               	bcf	1,3	;volatile
  1096                           
  1097                           ;main.c: 58: PS0 = 1;
  1098  04AF  1401               	bsf	1,0	;volatile
  1099                           
  1100                           ;main.c: 59: PS1 = 1;
  1101  04B0  1481               	bsf	1,1	;volatile
  1102                           
  1103                           ;main.c: 60: PS2 = 1;
  1104  04B1  1501               	bsf	1,2	;volatile
  1105                           
  1106                           ;main.c: 61: TMR0 = 157;
  1107  04B2  309D               	movlw	157
  1108  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  1109  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  1110  04B5  0081               	movwf	1	;volatile
  1111                           
  1112                           ;main.c: 62: T0IE = 1;
  1113  04B6  168B               	bsf	11,5	;volatile
  1114  04B7  0008               	return
  1115  04B8                     __end_of_t0_init:	
  1116                           
  1117                           	psect	text2
  1118  0020                     __ptext2:	
  1119 ;; *************** function _sprintf *****************
  1120 ;; Defined at:
  1121 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  sp              1    wreg     PTR unsigned char 
  1124 ;;		 -> main@message(4), 
  1125 ;;  f               1   20[BANK0 ] PTR const unsigned char 
  1126 ;;		 -> STR_3(5), STR_2(5), 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  sp              1   33[BANK0 ] PTR unsigned char 
  1129 ;;		 -> main@message(4), 
  1130 ;;  tmpval          4    0        struct .
  1131 ;;  width           2   31[BANK0 ] int 
  1132 ;;  val             2   28[BANK0 ] unsigned int 
  1133 ;;  cp              2    0        PTR const unsigned char 
  1134 ;;  len             2    0        unsigned int 
  1135 ;;  c               1   34[BANK0 ] char 
  1136 ;;  flag            1   30[BANK0 ] unsigned char 
  1137 ;;  prec            1   27[BANK0 ] char 
  1138 ;;  ap              1   26[BANK0 ] PTR void [1]
  1139 ;;		 -> ?_sprintf(2), 
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  2   20[BANK0 ] int 
  1142 ;; Registers used:
  1143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1149 ;;      Params:         0       3       0       0       0
  1150 ;;      Locals:         0       9       0       0       0
  1151 ;;      Temps:          0       3       0       0       0
  1152 ;;      Totals:         0      15       0       0       0
  1153 ;;Total ram usage:       15 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    3
  1156 ;; This function calls:
  1157 ;;		___lwdiv
  1158 ;;		___lwmod
  1159 ;;		___wmul
  1160 ;;		_isdigit
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           
  1167                           ;psect for function _sprintf
  1168  0020                     _sprintf:	
  1169                           
  1170                           ;incstack = 0
  1171                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1172                           ;sprintf@sp stored from wreg
  1173  0020  1283               	bcf	3,5	;RP0=0, select bank0
  1174  0021  1303               	bcf	3,6	;RP1=0, select bank0
  1175  0022  00C1               	movwf	sprintf@sp
  1176                           
  1177                           ;doprnt.c: 494: va_list ap;
  1178                           ;doprnt.c: 499: signed char c;
  1179                           ;doprnt.c: 501: int width;
  1180                           ;doprnt.c: 506: signed char prec;
  1181                           ;doprnt.c: 508: unsigned char flag;
  1182                           ;doprnt.c: 523: union {
  1183                           ;doprnt.c: 524: unsigned long vd;
  1184                           ;doprnt.c: 525: double integ;
  1185                           ;doprnt.c: 526: } tmpval;
  1186                           ;doprnt.c: 528: unsigned int val;
  1187                           ;doprnt.c: 529: unsigned len;
  1188                           ;doprnt.c: 530: const char * cp;
  1189                           ;doprnt.c: 533: *ap = __va_start();
  1190  0023  3035               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1191  0024  00B7               	movwf	??_sprintf
  1192  0025  0837               	movf	??_sprintf,w
  1193  0026  00BA               	movwf	sprintf@ap
  1194  0027                     l1423:	
  1195                           ;doprnt.c: 536: while(c = *f++) {
  1196                           
  1197  0027  3001               	movlw	1
  1198  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1199  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1200  002A  07B4               	addwf	sprintf@f,f
  1201  002B  30FF               	movlw	-1
  1202  002C  0734               	addwf	sprintf@f,w
  1203  002D  0084               	movwf	4
  1204  002E  120A  118A  23DB  120A  118A  	fcall	stringdir
  1205  0033  00B7               	movwf	??_sprintf
  1206  0034  0837               	movf	??_sprintf,w
  1207  0035  00C2               	movwf	sprintf@c
  1208  0036  0842               	movf	sprintf@c,w
  1209  0037  1903               	btfsc	3,2
  1210  0038  29C7               	goto	l1425
  1211                           
  1212                           ;doprnt.c: 538: if(c != '%')
  1213  0039  3025               	movlw	37
  1214  003A  0642               	xorwf	sprintf@c,w
  1215  003B  1903               	btfsc	3,2
  1216  003C  2849               	goto	l1327
  1217                           
  1218                           ;doprnt.c: 540: {
  1219                           ;doprnt.c: 541: ((*sp++ = (c)));
  1220  003D  0842               	movf	sprintf@c,w
  1221  003E  00B7               	movwf	??_sprintf
  1222  003F  0841               	movf	sprintf@sp,w
  1223  0040  0084               	movwf	4
  1224  0041  0837               	movf	??_sprintf,w
  1225  0042  1383               	bcf	3,7	;select IRP bank0
  1226  0043  0080               	movwf	0
  1227  0044  3001               	movlw	1
  1228  0045  00B7               	movwf	??_sprintf
  1229  0046  0837               	movf	??_sprintf,w
  1230  0047  07C1               	addwf	sprintf@sp,f
  1231                           
  1232                           ;doprnt.c: 542: continue;
  1233  0048  2827               	goto	l1423
  1234  0049                     l1327:	
  1235                           
  1236                           ;doprnt.c: 543: }
  1237                           ;doprnt.c: 546: width = 0;
  1238  0049  01BF               	clrf	sprintf@width
  1239  004A  01C0               	clrf	sprintf@width+1
  1240                           
  1241                           ;doprnt.c: 548: flag = 0;
  1242  004B  01BE               	clrf	sprintf@flag
  1243                           
  1244                           ;doprnt.c: 551: switch(*f) {
  1245                           
  1246                           ;doprnt.c: 550: for(;;) {
  1247  004C  2852               	goto	l1333
  1248  004D                     l281:	
  1249                           ;doprnt.c: 579: case '0':
  1250                           
  1251                           
  1252                           ;doprnt.c: 580: flag |= 0x04;
  1253  004D  153E               	bsf	sprintf@flag,2
  1254                           
  1255                           ;doprnt.c: 581: f++;
  1256  004E  3001               	movlw	1
  1257  004F  00B7               	movwf	??_sprintf
  1258  0050  0837               	movf	??_sprintf,w
  1259  0051  07B4               	addwf	sprintf@f,f
  1260  0052                     l1333:	
  1261                           ;doprnt.c: 584: }
  1262                           
  1263                           ;doprnt.c: 582: continue;
  1264                           
  1265  0052  0834               	movf	sprintf@f,w
  1266  0053  0084               	movwf	4
  1267  0054  120A  118A  23DB  120A  118A  	fcall	stringdir
  1268                           
  1269                           ; Switch size 1, requested type "space"
  1270                           ; Number of cases is 1, Range of values is 48 to 48
  1271                           ; switch strategies available:
  1272                           ; Name         Instructions Cycles
  1273                           ; simple_byte            4     3 (average)
  1274                           ; direct_byte           14    11 (fixed)
  1275                           ; jumptable            263     9 (fixed)
  1276                           ;	Chosen strategy is simple_byte
  1277  0059  3A30               	xorlw	48	; case 48
  1278  005A  1903               	skipnz
  1279  005B  284D               	goto	l281
  1280  005C  285D               	goto	l1335
  1281  005D                     l1335:	
  1282                           ;doprnt.c: 586: }
  1283                           
  1284                           ;doprnt.c: 585: break;
  1285                           
  1286                           
  1287                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1288  005D  0834               	movf	sprintf@f,w
  1289  005E  0084               	movwf	4
  1290  005F  120A  118A  23DB  120A  118A  	fcall	stringdir
  1291  0064  120A  118A  248B  120A  118A  	fcall	_isdigit
  1292  0069  1C03               	btfss	3,0
  1293  006A  28A9               	goto	l1349
  1294                           
  1295                           ;doprnt.c: 598: width = 0;
  1296  006B  1283               	bcf	3,5	;RP0=0, select bank0
  1297  006C  1303               	bcf	3,6	;RP1=0, select bank0
  1298  006D  01BF               	clrf	sprintf@width
  1299  006E  01C0               	clrf	sprintf@width+1
  1300  006F                     l1339:	
  1301                           ;doprnt.c: 599: do {
  1302                           
  1303                           
  1304                           ;doprnt.c: 600: width *= 10;
  1305  006F  300A               	movlw	10
  1306  0070  1283               	bcf	3,5	;RP0=0, select bank0
  1307  0071  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0072  00A0               	movwf	___wmul@multiplier
  1309  0073  3000               	movlw	0
  1310  0074  00A1               	movwf	___wmul@multiplier+1
  1311  0075  0840               	movf	sprintf@width+1,w
  1312  0076  00A3               	movwf	___wmul@multiplicand+1
  1313  0077  083F               	movf	sprintf@width,w
  1314  0078  00A2               	movwf	___wmul@multiplicand
  1315  0079  120A  118A  23F8  120A  118A  	fcall	___wmul
  1316  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1317  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1318  0080  0821               	movf	?___wmul+1,w
  1319  0081  00C0               	movwf	sprintf@width+1
  1320  0082  0820               	movf	?___wmul,w
  1321  0083  00BF               	movwf	sprintf@width
  1322                           
  1323                           ;doprnt.c: 601: width += *f++ - '0';
  1324  0084  0834               	movf	sprintf@f,w
  1325  0085  0084               	movwf	4
  1326  0086  120A  118A  23DB  120A  118A  	fcall	stringdir
  1327  008B  3ED0               	addlw	208
  1328  008C  00B7               	movwf	??_sprintf
  1329  008D  30FF               	movlw	255
  1330  008E  1803               	skipnc
  1331  008F  3000               	movlw	0
  1332  0090  00B8               	movwf	??_sprintf+1
  1333  0091  0837               	movf	??_sprintf,w
  1334  0092  07BF               	addwf	sprintf@width,f
  1335  0093  1803               	skipnc
  1336  0094  0AC0               	incf	sprintf@width+1,f
  1337  0095  0838               	movf	??_sprintf+1,w
  1338  0096  07C0               	addwf	sprintf@width+1,f
  1339  0097  3001               	movlw	1
  1340  0098  00B7               	movwf	??_sprintf
  1341  0099  0837               	movf	??_sprintf,w
  1342  009A  07B4               	addwf	sprintf@f,f
  1343                           
  1344                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1345  009B  0834               	movf	sprintf@f,w
  1346  009C  0084               	movwf	4
  1347  009D  120A  118A  23DB  120A  118A  	fcall	stringdir
  1348  00A2  120A  118A  248B  120A  118A  	fcall	_isdigit
  1349  00A7  1803               	btfsc	3,0
  1350  00A8  286F               	goto	l1339
  1351  00A9                     l1349:	
  1352                           ;doprnt.c: 822: }
  1353                           
  1354                           ;doprnt.c: 813: continue;
  1355                           
  1356                           ;doprnt.c: 802: default:
  1357                           
  1358                           ;doprnt.c: 698: case 'i':
  1359                           ;doprnt.c: 699: break;
  1360                           
  1361                           ;doprnt.c: 697: case 'd':
  1362                           
  1363                           ;doprnt.c: 638: goto alldone;
  1364                           
  1365                           ;doprnt.c: 637: case 0:
  1366                           
  1367                           ;doprnt.c: 608: }
  1368                           ;doprnt.c: 635: switch(c = *f++) {
  1369                           
  1370  00A9  3001               	movlw	1
  1371  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1372  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1373  00AC  07B4               	addwf	sprintf@f,f
  1374  00AD  30FF               	movlw	-1
  1375  00AE  0734               	addwf	sprintf@f,w
  1376  00AF  0084               	movwf	4
  1377  00B0  120A  118A  23DB  120A  118A  	fcall	stringdir
  1378  00B5  00C2               	movwf	sprintf@c
  1379                           
  1380                           ; Switch size 1, requested type "space"
  1381                           ; Number of cases is 3, Range of values is 0 to 105
  1382                           ; switch strategies available:
  1383                           ; Name         Instructions Cycles
  1384                           ; simple_byte           10     6 (average)
  1385                           ; jumptable            260     6 (fixed)
  1386                           ;	Chosen strategy is simple_byte
  1387  00B6  3A00               	xorlw	0	; case 0
  1388  00B7  1903               	skipnz
  1389  00B8  29C7               	goto	l1425
  1390  00B9  3A64               	xorlw	100	; case 100
  1391  00BA  1903               	skipnz
  1392  00BB  28C0               	goto	l1351
  1393  00BC  3A0D               	xorlw	13	; case 105
  1394  00BD  1903               	skipnz
  1395  00BE  28C0               	goto	l1351
  1396  00BF  2827               	goto	l1423
  1397  00C0                     l1351:	
  1398                           
  1399                           ;doprnt.c: 1253: {
  1400                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1401  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1402  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1403  00C2  083A               	movf	sprintf@ap,w
  1404  00C3  0084               	movwf	4
  1405  00C4  1383               	bcf	3,7	;select IRP bank0
  1406  00C5  0800               	movf	0,w
  1407  00C6  00BC               	movwf	sprintf@val
  1408  00C7  0A84               	incf	4,f
  1409  00C8  0800               	movf	0,w
  1410  00C9  00BD               	movwf	sprintf@val+1
  1411  00CA  3002               	movlw	2
  1412  00CB  00B7               	movwf	??_sprintf
  1413  00CC  0837               	movf	??_sprintf,w
  1414  00CD  07BA               	addwf	sprintf@ap,f
  1415                           
  1416                           ;doprnt.c: 1261: if((int)val < 0) {
  1417  00CE  1FBD               	btfss	sprintf@val+1,7
  1418  00CF  28D9               	goto	l1361
  1419                           
  1420                           ;doprnt.c: 1262: flag |= 0x03;
  1421  00D0  3003               	movlw	3
  1422  00D1  00B7               	movwf	??_sprintf
  1423  00D2  0837               	movf	??_sprintf,w
  1424  00D3  04BE               	iorwf	sprintf@flag,f
  1425                           
  1426                           ;doprnt.c: 1263: val = -val;
  1427  00D4  09BC               	comf	sprintf@val,f
  1428  00D5  09BD               	comf	sprintf@val+1,f
  1429  00D6  0ABC               	incf	sprintf@val,f
  1430  00D7  1903               	skipnz
  1431  00D8  0ABD               	incf	sprintf@val+1,f
  1432  00D9                     l1361:	
  1433                           
  1434                           ;doprnt.c: 1264: }
  1435                           ;doprnt.c: 1266: }
  1436                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1437  00D9  01C2               	clrf	sprintf@c
  1438  00DA  0AC2               	incf	sprintf@c,f
  1439  00DB  3005               	movlw	5
  1440  00DC  0642               	xorwf	sprintf@c,w
  1441  00DD  1903               	btfsc	3,2
  1442  00DE  2900               	goto	l1373
  1443  00DF                     l1367:	
  1444                           
  1445                           ;doprnt.c: 1306: if(val < dpowers[c])
  1446  00DF  0842               	movf	sprintf@c,w
  1447  00E0  00B7               	movwf	??_sprintf
  1448  00E1  0737               	addwf	??_sprintf,w
  1449  00E2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1450  00E3  0084               	movwf	4
  1451  00E4  120A  118A  23DB  120A  118A  	fcall	stringdir
  1452  00E9  00B8               	movwf	??_sprintf+1
  1453  00EA  120A  118A  23DB  120A  118A  	fcall	stringdir
  1454  00EF  00B9               	movwf	??_sprintf+2
  1455  00F0  0839               	movf	??_sprintf+2,w
  1456  00F1  023D               	subwf	sprintf@val+1,w
  1457  00F2  1D03               	skipz
  1458  00F3  28F6               	goto	u1035
  1459  00F4  0838               	movf	??_sprintf+1,w
  1460  00F5  023C               	subwf	sprintf@val,w
  1461  00F6                     u1035:	
  1462  00F6  1C03               	btfss	3,0
  1463  00F7  2900               	goto	l1373
  1464                           
  1465                           ;doprnt.c: 1307: break;
  1466  00F8  3001               	movlw	1
  1467  00F9  00B7               	movwf	??_sprintf
  1468  00FA  0837               	movf	??_sprintf,w
  1469  00FB  07C2               	addwf	sprintf@c,f
  1470  00FC  3005               	movlw	5
  1471  00FD  0642               	xorwf	sprintf@c,w
  1472  00FE  1D03               	btfss	3,2
  1473  00FF  28DF               	goto	l1367
  1474  0100                     l1373:	
  1475                           
  1476                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1477  0100  083F               	movf	sprintf@width,w
  1478  0101  0440               	iorwf	sprintf@width+1,w
  1479  0102  1903               	btfsc	3,2
  1480  0103  290E               	goto	l299
  1481  0104  083E               	movf	sprintf@flag,w
  1482  0105  3903               	andlw	3
  1483  0106  1903               	btfsc	3,2
  1484  0107  290E               	goto	l299
  1485                           
  1486                           ;doprnt.c: 1346: width--;
  1487  0108  30FF               	movlw	255
  1488  0109  07BF               	addwf	sprintf@width,f
  1489  010A  1803               	skipnc
  1490  010B  0AC0               	incf	sprintf@width+1,f
  1491  010C  30FF               	movlw	255
  1492  010D  07C0               	addwf	sprintf@width+1,f
  1493  010E                     l299:	
  1494                           
  1495                           ;doprnt.c: 1381: if(width > c)
  1496  010E  0842               	movf	sprintf@c,w
  1497  010F  00B7               	movwf	??_sprintf
  1498  0110  01B8               	clrf	??_sprintf+1
  1499  0111  1BB7               	btfsc	??_sprintf,7
  1500  0112  03B8               	decf	??_sprintf+1,f
  1501  0113  0838               	movf	??_sprintf+1,w
  1502  0114  3A80               	xorlw	128
  1503  0115  00B9               	movwf	??_sprintf+2
  1504  0116  0840               	movf	sprintf@width+1,w
  1505  0117  3A80               	xorlw	128
  1506  0118  0239               	subwf	??_sprintf+2,w
  1507  0119  1D03               	skipz
  1508  011A  291D               	goto	u1075
  1509  011B  083F               	movf	sprintf@width,w
  1510  011C  0237               	subwf	??_sprintf,w
  1511  011D                     u1075:	
  1512  011D  1803               	skipnc
  1513  011E  292D               	goto	l1381
  1514                           
  1515                           ;doprnt.c: 1382: width -= c;
  1516  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1517  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1518  0121  0842               	movf	sprintf@c,w
  1519  0122  00B7               	movwf	??_sprintf
  1520  0123  01B8               	clrf	??_sprintf+1
  1521  0124  1BB7               	btfsc	??_sprintf,7
  1522  0125  03B8               	decf	??_sprintf+1,f
  1523  0126  0837               	movf	??_sprintf,w
  1524  0127  02BF               	subwf	sprintf@width,f
  1525  0128  0838               	movf	??_sprintf+1,w
  1526  0129  1C03               	skipc
  1527  012A  03C0               	decf	sprintf@width+1,f
  1528  012B  02C0               	subwf	sprintf@width+1,f
  1529  012C  2931               	goto	l1383
  1530  012D                     l1381:	
  1531                           
  1532                           ;doprnt.c: 1383: else
  1533                           ;doprnt.c: 1384: width = 0;
  1534  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1535  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1536  012F  01BF               	clrf	sprintf@width
  1537  0130  01C0               	clrf	sprintf@width+1
  1538  0131                     l1383:	
  1539                           
  1540                           ;doprnt.c: 1387: if(flag & 0x04) {
  1541  0131  1D3E               	btfss	sprintf@flag,2
  1542  0132  2958               	goto	l1399
  1543                           
  1544                           ;doprnt.c: 1392: if(flag & 0x03)
  1545  0133  083E               	movf	sprintf@flag,w
  1546  0134  3903               	andlw	3
  1547  0135  1903               	btfsc	3,2
  1548  0136  2942               	goto	l1391
  1549                           
  1550                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  1551  0137  302D               	movlw	45
  1552  0138  00B7               	movwf	??_sprintf
  1553  0139  0841               	movf	sprintf@sp,w
  1554  013A  0084               	movwf	4
  1555  013B  0837               	movf	??_sprintf,w
  1556  013C  1383               	bcf	3,7	;select IRP bank0
  1557  013D  0080               	movwf	0
  1558  013E  3001               	movlw	1
  1559  013F  00B7               	movwf	??_sprintf
  1560  0140  0837               	movf	??_sprintf,w
  1561  0141  07C1               	addwf	sprintf@sp,f
  1562  0142                     l1391:	
  1563                           
  1564                           ;doprnt.c: 1415: if(width)
  1565  0142  083F               	movf	sprintf@width,w
  1566  0143  0440               	iorwf	sprintf@width+1,w
  1567  0144  1903               	btfsc	3,2
  1568  0145  2980               	goto	l1413
  1569                           
  1570                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1571                           
  1572                           ;doprnt.c: 1416: do
  1573  0146  3030               	movlw	48
  1574  0147  00B7               	movwf	??_sprintf
  1575  0148  0841               	movf	sprintf@sp,w
  1576  0149  0084               	movwf	4
  1577  014A  0837               	movf	??_sprintf,w
  1578  014B  1383               	bcf	3,7	;select IRP bank0
  1579  014C  0080               	movwf	0
  1580  014D  3001               	movlw	1
  1581  014E  00B7               	movwf	??_sprintf
  1582  014F  0837               	movf	??_sprintf,w
  1583  0150  07C1               	addwf	sprintf@sp,f
  1584                           
  1585                           ;doprnt.c: 1418: while(--width);
  1586  0151  30FF               	movlw	255
  1587  0152  07BF               	addwf	sprintf@width,f
  1588  0153  1803               	skipnc
  1589  0154  0AC0               	incf	sprintf@width+1,f
  1590  0155  30FF               	movlw	255
  1591  0156  07C0               	addwf	sprintf@width+1,f
  1592  0157  2942               	goto	l1391
  1593  0158                     l1399:	
  1594                           ;doprnt.c: 1420: } else
  1595                           
  1596                           
  1597                           ;doprnt.c: 1422: {
  1598                           ;doprnt.c: 1424: if(width
  1599                           ;doprnt.c: 1428: )
  1600  0158  083F               	movf	sprintf@width,w
  1601  0159  0440               	iorwf	sprintf@width+1,w
  1602  015A  1903               	btfsc	3,2
  1603  015B  2971               	goto	l1407
  1604  015C                     l1401:	
  1605                           ;doprnt.c: 1429: do
  1606                           
  1607                           
  1608                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1609  015C  3020               	movlw	32
  1610  015D  00B7               	movwf	??_sprintf
  1611  015E  0841               	movf	sprintf@sp,w
  1612  015F  0084               	movwf	4
  1613  0160  0837               	movf	??_sprintf,w
  1614  0161  1383               	bcf	3,7	;select IRP bank0
  1615  0162  0080               	movwf	0
  1616  0163  3001               	movlw	1
  1617  0164  00B7               	movwf	??_sprintf
  1618  0165  0837               	movf	??_sprintf,w
  1619  0166  07C1               	addwf	sprintf@sp,f
  1620                           
  1621                           ;doprnt.c: 1431: while(--width);
  1622  0167  30FF               	movlw	255
  1623  0168  07BF               	addwf	sprintf@width,f
  1624  0169  1803               	skipnc
  1625  016A  0AC0               	incf	sprintf@width+1,f
  1626  016B  30FF               	movlw	255
  1627  016C  07C0               	addwf	sprintf@width+1,f
  1628  016D  083F               	movf	sprintf@width,w
  1629  016E  0440               	iorwf	sprintf@width+1,w
  1630  016F  1D03               	btfss	3,2
  1631  0170  295C               	goto	l1401
  1632  0171                     l1407:	
  1633                           
  1634                           ;doprnt.c: 1438: if(flag & 0x03)
  1635  0171  083E               	movf	sprintf@flag,w
  1636  0172  3903               	andlw	3
  1637  0173  1903               	btfsc	3,2
  1638  0174  2980               	goto	l1413
  1639                           
  1640                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1641  0175  302D               	movlw	45
  1642  0176  00B7               	movwf	??_sprintf
  1643  0177  0841               	movf	sprintf@sp,w
  1644  0178  0084               	movwf	4
  1645  0179  0837               	movf	??_sprintf,w
  1646  017A  1383               	bcf	3,7	;select IRP bank0
  1647  017B  0080               	movwf	0
  1648  017C  3001               	movlw	1
  1649  017D  00B7               	movwf	??_sprintf
  1650  017E  0837               	movf	??_sprintf,w
  1651  017F  07C1               	addwf	sprintf@sp,f
  1652  0180                     l1413:	
  1653                           
  1654                           ;doprnt.c: 1469: }
  1655                           ;doprnt.c: 1472: prec = c;
  1656  0180  0842               	movf	sprintf@c,w
  1657  0181  00B7               	movwf	??_sprintf
  1658  0182  0837               	movf	??_sprintf,w
  1659  0183  00BB               	movwf	sprintf@prec
  1660  0184                     l1421:	
  1661                           ;doprnt.c: 1474: while(prec--) {
  1662                           
  1663  0184  30FF               	movlw	255
  1664  0185  00B7               	movwf	??_sprintf
  1665  0186  0837               	movf	??_sprintf,w
  1666  0187  07BB               	addwf	sprintf@prec,f
  1667  0188  0A3B               	incf	sprintf@prec,w
  1668  0189  1903               	btfsc	3,2
  1669  018A  2827               	goto	l1423
  1670                           
  1671                           ;doprnt.c: 1478: {
  1672                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1673  018B  300A               	movlw	10
  1674  018C  00AE               	movwf	___lwmod@divisor
  1675  018D  3000               	movlw	0
  1676  018E  00AF               	movwf	___lwmod@divisor+1
  1677  018F  083B               	movf	sprintf@prec,w
  1678  0190  00B7               	movwf	??_sprintf
  1679  0191  0737               	addwf	??_sprintf,w
  1680  0192  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1681  0193  0084               	movwf	4
  1682  0194  120A  118A  23DB  120A  118A  	fcall	stringdir
  1683  0199  00A6               	movwf	___lwdiv@divisor
  1684  019A  120A  118A  23DB  120A  118A  	fcall	stringdir
  1685  019F  00A7               	movwf	___lwdiv@divisor+1
  1686  01A0  083D               	movf	sprintf@val+1,w
  1687  01A1  00A9               	movwf	___lwdiv@dividend+1
  1688  01A2  083C               	movf	sprintf@val,w
  1689  01A3  00A8               	movwf	___lwdiv@dividend
  1690  01A4  120A  118A  230A  120A  118A  	fcall	___lwdiv
  1691  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  1692  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  1693  01AB  0827               	movf	?___lwdiv+1,w
  1694  01AC  00B1               	movwf	___lwmod@dividend+1
  1695  01AD  0826               	movf	?___lwdiv,w
  1696  01AE  00B0               	movwf	___lwmod@dividend
  1697  01AF  120A  118A  2348  120A  118A  	fcall	___lwmod
  1698  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1699  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1700  01B6  082E               	movf	?___lwmod,w
  1701  01B7  3E30               	addlw	48
  1702  01B8  00B8               	movwf	??_sprintf+1
  1703  01B9  0838               	movf	??_sprintf+1,w
  1704  01BA  00C2               	movwf	sprintf@c
  1705                           
  1706                           ;doprnt.c: 1523: }
  1707                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1708  01BB  0842               	movf	sprintf@c,w
  1709  01BC  00B7               	movwf	??_sprintf
  1710  01BD  0841               	movf	sprintf@sp,w
  1711  01BE  0084               	movwf	4
  1712  01BF  0837               	movf	??_sprintf,w
  1713  01C0  1383               	bcf	3,7	;select IRP bank0
  1714  01C1  0080               	movwf	0
  1715  01C2  3001               	movlw	1
  1716  01C3  00B7               	movwf	??_sprintf
  1717  01C4  0837               	movf	??_sprintf,w
  1718  01C5  07C1               	addwf	sprintf@sp,f
  1719  01C6  2984               	goto	l1421
  1720  01C7                     l1425:	
  1721                           ;doprnt.c: 1525: }
  1722                           ;doprnt.c: 1533: }
  1723                           ;doprnt.c: 1535: alldone:
  1724                           
  1725                           
  1726                           ;doprnt.c: 1538: *sp = 0;
  1727  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  1728  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  1729  01C9  0841               	movf	sprintf@sp,w
  1730  01CA  0084               	movwf	4
  1731  01CB  1383               	bcf	3,7	;select IRP bank0
  1732  01CC  0180               	clrf	0
  1733  01CD  0008               	return
  1734  01CE                     __end_of_sprintf:	
  1735                           ;doprnt.c: 1540: return 0;
  1736                           ;	Return value of _sprintf is never used
  1737                           
  1738                           
  1739                           	psect	text3
  1740  048B                     __ptext3:	
  1741 ;; *************** function _isdigit *****************
  1742 ;; Defined at:
  1743 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  c               1    wreg     unsigned char 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  c               1    1[BANK0 ] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;		None               void
  1750 ;; Registers used:
  1751 ;;		wreg, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1757 ;;      Params:         0       0       0       0       0
  1758 ;;      Locals:         0       2       0       0       0
  1759 ;;      Temps:          0       0       0       0       0
  1760 ;;      Totals:         0       2       0       0       0
  1761 ;;Total ram usage:        2 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    2
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_sprintf
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           
  1772                           ;psect for function _isdigit
  1773  048B                     _isdigit:	
  1774                           
  1775                           ;incstack = 0
  1776                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1777                           ;isdigit@c stored from wreg
  1778  048B  1283               	bcf	3,5	;RP0=0, select bank0
  1779  048C  1303               	bcf	3,6	;RP1=0, select bank0
  1780  048D  00A1               	movwf	isdigit@c
  1781  048E  01A0               	clrf	_isdigit$384
  1782  048F  303A               	movlw	58
  1783  0490  0221               	subwf	isdigit@c,w
  1784  0491  1803               	skipnc
  1785  0492  2C99               	goto	l1181
  1786  0493  3030               	movlw	48
  1787  0494  0221               	subwf	isdigit@c,w
  1788  0495  1C03               	skipc
  1789  0496  2C99               	goto	l1181
  1790  0497  01A0               	clrf	_isdigit$384
  1791  0498  0AA0               	incf	_isdigit$384,f
  1792  0499                     l1181:	
  1793  0499  0C20               	rrf	_isdigit$384,w
  1794  049A  0008               	return
  1795  049B                     __end_of_isdigit:	
  1796                           
  1797                           	psect	text4
  1798  03F8                     __ptext4:	
  1799 ;; *************** function ___wmul *****************
  1800 ;; Defined at:
  1801 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1804 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  product         2    4[BANK0 ] unsigned int 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  2    0[BANK0 ] unsigned int 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1816 ;;      Params:         0       4       0       0       0
  1817 ;;      Locals:         0       2       0       0       0
  1818 ;;      Temps:          0       0       0       0       0
  1819 ;;      Totals:         0       6       0       0       0
  1820 ;;Total ram usage:        6 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    2
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;;		_sprintf
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           
  1832                           ;psect for function ___wmul
  1833  03F8                     ___wmul:	
  1834                           
  1835                           ;incstack = 0
  1836                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1837  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  1838  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  1839  03FA  01A4               	clrf	___wmul@product
  1840  03FB  01A5               	clrf	___wmul@product+1
  1841  03FC                     l1187:	
  1842  03FC  1C20               	btfss	___wmul@multiplier,0
  1843  03FD  2C04               	goto	l400
  1844  03FE  0822               	movf	___wmul@multiplicand,w
  1845  03FF  07A4               	addwf	___wmul@product,f
  1846  0400  1803               	skipnc
  1847  0401  0AA5               	incf	___wmul@product+1,f
  1848  0402  0823               	movf	___wmul@multiplicand+1,w
  1849  0403  07A5               	addwf	___wmul@product+1,f
  1850  0404                     l400:	
  1851  0404  3001               	movlw	1
  1852  0405                     u785:	
  1853  0405  1003               	clrc
  1854  0406  0DA2               	rlf	___wmul@multiplicand,f
  1855  0407  0DA3               	rlf	___wmul@multiplicand+1,f
  1856  0408  3EFF               	addlw	-1
  1857  0409  1D03               	skipz
  1858  040A  2C05               	goto	u785
  1859  040B  3001               	movlw	1
  1860  040C                     u795:	
  1861  040C  1003               	clrc
  1862  040D  0CA1               	rrf	___wmul@multiplier+1,f
  1863  040E  0CA0               	rrf	___wmul@multiplier,f
  1864  040F  3EFF               	addlw	-1
  1865  0410  1D03               	skipz
  1866  0411  2C0C               	goto	u795
  1867  0412  0820               	movf	___wmul@multiplier,w
  1868  0413  0421               	iorwf	___wmul@multiplier+1,w
  1869  0414  1D03               	btfss	3,2
  1870  0415  2BFC               	goto	l1187
  1871  0416  0825               	movf	___wmul@product+1,w
  1872  0417  00A1               	movwf	?___wmul+1
  1873  0418  0824               	movf	___wmul@product,w
  1874  0419  00A0               	movwf	?___wmul
  1875  041A  0008               	return
  1876  041B                     __end_of___wmul:	
  1877                           
  1878                           	psect	text5
  1879  0348                     __ptext5:	
  1880 ;; *************** function ___lwmod *****************
  1881 ;; Defined at:
  1882 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  divisor         2   14[BANK0 ] unsigned int 
  1885 ;;  dividend        2   16[BANK0 ] unsigned int 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  counter         1   19[BANK0 ] unsigned char 
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  2   14[BANK0 ] unsigned int 
  1890 ;; Registers used:
  1891 ;;		wreg, status,2, status,0
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1897 ;;      Params:         0       4       0       0       0
  1898 ;;      Locals:         0       1       0       0       0
  1899 ;;      Temps:          0       1       0       0       0
  1900 ;;      Totals:         0       6       0       0       0
  1901 ;;Total ram usage:        6 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    2
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		_sprintf
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           
  1912                           ;psect for function ___lwmod
  1913  0348                     ___lwmod:	
  1914                           
  1915                           ;incstack = 0
  1916                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1917  0348  1283               	bcf	3,5	;RP0=0, select bank0
  1918  0349  1303               	bcf	3,6	;RP1=0, select bank0
  1919  034A  082E               	movf	___lwmod@divisor,w
  1920  034B  042F               	iorwf	___lwmod@divisor+1,w
  1921  034C  1903               	btfsc	3,2
  1922  034D  2B77               	goto	l1243
  1923  034E  01B3               	clrf	___lwmod@counter
  1924  034F  0AB3               	incf	___lwmod@counter,f
  1925  0350                     l1233:	
  1926  0350  1BAF               	btfsc	___lwmod@divisor+1,7
  1927  0351  2B5E               	goto	l1235
  1928  0352  3001               	movlw	1
  1929  0353                     u895:	
  1930  0353  1003               	clrc
  1931  0354  0DAE               	rlf	___lwmod@divisor,f
  1932  0355  0DAF               	rlf	___lwmod@divisor+1,f
  1933  0356  3EFF               	addlw	-1
  1934  0357  1D03               	skipz
  1935  0358  2B53               	goto	u895
  1936  0359  3001               	movlw	1
  1937  035A  00B2               	movwf	??___lwmod
  1938  035B  0832               	movf	??___lwmod,w
  1939  035C  07B3               	addwf	___lwmod@counter,f
  1940  035D  2B50               	goto	l1233
  1941  035E                     l1235:	
  1942  035E  082F               	movf	___lwmod@divisor+1,w
  1943  035F  0231               	subwf	___lwmod@dividend+1,w
  1944  0360  1D03               	skipz
  1945  0361  2B64               	goto	u915
  1946  0362  082E               	movf	___lwmod@divisor,w
  1947  0363  0230               	subwf	___lwmod@dividend,w
  1948  0364                     u915:	
  1949  0364  1C03               	skipc
  1950  0365  2B6C               	goto	l1239
  1951  0366  082E               	movf	___lwmod@divisor,w
  1952  0367  02B0               	subwf	___lwmod@dividend,f
  1953  0368  082F               	movf	___lwmod@divisor+1,w
  1954  0369  1C03               	skipc
  1955  036A  03B1               	decf	___lwmod@dividend+1,f
  1956  036B  02B1               	subwf	___lwmod@dividend+1,f
  1957  036C                     l1239:	
  1958  036C  3001               	movlw	1
  1959  036D                     u925:	
  1960  036D  1003               	clrc
  1961  036E  0CAF               	rrf	___lwmod@divisor+1,f
  1962  036F  0CAE               	rrf	___lwmod@divisor,f
  1963  0370  3EFF               	addlw	-1
  1964  0371  1D03               	skipz
  1965  0372  2B6D               	goto	u925
  1966  0373  3001               	movlw	1
  1967  0374  02B3               	subwf	___lwmod@counter,f
  1968  0375  1D03               	btfss	3,2
  1969  0376  2B5E               	goto	l1235
  1970  0377                     l1243:	
  1971  0377  0831               	movf	___lwmod@dividend+1,w
  1972  0378  00AF               	movwf	?___lwmod+1
  1973  0379  0830               	movf	___lwmod@dividend,w
  1974  037A  00AE               	movwf	?___lwmod
  1975  037B  0008               	return
  1976  037C                     __end_of___lwmod:	
  1977                           
  1978                           	psect	text6
  1979  030A                     __ptext6:	
  1980 ;; *************** function ___lwdiv *****************
  1981 ;; Defined at:
  1982 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;  divisor         2    6[BANK0 ] unsigned int 
  1985 ;;  dividend        2    8[BANK0 ] unsigned int 
  1986 ;; Auto vars:     Size  Location     Type
  1987 ;;  quotient        2   11[BANK0 ] unsigned int 
  1988 ;;  counter         1   13[BANK0 ] unsigned char 
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  2    6[BANK0 ] unsigned int 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, status,0
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1998 ;;      Params:         0       4       0       0       0
  1999 ;;      Locals:         0       3       0       0       0
  2000 ;;      Temps:          0       1       0       0       0
  2001 ;;      Totals:         0       8       0       0       0
  2002 ;;Total ram usage:        8 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    2
  2005 ;; This function calls:
  2006 ;;		Nothing
  2007 ;; This function is called by:
  2008 ;;		_main
  2009 ;;		_sprintf
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           
  2014                           ;psect for function ___lwdiv
  2015  030A                     ___lwdiv:	
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2019  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2020  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2021  030C  01AB               	clrf	___lwdiv@quotient
  2022  030D  01AC               	clrf	___lwdiv@quotient+1
  2023  030E  0826               	movf	___lwdiv@divisor,w
  2024  030F  0427               	iorwf	___lwdiv@divisor+1,w
  2025  0310  1903               	btfsc	3,2
  2026  0311  2B43               	goto	l1221
  2027  0312  01AD               	clrf	___lwdiv@counter
  2028  0313  0AAD               	incf	___lwdiv@counter,f
  2029  0314                     l1209:	
  2030  0314  1BA7               	btfsc	___lwdiv@divisor+1,7
  2031  0315  2B22               	goto	l1211
  2032  0316  3001               	movlw	1
  2033  0317                     u825:	
  2034  0317  1003               	clrc
  2035  0318  0DA6               	rlf	___lwdiv@divisor,f
  2036  0319  0DA7               	rlf	___lwdiv@divisor+1,f
  2037  031A  3EFF               	addlw	-1
  2038  031B  1D03               	skipz
  2039  031C  2B17               	goto	u825
  2040  031D  3001               	movlw	1
  2041  031E  00AA               	movwf	??___lwdiv
  2042  031F  082A               	movf	??___lwdiv,w
  2043  0320  07AD               	addwf	___lwdiv@counter,f
  2044  0321  2B14               	goto	l1209
  2045  0322                     l1211:	
  2046  0322  3001               	movlw	1
  2047  0323                     u845:	
  2048  0323  1003               	clrc
  2049  0324  0DAB               	rlf	___lwdiv@quotient,f
  2050  0325  0DAC               	rlf	___lwdiv@quotient+1,f
  2051  0326  3EFF               	addlw	-1
  2052  0327  1D03               	skipz
  2053  0328  2B23               	goto	u845
  2054  0329  0827               	movf	___lwdiv@divisor+1,w
  2055  032A  0229               	subwf	___lwdiv@dividend+1,w
  2056  032B  1D03               	skipz
  2057  032C  2B2F               	goto	u855
  2058  032D  0826               	movf	___lwdiv@divisor,w
  2059  032E  0228               	subwf	___lwdiv@dividend,w
  2060  032F                     u855:	
  2061  032F  1C03               	skipc
  2062  0330  2B38               	goto	l1217
  2063  0331  0826               	movf	___lwdiv@divisor,w
  2064  0332  02A8               	subwf	___lwdiv@dividend,f
  2065  0333  0827               	movf	___lwdiv@divisor+1,w
  2066  0334  1C03               	skipc
  2067  0335  03A9               	decf	___lwdiv@dividend+1,f
  2068  0336  02A9               	subwf	___lwdiv@dividend+1,f
  2069  0337  142B               	bsf	___lwdiv@quotient,0
  2070  0338                     l1217:	
  2071  0338  3001               	movlw	1
  2072  0339                     u865:	
  2073  0339  1003               	clrc
  2074  033A  0CA7               	rrf	___lwdiv@divisor+1,f
  2075  033B  0CA6               	rrf	___lwdiv@divisor,f
  2076  033C  3EFF               	addlw	-1
  2077  033D  1D03               	skipz
  2078  033E  2B39               	goto	u865
  2079  033F  3001               	movlw	1
  2080  0340  02AD               	subwf	___lwdiv@counter,f
  2081  0341  1D03               	btfss	3,2
  2082  0342  2B22               	goto	l1211
  2083  0343                     l1221:	
  2084  0343  082C               	movf	___lwdiv@quotient+1,w
  2085  0344  00A7               	movwf	?___lwdiv+1
  2086  0345  082B               	movf	___lwdiv@quotient,w
  2087  0346  00A6               	movwf	?___lwdiv
  2088  0347  0008               	return
  2089  0348                     __end_of___lwdiv:	
  2090                           
  2091                           	psect	text7
  2092  03A7                     __ptext7:	
  2093 ;; *************** function _lcd_puts *****************
  2094 ;; Defined at:
  2095 ;;		line 52 in file "lcd.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;  s               2    4[BANK0 ] PTR const unsigned char 
  2098 ;;		 -> main@message(4), STR_1(8), 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;		None
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2110 ;;      Params:         0       2       0       0       0
  2111 ;;      Locals:         0       0       0       0       0
  2112 ;;      Temps:          0       0       0       0       0
  2113 ;;      Totals:         0       2       0       0       0
  2114 ;;Total ram usage:        2 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; Hardware stack levels required when called:    4
  2117 ;; This function calls:
  2118 ;;		_LCD_RS_SetHigh
  2119 ;;		_lcd_write
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           
  2126                           ;psect for function _lcd_puts
  2127  03A7                     _lcd_puts:	
  2128                           
  2129                           ;lcd.c: 53: LCD_RS_SetHigh();
  2130                           
  2131                           ;incstack = 0
  2132                           ; Regs used in _lcd_puts: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2133  03A7  120A  118A  24B8  120A  118A  	fcall	_LCD_RS_SetHigh
  2134  03AC                     l1285:	
  2135                           ;lcd.c: 54: while(*s)
  2136                           
  2137  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2138  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2139  03AE  0825               	movf	lcd_puts@s+1,w
  2140  03AF  00FF               	movwf	127
  2141  03B0  0824               	movf	lcd_puts@s,w
  2142  03B1  0084               	movwf	4
  2143  03B2  120A  118A  23D1  120A  118A  	fcall	stringtab
  2144  03B7  3A00               	xorlw	0
  2145  03B8  1903               	btfsc	3,2
  2146  03B9  0008               	return
  2147                           
  2148                           ;lcd.c: 55: lcd_write(*s++);
  2149  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2150  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  2151  03BC  0825               	movf	lcd_puts@s+1,w
  2152  03BD  00FF               	movwf	127
  2153  03BE  0824               	movf	lcd_puts@s,w
  2154  03BF  0084               	movwf	4
  2155  03C0  120A  118A  23D1  120A  118A  	fcall	stringtab
  2156  03C5  120A  118A  241B  120A  118A  	fcall	_lcd_write
  2157  03CA  3001               	movlw	1
  2158  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  2159  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  2160  03CD  07A4               	addwf	lcd_puts@s,f
  2161  03CE  1803               	skipnc
  2162  03CF  0AA5               	incf	lcd_puts@s+1,f
  2163  03D0  2BAC               	goto	l1285
  2164  03D1                     __end_of_lcd_puts:	
  2165                           
  2166                           	psect	text8
  2167  04B8                     __ptext8:	
  2168 ;; *************** function _LCD_RS_SetHigh *****************
  2169 ;; Defined at:
  2170 ;;		line 24 in file "lcd.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;		None
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;		None
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      void 
  2177 ;; Registers used:
  2178 ;;		None
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2184 ;;      Params:         0       0       0       0       0
  2185 ;;      Locals:         0       0       0       0       0
  2186 ;;      Temps:          0       0       0       0       0
  2187 ;;      Totals:         0       0       0       0       0
  2188 ;;Total ram usage:        0 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    2
  2191 ;; This function calls:
  2192 ;;		Nothing
  2193 ;; This function is called by:
  2194 ;;		_lcd_puts
  2195 ;;		_lcd_putchar
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           
  2200                           ;psect for function _LCD_RS_SetHigh
  2201  04B8                     _LCD_RS_SetHigh:	
  2202                           
  2203                           ;incstack = 0
  2204                           ; Regs used in _LCD_RS_SetHigh: []
  2205  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  2206  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  2207  04BA  1505               	bsf	5,2	;volatile
  2208  04BB  0008               	return
  2209  04BC                     __end_of_LCD_RS_SetHigh:	
  2210                           
  2211                           	psect	text9
  2212  0272                     __ptext9:	
  2213 ;; *************** function _lcd_init *****************
  2214 ;; Defined at:
  2215 ;;		line 84 in file "lcd.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;		None
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0, pclath, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2229 ;;      Params:         0       0       0       0       0
  2230 ;;      Locals:         0       0       0       0       0
  2231 ;;      Temps:          0       2       0       0       0
  2232 ;;      Totals:         0       2       0       0       0
  2233 ;;Total ram usage:        2 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    4
  2236 ;; This function calls:
  2237 ;;		_LCD_RS_SetLow
  2238 ;;		_LCD_RW_SetLow
  2239 ;;		_lcd_write
  2240 ;; This function is called by:
  2241 ;;		_main
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           
  2246                           ;psect for function _lcd_init
  2247  0272                     _lcd_init:	
  2248                           
  2249                           ;lcd.c: 86: TRISB0 = 0;
  2250                           
  2251                           ;incstack = 0
  2252                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  2253  0272  1683               	bsf	3,5	;RP0=1, select bank1
  2254  0273  1303               	bcf	3,6	;RP1=0, select bank1
  2255  0274  1006               	bcf	6,0	;volatile
  2256                           
  2257                           ;lcd.c: 87: ANS12 = 0;
  2258  0275  1683               	bsf	3,5	;RP0=1, select bank3
  2259  0276  1703               	bsf	3,6	;RP1=1, select bank3
  2260  0277  1209               	bcf	9,4	;volatile
  2261                           
  2262                           ;lcd.c: 88: TRISA3 = 0;
  2263  0278  1683               	bsf	3,5	;RP0=1, select bank1
  2264  0279  1303               	bcf	3,6	;RP1=0, select bank1
  2265  027A  1185               	bcf	5,3	;volatile
  2266                           
  2267                           ;lcd.c: 89: ANS3 = 0;
  2268  027B  1683               	bsf	3,5	;RP0=1, select bank3
  2269  027C  1703               	bsf	3,6	;RP1=1, select bank3
  2270  027D  1188               	bcf	8,3	;volatile
  2271                           
  2272                           ;lcd.c: 90: TRISA2 = 0;
  2273  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2274  027F  1303               	bcf	3,6	;RP1=0, select bank1
  2275  0280  1105               	bcf	5,2	;volatile
  2276                           
  2277                           ;lcd.c: 91: ANS2 = 0;
  2278  0281  1683               	bsf	3,5	;RP0=1, select bank3
  2279  0282  1703               	bsf	3,6	;RP1=1, select bank3
  2280  0283  1108               	bcf	8,2	;volatile
  2281                           
  2282                           ;lcd.c: 92: TRISC = 0b11000110;
  2283  0284  30C6               	movlw	198
  2284  0285  1683               	bsf	3,5	;RP0=1, select bank1
  2285  0286  1303               	bcf	3,6	;RP1=0, select bank1
  2286  0287  0087               	movwf	7	;volatile
  2287                           
  2288                           ;lcd.c: 93: RB0 = 0;
  2289  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2290  0289  1303               	bcf	3,6	;RP1=0, select bank0
  2291  028A  1006               	bcf	6,0	;volatile
  2292                           
  2293                           ;lcd.c: 95: LCD_RW_SetLow();
  2294  028B  120A  118A  24BC  120A  118A  	fcall	_LCD_RW_SetLow
  2295                           
  2296                           ;lcd.c: 96: LCD_RS_SetLow();
  2297  0290  120A  118A  24C0  120A  118A  	fcall	_LCD_RS_SetLow
  2298                           
  2299                           ;lcd.c: 97: _delay((unsigned long)((15)*(20000000/4000.0)));
  2300  0295  3062               	movlw	98
  2301  0296  1283               	bcf	3,5	;RP0=0, select bank0
  2302  0297  1303               	bcf	3,6	;RP1=0, select bank0
  2303  0298  00A5               	movwf	??_lcd_init+1
  2304  0299  3065               	movlw	101
  2305  029A  00A4               	movwf	??_lcd_init
  2306  029B                     u1297:	
  2307  029B  0BA4               	decfsz	??_lcd_init,f
  2308  029C  2A9B               	goto	u1297
  2309  029D  0BA5               	decfsz	??_lcd_init+1,f
  2310  029E  2A9B               	goto	u1297
  2311                           
  2312                           ;lcd.c: 98: lcd_write(0x02);
  2313  029F  3002               	movlw	2
  2314  02A0  120A  118A  241B  120A  118A  	fcall	_lcd_write
  2315                           
  2316                           ;lcd.c: 99: _delay((unsigned long)((2)*(20000000/4000.0)));
  2317  02A5  300D               	movlw	13
  2318  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2319  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2320  02A8  00A5               	movwf	??_lcd_init+1
  2321  02A9  30FB               	movlw	251
  2322  02AA  00A4               	movwf	??_lcd_init
  2323  02AB                     u1307:	
  2324  02AB  0BA4               	decfsz	??_lcd_init,f
  2325  02AC  2AAB               	goto	u1307
  2326  02AD  0BA5               	decfsz	??_lcd_init+1,f
  2327  02AE  2AAB               	goto	u1307
  2328                           
  2329                           ;lcd.c: 100: lcd_write(0x28);
  2330  02AF  3028               	movlw	40
  2331  02B0  120A  118A  241B  120A  118A  	fcall	_lcd_write
  2332                           
  2333                           ;lcd.c: 101: lcd_write(0x08);
  2334  02B5  3008               	movlw	8
  2335  02B6  120A  118A  241B  120A  118A  	fcall	_lcd_write
  2336                           
  2337                           ;lcd.c: 102: lcd_write(0x0f);
  2338  02BB  300F               	movlw	15
  2339  02BC  120A  118A  241B  120A  118A  	fcall	_lcd_write
  2340                           
  2341                           ;lcd.c: 103: lcd_write(0x06);
  2342  02C1  3006               	movlw	6
  2343  02C2  120A  118A  241B   	fcall	_lcd_write
  2344  02C5  0008               	return
  2345  02C6                     __end_of_lcd_init:	
  2346                           
  2347                           	psect	text10
  2348  04BC                     __ptext10:	
  2349 ;; *************** function _LCD_RW_SetLow *****************
  2350 ;; Defined at:
  2351 ;;		line 25 in file "lcd.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;		None
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		None
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2365 ;;      Params:         0       0       0       0       0
  2366 ;;      Locals:         0       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0
  2368 ;;      Totals:         0       0       0       0       0
  2369 ;;Total ram usage:        0 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    2
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_lcd_init
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           
  2380                           ;psect for function _LCD_RW_SetLow
  2381  04BC                     _LCD_RW_SetLow:	
  2382                           
  2383                           ;incstack = 0
  2384                           ; Regs used in _LCD_RW_SetLow: []
  2385  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  2386  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  2387  04BE  1185               	bcf	5,3	;volatile
  2388  04BF  0008               	return
  2389  04C0                     __end_of_LCD_RW_SetLow:	
  2390                           
  2391                           	psect	text11
  2392  049B                     __ptext11:	
  2393 ;; *************** function _lcd_goto *****************
  2394 ;; Defined at:
  2395 ;;		line 59 in file "lcd.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  pos             1    wreg     unsigned char 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  pos             1    4[BANK0 ] unsigned char 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0, pclath, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2409 ;;      Params:         0       0       0       0       0
  2410 ;;      Locals:         0       1       0       0       0
  2411 ;;      Temps:          0       0       0       0       0
  2412 ;;      Totals:         0       1       0       0       0
  2413 ;;Total ram usage:        1 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    4
  2416 ;; This function calls:
  2417 ;;		_LCD_RS_SetLow
  2418 ;;		_lcd_write
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           
  2425                           ;psect for function _lcd_goto
  2426  049B                     _lcd_goto:	
  2427                           
  2428                           ;incstack = 0
  2429                           ; Regs used in _lcd_goto: [wreg+status,2+status,0+pclath+cstack]
  2430                           ;lcd_goto@pos stored from wreg
  2431  049B  1283               	bcf	3,5	;RP0=0, select bank0
  2432  049C  1303               	bcf	3,6	;RP1=0, select bank0
  2433  049D  00A4               	movwf	lcd_goto@pos
  2434                           
  2435                           ;lcd.c: 60: LCD_RS_SetLow();
  2436  049E  120A  118A  24C0  120A  118A  	fcall	_LCD_RS_SetLow
  2437                           
  2438                           ;lcd.c: 61: lcd_write(0x80 + pos);
  2439  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2440  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2441  04A5  0824               	movf	lcd_goto@pos,w
  2442  04A6  3E80               	addlw	128
  2443  04A7  120A  118A  241B   	fcall	_lcd_write
  2444  04AA  0008               	return
  2445  04AB                     __end_of_lcd_goto:	
  2446                           
  2447                           	psect	text12
  2448  0476                     __ptext12:	
  2449 ;; *************** function _lcd_cursor *****************
  2450 ;; Defined at:
  2451 ;;		line 68 in file "lcd.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  on              2    4[BANK0 ] int 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;		None
  2456 ;; Return value:  Size  Location     Type
  2457 ;;                  1    wreg      void 
  2458 ;; Registers used:
  2459 ;;		wreg, status,2, status,0, pclath, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : 0/0
  2462 ;;		On exit  : 0/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2465 ;;      Params:         0       2       0       0       0
  2466 ;;      Locals:         0       0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0
  2468 ;;      Totals:         0       2       0       0       0
  2469 ;;Total ram usage:        2 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    4
  2472 ;; This function calls:
  2473 ;;		_LCD_RS_SetLow
  2474 ;;		_lcd_write
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _lcd_cursor
  2482  0476                     _lcd_cursor:	
  2483                           
  2484                           ;lcd.c: 69: LCD_RS_SetLow();
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _lcd_cursor: [wreg+status,2+status,0+pclath+cstack]
  2488  0476  120A  118A  24C0  120A  118A  	fcall	_LCD_RS_SetLow
  2489                           
  2490                           ;lcd.c: 70: if (on) {
  2491  047B  1283               	bcf	3,5	;RP0=0, select bank0
  2492  047C  1303               	bcf	3,6	;RP1=0, select bank0
  2493  047D  0824               	movf	lcd_cursor@on,w
  2494  047E  0425               	iorwf	lcd_cursor@on+1,w
  2495  047F  1903               	btfsc	3,2
  2496  0480  2C86               	goto	l1297
  2497                           
  2498                           ;lcd.c: 71: lcd_write(0x0f);
  2499  0481  300F               	movlw	15
  2500  0482  120A  118A  241B   	fcall	_lcd_write
  2501                           
  2502                           ;lcd.c: 72: } else {
  2503  0485  0008               	return
  2504  0486                     l1297:	
  2505                           
  2506                           ;lcd.c: 73: lcd_write(0x0c);
  2507  0486  300C               	movlw	12
  2508  0487  120A  118A  241B   	fcall	_lcd_write
  2509  048A  0008               	return
  2510  048B                     __end_of_lcd_cursor:	
  2511                           
  2512                           	psect	text13
  2513  041B                     __ptext13:	
  2514 ;; *************** function _lcd_write *****************
  2515 ;; Defined at:
  2516 ;;		line 38 in file "lcd.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  c               1    wreg     unsigned char 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  c               1    3[BANK0 ] unsigned char 
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0, pclath, cstack
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2530 ;;      Params:         0       0       0       0       0
  2531 ;;      Locals:         0       1       0       0       0
  2532 ;;      Temps:          0       1       0       0       0
  2533 ;;      Totals:         0       2       0       0       0
  2534 ;;Total ram usage:        2 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    3
  2537 ;; This function calls:
  2538 ;;		_lcd_write_nibble
  2539 ;; This function is called by:
  2540 ;;		_lcd_puts
  2541 ;;		_lcd_goto
  2542 ;;		_lcd_cursor
  2543 ;;		_lcd_init
  2544 ;;		_lcd_clear
  2545 ;;		_lcd_putchar
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function _lcd_write
  2551  041B                     _lcd_write:	
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in _lcd_write: [wreg+status,2+status,0+pclath+cstack]
  2555                           ;lcd_write@c stored from wreg
  2556  041B  1283               	bcf	3,5	;RP0=0, select bank0
  2557  041C  1303               	bcf	3,6	;RP1=0, select bank0
  2558  041D  00A3               	movwf	lcd_write@c
  2559                           
  2560                           ;lcd.c: 39: lcd_write_nibble(c >> 4);
  2561  041E  0823               	movf	lcd_write@c,w
  2562  041F  00A2               	movwf	??_lcd_write
  2563  0420  3004               	movlw	4
  2564  0421                     u745:	
  2565  0421  1003               	clrc
  2566  0422  0CA2               	rrf	??_lcd_write,f
  2567  0423  3EFF               	addlw	-1
  2568  0424  1D03               	skipz
  2569  0425  2C21               	goto	u745
  2570  0426  0822               	movf	??_lcd_write,w
  2571  0427  120A  118A  22C6  120A  118A  	fcall	_lcd_write_nibble
  2572                           
  2573                           ;lcd.c: 40: lcd_write_nibble(c);
  2574  042C  1283               	bcf	3,5	;RP0=0, select bank0
  2575  042D  1303               	bcf	3,6	;RP1=0, select bank0
  2576  042E  0823               	movf	lcd_write@c,w
  2577  042F  120A  118A  22C6  120A  118A  	fcall	_lcd_write_nibble
  2578                           
  2579                           ;lcd.c: 41: _delay((unsigned long)((40)*(20000000/4000000.0)));
  2580  0434  3041               	movlw	65
  2581  0435  1283               	bcf	3,5	;RP0=0, select bank0
  2582  0436  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0437  00A2               	movwf	??_lcd_write
  2584  0438                     u1317:	
  2585  0438  0BA2               	decfsz	??_lcd_write,f
  2586  0439  2C38               	goto	u1317
  2587  043A  2C3B               	nop2
  2588  043B  0008               	return
  2589  043C                     __end_of_lcd_write:	
  2590                           
  2591                           	psect	text14
  2592  02C6                     __ptext14:	
  2593 ;; *************** function _lcd_write_nibble *****************
  2594 ;; Defined at:
  2595 ;;		line 28 in file "lcd.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  c               1    wreg     unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  c               1    1[BANK0 ] unsigned char 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2, status,0
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2609 ;;      Params:         0       0       0       0       0
  2610 ;;      Locals:         0       1       0       0       0
  2611 ;;      Temps:          0       1       0       0       0
  2612 ;;      Totals:         0       2       0       0       0
  2613 ;;Total ram usage:        2 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    2
  2616 ;; This function calls:
  2617 ;;		Nothing
  2618 ;; This function is called by:
  2619 ;;		_lcd_write
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           
  2624                           ;psect for function _lcd_write_nibble
  2625  02C6                     _lcd_write_nibble:	
  2626                           
  2627                           ;incstack = 0
  2628                           ; Regs used in _lcd_write_nibble: [wreg+status,2+status,0]
  2629                           ;lcd_write_nibble@c stored from wreg
  2630  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2631  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  2632  02C8  00A1               	movwf	lcd_write_nibble@c
  2633                           
  2634                           ;lcd.c: 29: RC0 = (c & 0b00000001) >> 0;
  2635  02C9  1C21               	btfss	lcd_write_nibble@c,0
  2636  02CA  2ACF               	goto	u630
  2637  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2638  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  2639  02CD  1407               	bsf	7,0	;volatile
  2640  02CE  2AD2               	goto	l1153
  2641  02CF                     u630:	
  2642  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  2643  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  2644  02D1  1007               	bcf	7,0	;volatile
  2645  02D2                     l1153:	
  2646                           
  2647                           ;lcd.c: 30: RC3 = (c & 0b00000010) >> 1;
  2648  02D2  0821               	movf	lcd_write_nibble@c,w
  2649  02D3  00A0               	movwf	??_lcd_write_nibble
  2650  02D4  3001               	movlw	1
  2651  02D5                     u655:	
  2652  02D5  1003               	clrc
  2653  02D6  0CA0               	rrf	??_lcd_write_nibble,f
  2654  02D7  3EFF               	addlw	-1
  2655  02D8  1D03               	skipz
  2656  02D9  2AD5               	goto	u655
  2657  02DA  1C20               	btfss	??_lcd_write_nibble,0
  2658  02DB  2AE0               	goto	u660
  2659  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2660  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2661  02DE  1587               	bsf	7,3	;volatile
  2662  02DF  2AE3               	goto	u674
  2663  02E0                     u660:	
  2664  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  2665  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  2666  02E2  1187               	bcf	7,3	;volatile
  2667  02E3                     u674:	
  2668                           
  2669                           ;lcd.c: 31: RC4 = (c & 0b00000100) >> 2;
  2670  02E3  0821               	movf	lcd_write_nibble@c,w
  2671  02E4  00A0               	movwf	??_lcd_write_nibble
  2672  02E5  3002               	movlw	2
  2673  02E6                     u685:	
  2674  02E6  1003               	clrc
  2675  02E7  0CA0               	rrf	??_lcd_write_nibble,f
  2676  02E8  3EFF               	addlw	-1
  2677  02E9  1D03               	skipz
  2678  02EA  2AE6               	goto	u685
  2679  02EB  1C20               	btfss	??_lcd_write_nibble,0
  2680  02EC  2AF1               	goto	u690
  2681  02ED  1283               	bcf	3,5	;RP0=0, select bank0
  2682  02EE  1303               	bcf	3,6	;RP1=0, select bank0
  2683  02EF  1607               	bsf	7,4	;volatile
  2684  02F0  2AF4               	goto	u704
  2685  02F1                     u690:	
  2686  02F1  1283               	bcf	3,5	;RP0=0, select bank0
  2687  02F2  1303               	bcf	3,6	;RP1=0, select bank0
  2688  02F3  1207               	bcf	7,4	;volatile
  2689  02F4                     u704:	
  2690                           
  2691                           ;lcd.c: 32: RC5 = (c & 0b00001000) >> 3;
  2692  02F4  0821               	movf	lcd_write_nibble@c,w
  2693  02F5  00A0               	movwf	??_lcd_write_nibble
  2694  02F6  3003               	movlw	3
  2695  02F7                     u715:	
  2696  02F7  1003               	clrc
  2697  02F8  0CA0               	rrf	??_lcd_write_nibble,f
  2698  02F9  3EFF               	addlw	-1
  2699  02FA  1D03               	skipz
  2700  02FB  2AF7               	goto	u715
  2701  02FC  1C20               	btfss	??_lcd_write_nibble,0
  2702  02FD  2B02               	goto	u720
  2703  02FE  1283               	bcf	3,5	;RP0=0, select bank0
  2704  02FF  1303               	bcf	3,6	;RP1=0, select bank0
  2705  0300  1687               	bsf	7,5	;volatile
  2706  0301  2B05               	goto	l1155
  2707  0302                     u720:	
  2708  0302  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0303  1303               	bcf	3,6	;RP1=0, select bank0
  2710  0304  1287               	bcf	7,5	;volatile
  2711  0305                     l1155:	
  2712                           
  2713                           ;lcd.c: 34: ((RB0 = 1),(RB0 = 1),(RB0 = 1),(RB0 = 0));
  2714  0305  1406               	bsf	6,0	;volatile
  2715  0306  1406               	bsf	6,0	;volatile
  2716  0307  1406               	bsf	6,0	;volatile
  2717  0308  1006               	bcf	6,0	;volatile
  2718  0309  0008               	return
  2719  030A                     __end_of_lcd_write_nibble:	
  2720                           
  2721                           	psect	text15
  2722  04C0                     __ptext15:	
  2723 ;; *************** function _LCD_RS_SetLow *****************
  2724 ;; Defined at:
  2725 ;;		line 23 in file "lcd.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		None
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2739 ;;      Params:         0       0       0       0       0
  2740 ;;      Locals:         0       0       0       0       0
  2741 ;;      Temps:          0       0       0       0       0
  2742 ;;      Totals:         0       0       0       0       0
  2743 ;;Total ram usage:        0 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    2
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_lcd_goto
  2750 ;;		_lcd_cursor
  2751 ;;		_lcd_init
  2752 ;;		_lcd_clear
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           
  2757                           ;psect for function _LCD_RS_SetLow
  2758  04C0                     _LCD_RS_SetLow:	
  2759                           
  2760                           ;incstack = 0
  2761                           ; Regs used in _LCD_RS_SetLow: []
  2762  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2763  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2764  04C2  1105               	bcf	5,2	;volatile
  2765  04C3  0008               	return
  2766  04C4                     __end_of_LCD_RS_SetLow:	
  2767                           
  2768                           	psect	text16
  2769  043C                     __ptext16:	
  2770 ;; *************** function _adc_init_0 *****************
  2771 ;; Defined at:
  2772 ;;		line 11 in file "adc.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, status,2
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2786 ;;      Params:         0       0       0       0       0
  2787 ;;      Locals:         0       0       0       0       0
  2788 ;;      Temps:          0       0       0       0       0
  2789 ;;      Totals:         0       0       0       0       0
  2790 ;;Total ram usage:        0 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    2
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_main
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           
  2801                           ;psect for function _adc_init_0
  2802  043C                     _adc_init_0:	
  2803                           
  2804                           ;adc.c: 12: TRISA = 0b00000001;
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _adc_init_0: [wreg+status,2]
  2808  043C  3001               	movlw	1
  2809  043D  1683               	bsf	3,5	;RP0=1, select bank1
  2810  043E  1303               	bcf	3,6	;RP1=0, select bank1
  2811  043F  0085               	movwf	5	;volatile
  2812                           
  2813                           ;adc.c: 13: ANSEL = 0b00000001;
  2814  0440  3001               	movlw	1
  2815  0441  1683               	bsf	3,5	;RP0=1, select bank3
  2816  0442  1703               	bsf	3,6	;RP1=1, select bank3
  2817  0443  0088               	movwf	8	;volatile
  2818                           
  2819                           ;adc.c: 14: ANSELH = 0;
  2820  0444  0189               	clrf	9	;volatile
  2821                           
  2822                           ;adc.c: 15: ADCS0 = 0;
  2823  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2824  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2825  0447  131F               	bcf	31,6	;volatile
  2826                           
  2827                           ;adc.c: 16: ADCS1 = 1;
  2828  0448  179F               	bsf	31,7	;volatile
  2829                           
  2830                           ;adc.c: 17: VCFG0 = 0;
  2831  0449  1683               	bsf	3,5	;RP0=1, select bank1
  2832  044A  1303               	bcf	3,6	;RP1=0, select bank1
  2833  044B  121F               	bcf	31,4	;volatile
  2834                           
  2835                           ;adc.c: 18: VCFG1 = 0;
  2836  044C  129F               	bcf	31,5	;volatile
  2837                           
  2838                           ;adc.c: 19: CHS0 = 0;
  2839  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2840  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2841  044F  111F               	bcf	31,2	;volatile
  2842                           
  2843                           ;adc.c: 20: CHS1 = 0;
  2844  0450  119F               	bcf	31,3	;volatile
  2845                           
  2846                           ;adc.c: 21: CHS2 = 0;
  2847  0451  121F               	bcf	31,4	;volatile
  2848                           
  2849                           ;adc.c: 22: CHS3 = 0;
  2850  0452  129F               	bcf	31,5	;volatile
  2851                           
  2852                           ;adc.c: 23: ADFM = 0;
  2853  0453  1683               	bsf	3,5	;RP0=1, select bank1
  2854  0454  1303               	bcf	3,6	;RP1=0, select bank1
  2855  0455  139F               	bcf	31,7	;volatile
  2856                           
  2857                           ;adc.c: 24: ADON = 1;
  2858  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2859  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2860  0458  141F               	bsf	31,0	;volatile
  2861  0459  0008               	return
  2862  045A                     __end_of_adc_init_0:	
  2863                           
  2864                           	psect	text17
  2865  045A                     __ptext17:	
  2866 ;; *************** function _isr *****************
  2867 ;; Defined at:
  2868 ;;		line 44 in file "main.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0, pclath, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2882 ;;      Params:         0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0
  2884 ;;      Temps:          4       0       0       0       0
  2885 ;;      Totals:         4       0       0       0       0
  2886 ;;Total ram usage:        4 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    1
  2889 ;; This function calls:
  2890 ;;		_adc_read_0
  2891 ;; This function is called by:
  2892 ;;		Interrupt level 1
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           
  2897                           ;psect for function _isr
  2898  045A                     _isr:	
  2899                           
  2900                           ;main.c: 47: if (T0IE && T0IF) {
  2901  045A  1A8B               	btfsc	11,5	;volatile
  2902  045B  1D0B               	btfss	11,2	;volatile
  2903  045C  2C6B               	goto	i1l252
  2904                           
  2905                           ;main.c: 48: ADC = adc_read_0();
  2906  045D  120A  118A  237C  120A  118A  	fcall	_adc_read_0
  2907  0462  0871               	movf	?_adc_read_0+1,w
  2908  0463  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0464  1303               	bcf	3,6	;RP1=0, select bank0
  2910  0465  00CD               	movwf	_ADC+1	;volatile
  2911  0466  0870               	movf	?_adc_read_0,w
  2912  0467  00CC               	movwf	_ADC	;volatile
  2913                           
  2914                           ;main.c: 49: TMR0 = 157;
  2915  0468  309D               	movlw	157
  2916  0469  0081               	movwf	1	;volatile
  2917                           
  2918                           ;main.c: 50: T0IF = 0;
  2919  046A  110B               	bcf	11,2	;volatile
  2920  046B                     i1l252:	
  2921  046B  087C               	movf	??_isr+3,w
  2922  046C  00FF               	movwf	127
  2923  046D  087B               	movf	??_isr+2,w
  2924  046E  008A               	movwf	10
  2925  046F  087A               	movf	??_isr+1,w
  2926  0470  0084               	movwf	4
  2927  0471  0E79               	swapf	??_isr^(0+-128),w
  2928  0472  0083               	movwf	3
  2929  0473  0EFE               	swapf	126,f
  2930  0474  0E7E               	swapf	126,w
  2931  0475  0009               	retfie
  2932  0476                     __end_of_isr:	
  2933                           
  2934                           	psect	intentry
  2935  0004                     __pintentry:	
  2936                           ;incstack = 0
  2937                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  2938                           
  2939  0004                     interrupt_function:	
  2940  007E                     saved_w	set	btemp
  2941  0004  00FE               	movwf	btemp
  2942  0005  0E03               	swapf	3,w
  2943  0006  00F9               	movwf	??_isr
  2944  0007  0804               	movf	4,w
  2945  0008  00FA               	movwf	??_isr+1
  2946  0009  080A               	movf	10,w
  2947  000A  00FB               	movwf	??_isr+2
  2948  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2949  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2950  000D  087F               	movf	btemp+1,w
  2951  000E  00FC               	movwf	??_isr+3
  2952  000F  120A  118A  2C5A   	ljmp	_isr
  2953                           
  2954                           	psect	text18
  2955  037C                     __ptext18:	
  2956 ;; *************** function _adc_read_0 *****************
  2957 ;; Defined at:
  2958 ;;		line 28 in file "adc.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;		None
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  result          2    7[COMMON] int 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  2    0[COMMON] unsigned int 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2972 ;;      Params:         2       0       0       0       0
  2973 ;;      Locals:         2       0       0       0       0
  2974 ;;      Temps:          5       0       0       0       0
  2975 ;;      Totals:         9       0       0       0       0
  2976 ;;Total ram usage:        9 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; This function calls:
  2979 ;;		Nothing
  2980 ;; This function is called by:
  2981 ;;		_isr
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           
  2986                           ;psect for function _adc_read_0
  2987  037C                     _adc_read_0:	
  2988                           
  2989                           ;adc.c: 29: GO = 1;
  2990                           
  2991                           ;incstack = 0
  2992                           ; Regs used in _adc_read_0: [wreg+status,2+status,0]
  2993  037C  1283               	bcf	3,5	;RP0=0, select bank0
  2994  037D  1303               	bcf	3,6	;RP1=0, select bank0
  2995  037E  149F               	bsf	31,1	;volatile
  2996  037F                     i1l38:	
  2997                           ;adc.c: 30: while(GO);
  2998                           
  2999  037F  189F               	btfsc	31,1	;volatile
  3000  0380  2B7F               	goto	i1l38
  3001                           
  3002                           ;adc.c: 31: int result = (ADRESH<<2)+(ADRESL>>6);
  3003  0381  1683               	bsf	3,5	;RP0=1, select bank1
  3004  0382  1303               	bcf	3,6	;RP1=0, select bank1
  3005  0383  081E               	movf	30,w	;volatile
  3006  0384  00F2               	movwf	??_adc_read_0
  3007  0385  3006               	movlw	6
  3008  0386                     u95_25:	
  3009  0386  1003               	clrc
  3010  0387  0CF2               	rrf	??_adc_read_0,f
  3011  0388  3EFF               	addlw	-1
  3012  0389  1D03               	skipz
  3013  038A  2B86               	goto	u95_25
  3014  038B  1283               	bcf	3,5	;RP0=0, select bank0
  3015  038C  1303               	bcf	3,6	;RP1=0, select bank0
  3016  038D  081E               	movf	30,w	;volatile
  3017  038E  00F3               	movwf	??_adc_read_0+1
  3018  038F  01F4               	clrf	??_adc_read_0+2
  3019  0390  1003               	clrc
  3020  0391  0DF3               	rlf	??_adc_read_0+1,f
  3021  0392  0DF4               	rlf	??_adc_read_0+2,f
  3022  0393  1003               	clrc
  3023  0394  0DF3               	rlf	??_adc_read_0+1,f
  3024  0395  0DF4               	rlf	??_adc_read_0+2,f
  3025  0396  0872               	movf	??_adc_read_0,w
  3026  0397  0773               	addwf	??_adc_read_0+1,w
  3027  0398  00F5               	movwf	??_adc_read_0+3
  3028  0399  3000               	movlw	0
  3029  039A  1803               	skipnc
  3030  039B  3001               	movlw	1
  3031  039C  0774               	addwf	??_adc_read_0+2,w
  3032  039D  00F6               	movwf	??_adc_read_0+4
  3033  039E  0875               	movf	??_adc_read_0+3,w
  3034  039F  00F7               	movwf	adc_read_0@result
  3035  03A0  0876               	movf	??_adc_read_0+4,w
  3036  03A1  00F8               	movwf	adc_read_0@result+1
  3037                           
  3038                           ;adc.c: 32: return result;
  3039  03A2  0878               	movf	adc_read_0@result+1,w
  3040  03A3  00F1               	movwf	?_adc_read_0+1
  3041  03A4  0877               	movf	adc_read_0@result,w
  3042  03A5  00F0               	movwf	?_adc_read_0
  3043  03A6  0008               	return
  3044  03A7                     __end_of_adc_read_0:	
  3045  007E                     btemp	set	126	;btemp
  3046  007E                     wtemp0	set	126


Data Sizes:
    Strings     13
    Constant    10
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     44      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 4
		 -> main@message(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_puts@s	PTR const unsigned char  size(2) Largest target is 8
		 -> main@message(BANK0[4]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_adc_read_0

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___lwdiv->___wmul
    _lcd_puts->_lcd_write
    _lcd_init->_lcd_write
    _lcd_goto->_lcd_write
    _lcd_cursor->_lcd_write
    _lcd_write->_lcd_write_nibble

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    3638
                                             35 BANK0      9     9      0
                            ___lwdiv
                             ___wmul
                         _adc_init_0
                         _lcd_cursor
                           _lcd_goto
                           _lcd_init
                           _lcd_puts
                            _sprintf
                            _t0_init
 ---------------------------------------------------------------------------------
 (1) _t0_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    20      3    2079
                                             20 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     304
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                             14 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     374
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2     283
                                              4 BANK0      2     0      2
                     _LCD_RS_SetHigh
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _LCD_RS_SetHigh                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     132
                                              4 BANK0      2     2      0
                      _LCD_RS_SetLow
                      _LCD_RW_SetLow
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _LCD_RW_SetLow                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_goto                                             1     1      0     154
                                              4 BANK0      1     1      0
                      _LCD_RS_SetLow
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_cursor                                           2     0      2     207
                                              4 BANK0      2     0      2
                      _LCD_RS_SetLow
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_write                                            2     2      0     132
                                              2 BANK0      2     2      0
                   _lcd_write_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_write_nibble                                     2     2      0      88
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_RS_SetLow                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init_0                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  4     4      0      23
                                              9 COMMON     4     4      0
                         _adc_read_0
 ---------------------------------------------------------------------------------
 (5) _adc_read_0                                           9     7      2      23
                                              0 COMMON     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
     ___wmul (ARG)
   ___wmul
   _adc_init_0
   _lcd_cursor
     _LCD_RS_SetLow
     _lcd_write
       _lcd_write_nibble
   _lcd_goto
     _LCD_RS_SetLow
     _lcd_write
       _lcd_write_nibble
   _lcd_init
     _LCD_RS_SetLow
     _LCD_RW_SetLow
     _lcd_write
       _lcd_write_nibble
   _lcd_puts
     _LCD_RS_SetHigh
     _lcd_write
       _lcd_write_nibble
   _sprintf
     ___lwdiv
       ___wmul (ARG)
     ___lwmod
       ___lwdiv (ARG)
         ___wmul (ARG)
     ___wmul
     _isdigit
   _t0_init

 _isr (ROOT)
   _adc_read_0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      30       5       60.0%
BITBANK0            50      0       1       4        1.3%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3D      12        0.0%
ABS                  0      0      3D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jun 19 15:59:43 2020

                        pc 0002                __CFG_CP$OFF 0000                         _GO 00F9  
                       fsr 0004        ___wmul@multiplicand 0022             ?_LCD_RS_SetLow 0070  
                      l400 0404                        _ADC 004C                        l281 004D  
                      l299 010E                        _GIE 005F                        _RA2 002A  
                      _RB0 0030                        _RB1 0031                        _RA3 002B  
                      _RA4 002C                        _RB2 0032                        _RC0 0038  
                      _RB5 0035                        _RC3 003B                        _RC4 003C  
                      _RB7 0037                        _RC5 003D                        _PS0 0408  
                      _PS1 0409                        _PS2 040A               __CFG_CPD$OFF 0000  
                      u630 02CF                        u720 0302                        u704 02F4  
                      u715 02F7                        u660 02E0                        u655 02D5  
                      _PSA 040B                        u745 0421                        u825 0317  
                      u690 02F1                        u674 02E3                        u915 0364  
                      u685 02E6                        u845 0323                        u925 036D  
                      u855 032F                        u865 0339                        u785 0405  
                      u795 040C                        u895 0353            io_sw_read@swOld 004F  
                      _isr 045A             ?_LCD_RW_SetLow 0070                        fsr0 0004  
                      indf 0000                lcd_goto@pos 0024               __CFG_IESO$ON 0000  
             __CFG_FOSC$EC 0000            ?_LCD_RS_SetHigh 0070               __CFG_LVP$OFF 0000  
                     l1211 0322                       l1221 0343                       l1153 02D2  
                     l1217 0338                       l1209 0314                       l1233 0350  
                     l1401 015C                       l1155 0305                       l1235 035E  
                     l1243 0377                       l1181 0499                       l1421 0184  
                     l1413 0180                       l1333 0052                       l1239 036C  
                     l1407 0171                       l1351 00C0                       l1335 005D  
                     l1327 0049                       l1423 0027                       l1361 00D9  
                     l1425 01C7                       l1187 03FC                       l1339 006F  
                     l1285 03AC                       l1381 012D                       l1373 0100  
                     l1349 00A9                       l1391 0142                       l1383 0131  
                     l1367 00DF                       l1471 0215                       l1297 0486  
                     l1467 0204                       l1399 0158                       _ADFM 04FF  
                     ?_isr 0070                       _ADON 00F8                       _CHS0 00FA  
                     _CHS1 00FB                       _CHS2 00FC                       _CHS3 00FD  
                     STR_1 03EB                       STR_2 03F3                       _ANS2 0C42  
                     STR_3 03F3                       _ANS3 0C43                       _ANS8 0C48  
                     _T0IE 005D                       _T0IF 005A                       _T0CS 040D  
                     u1035 00F6                       u1307 02AB                       u1075 011D  
                     u1317 0438                       u1277 01E3                       u1287 026B  
                     u1297 029B                       _RBIE 005B                       i1l38 037F  
                     _TMR0 0001                main@message 0048               __CFG_WRT$OFF 0000  
            __CFG_FCMEN$ON 0000                       _main 01CE                       btemp 007E  
            __CFG_BOREN$ON 0000                       start 0012               lcd_cursor@on 0024  
            __CFG_MCLRE$ON 0000                      ??_isr 0079            __end_of_t0_init 04B8  
                    _ADCS0 00FE                      _ADCS1 00FF                      ?_main 0070  
                    _ANS12 0C4C                      _ANS13 0C4D              __CFG_WDTE$OFF 0000  
                    _ANSEL 0188                      _IOCB6 04B6            __end_of___lwdiv 0348  
                    i1l252 046B            __end_of___lwmod 037C                      _VCFG0 04FC  
                    _VCFG1 04FD                      _TRISA 0085                      _TRISC 0087  
                    _WPUB6 04AE                      u95_25 0386                      _nRBPU 040F  
          __end_of_dpowers 03EB            __end_of_isdigit 049B                      pclath 000A  
                    status 0003                      wtemp0 007E            __end_of_sprintf 01CE  
          __initialization 0015               __end_of_main 0272            ??_LCD_RS_SetLow 0020  
                   ??_main 0043            ??_LCD_RW_SetLow 0020                     _ADRESH 001E  
                   _ADRESL 009E                     _ANSELH 0189                     _TRISB0 0430  
                   _TRISA2 042A                     _TRISB1 0431                     _TRISA3 042B  
                   _TRISA4 042C                     _TRISB2 0432                     _TRISB5 0435  
                   _TRISB6 0436                     _TRISB7 0437             __CFG_PWRTE$OFF 0000  
         __end_of_lcd_init 02C6           __end_of_lcd_goto 04AB                  ??_t0_init 0020  
         __end_of_lcd_puts 03D1                     ___wmul 03F8   __end_of_lcd_write_nibble 030A  
                ??___lwdiv 002A                  ??___lwmod 0032          lcd_write_nibble@c 0021  
                ??_isdigit 0020                     saved_w 007E                  ??_sprintf 0037  
         adc_read_0@result 0077    __end_of__initialization 001C             __pcstackCOMMON 0070  
             __pidataBANK0 04C4                 _adc_init_0 043C                 _adc_read_0 037C  
         ??_LCD_RS_SetHigh 0020         __size_of_lcd_write 0021               sprintf@width 003F  
               __pbssBANK0 004C                 __pmaintext 01CE                    ?___wmul 0020  
               __pintentry 0004                 _lcd_cursor 0476                  ?_lcd_init 0070  
                ?_lcd_goto 0070                  ?_lcd_puts 0024                 __stringtab 03D1  
                  _t0_init 04AB                ?_adc_init_0 0070                ?_adc_read_0 0070  
        __end_of_lcd_write 043C            __size_of___wmul 0023                    ___lwdiv 030A  
                  ___lwmod 0348                    __ptext1 04AB                    __ptext2 0020  
                  __ptext3 048B                    __ptext4 03F8                    __ptext5 0348  
                  __ptext6 030A                    __ptext7 03A7                    __ptext8 04B8  
                  __ptext9 0272                    _dpowers 03E1                    _isdigit 048B  
             __size_of_isr 001C                    _sprintf 0020                 ??_lcd_init 0024  
               ??_lcd_goto 0024                 ??_lcd_puts 0026       end_of_initialization 001C  
        ?_lcd_write_nibble 0070      __end_of_LCD_RS_SetLow 04C4         ??_lcd_write_nibble 0020  
    __end_of_LCD_RW_SetLow 04C0                ?_lcd_cursor 0024        __size_of_adc_init_0 001E  
      __size_of_adc_read_0 002B                 lcd_write@c 0023             __end_of___wmul 041B  
            __pbitbssBANK0 0270        start_initialization 0015                __end_of_isr 0476  
      __size_of_lcd_cursor 0015                   ??___wmul 0024                __pdataBANK0 004F  
                ___latbits 0002              __pcstackBANK0 0020          __size_of_lcd_init 0054  
        __size_of_lcd_goto 0010                sprintf@flag 003E          __size_of_lcd_puts 002A  
              sprintf@prec 003B           ___lwdiv@dividend 0028                   ?_t0_init 0070  
             ??_adc_init_0 0020               ??_adc_read_0 0072                   ?___lwdiv 0026  
                 ?___lwmod 002E                  __pstrings 03D1                  _lcd_write 041B  
                 ?_isdigit 0070           ___lwdiv@quotient 002B                   ?_sprintf 0034  
  __size_of_LCD_RS_SetHigh 0004         __end_of_adc_init_0 045A         __end_of_adc_read_0 03A7  
        interrupt_function 0004             ___wmul@product 0024                  _swPressed 0270  
              __stringbase 03E0                 ?_lcd_write 0070          ___wmul@multiplier 0020  
                lcd_puts@s 0024               ??_lcd_cursor 0026  __size_of_lcd_write_nibble 0044  
         __size_of_t0_init 000D         __end_of_lcd_cursor 048B           __size_of___lwdiv 003E  
         __size_of___lwmod 0034         __end_of__stringtab 03E1                _isdigit$384 0020  
               sprintf@val 003C           __size_of_isdigit 0010                   _main$651 0046  
          ___lwdiv@divisor 0026            ___lwdiv@counter 002D                   __ptext10 04BC  
                 __ptext11 049B                   __ptext12 0476                   __ptext13 041B  
                 __ptext14 02C6                   __ptext15 04C0                   __ptext16 043C  
                 __ptext17 045A                   __ptext18 037C          __CFG_BOR4V$BOR40V 0000  
                 _lcd_init 0272                   _lcd_goto 049B                   _lcd_puts 03A7  
         __size_of_sprintf 01AE              __size_of_main 00A4     __size_of_LCD_RS_SetLow 0004  
   __size_of_LCD_RW_SetLow 0004                ??_lcd_write 0022                   isdigit@c 0021  
           _LCD_RS_SetHigh 04B8                   intlevel1 0000                  sprintf@ap 003A  
                sprintf@sp 0041           ___lwmod@dividend 0030                  stringcode 03DB  
            _LCD_RS_SetLow 04C0                   sprintf@c 0042                   sprintf@f 0034  
          ___lwmod@divisor 002E            ___lwmod@counter 0033              _LCD_RW_SetLow 04BC  
                 stringdir 03DB                   stringtab 03D1     __end_of_LCD_RS_SetHigh 04BC  
         _lcd_write_nibble 02C6  
